To support frequent updates, two partitioning policies have been studied in depth: (1) R-tree based spatial indexing, and (2) grid-based spatial indexing.
Recently, a number of publications have addressed the  scalability issue on how to support massive numbers of objects and queries in highly dynamic environments.
Instead of traversing a tree from the root node for  frequent update requests (top-down approach), it directly accesses the leaf node of the object to be updated via an object hash table.
The basic idea of the Q+Rtree [ 14 ] is to separate indexing structures for quasistationary objects and moving objects : fast-moving 