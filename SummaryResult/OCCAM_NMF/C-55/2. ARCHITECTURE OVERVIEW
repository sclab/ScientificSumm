in the following chapters 3 and 4, we describe the location sensing-backend and the application front-end for supporting group interaction in more detail. 
based on a floor plan-view of the geographical area the user currently resides in, it gives a quick overview of which people are nearby, their state and provides means to interact with them.
furthermore, this visualisation is used to show the artefacts for asynchronous communication.
the current implementation provides a two-dimensional map of the campus, but it can easily be replaced by other visualisations, a three-dimensional vrml-model for example.
the second part of the user interface is a visualisation of the user"s locations, which is implemented in the attribute viewer.
through the interface of the messenger, it provides means of synchronous and asynchronous communication as well as a context-aware reminder system and tools for managing groups and the own availability status.
the instant messenger encapsulation is also responsible for supporting group communication.
for example, the contexts activity and identity are derived from the messenger network as it is described later.
as the basic functionality of the instant messenger - to serve as a client in an instant messenger network - remains fully functional, our application is able to use the features already provided by the messenger.
we have chosen and instant messenger as front-end because it provides a well-known interface for most users and facilitates a seamless integration of group interaction support, thus increasing acceptance and ease of use.
as external application, we use an existing open source instant messenger - the icq2 -compliant simple instant messenger (sim)3 .
the central attribute on client-side is the so-called instant messenger encapsulation, which on the one hand interacts with the server through events and on the other hand serves as a proxy for the external application the user interface is built on.
the currently implemented user interface is split up in two parts, which are also represented by two attributes.
thus, the complete user interface can be easily exchanged, if all of the defined events are taken into account and understood by the new interface-attribute.
furthermore, modular design was not only an issue on the sensor side but also when designing the user interface architecture.
the client-side part of the application is kept as simple as possible.
whenever necessary, events are thrown to the affected clients to trigger context-aware activities, like changing the presentation of awareness information or the execution of services.
90 every time a change in the context of one or more users is detected, giss core evaluates the effect of these changes on the user, on the groups he belongs to and on the other members of these groups.
it not only serves as an interface to the location-sensing subsystem, but also collects further context information in other dimensions (time, identity or activity).
figure 3. architecture of the group interaction support system (giss) the giss core-attribute is the central coordinator of the application as it shows to the user.
because of the abstraction of sensor-dependent position information, the system can easily be extended by additional sensors, just by implementing the (typically two) attributes for encapsulating sensors (some sensors may not need a client-side part), abstracting physical positions and observing the interface to giss core.
their job is to merge location- and  proximityinformation of clients, respectively, which is described in detail in chapter 3.3. every time the symbolic location of a user or the spatial proximity between two users changes, the sensor fusion-attributes notify the giss core-attribute, which controls the application.
the standardized location- and proximity-information of each user is then passed to the so-called sensor fusion-attributes, one for symbolic locations and a second one for spatial proximities.
this requires a context repository, where the mapping of diverse physical positions to standardized locations is stored.
all location- and proximity-sensors supported are represented by server-side context-attributes, which correspond to the client-side sensor encapsulation-attributes and abstract the sensor-dependent position information received from all users via the wireless network (sensor abstraction).
we consider it very important to support different types of sensors even at the same time, in order to improve location accuracy on the one hand, while providing a pervasive location-sensing environment with seamless transition between different location sensing techniques on the other hand.
these attributes are responsible for integrating native sensor-implementations into the context framework and sending sensor-dependent position information to the server.
each client may have various location and/or proximity sensors attached, which are encapsulated by respective context framework-attributes (sensor encapsulation).
developing the architecture, we focused on keeping the client as simple as possible and reducing the communication between client and server to a minimum.
we do not only sense the current location of users, but also determine spatial proximities between them.
a main part of our work is about the automated acquisition of position information and its sensor-independent provision at application level.
figure 1).
as giss uses the context framework described in chapter 1.3 as middleware, every user is represented by an entity, as well as the central server, which is responsible for context transformation, context representation and context triggering (cf.
