this can limit the overall performance of processes, and make the system less scalable. 
this is  different from gridflow, which can execute a process in at most two levels, having the global level as the only responsible to schedule subprocesses in other groups.
finally, the support infrastructure breaks the process and its subprocesses for grid execution, allowing a group to  require another group for the coordination and execution of process elements on behalf of the first one.
this makes easier to monitor and control processes.
comparing to swindew, the proposed architecture  contains widely distributed process coordinators, which  coordinate processes or parts of them, differently from swindew where each node has a limited view of the process: only the activity that starts next.
but, like the latter, it is designed to support execution recovery.
the architecture proposed in this paper, which  encompasses a programming model and an execution support  infrastructure, is widely decentralized, differently from webflow and opera-g, being more scalable and fault-tolerant.
based on this information, gridflow employs a pert-like technique that tries to forecast the activity execution start time and duration in order to better schedule them to the available resources.
in the local level, it has services that predict computing resource utilization and activity duration.
it uses a two-level scheduling: global and local.
in the specific area of activity distribution and scheduling, emphasized in this work, gridflow [5] is remarkable.
in order to surpass this limitation, systems like swindew [13] proposed a widely distributed process execution, in which each node knows where to execute the next activity or join activities in a peer-to-peer environment.
the previously referred architectures and others that  enact processes over the grid have a centralized coordination.
opera-g [3], like webflow, uses a process specification language  similar to the data flow diagram and workflow languages, but furnishes automatic execution recovery and limited steering of process execution.
following such model, webflow [1] is a process  specification tool and execution environment constructed over corba that allows graphical composition of activities and their distributed execution in a grid environment.
they take advantage of these dependencies to provide automatic recovery, and  better distribution and scheduling algorithms.
however, emerging  architectures maintain task dependencies and automatically execute tasks in a correct order.
the grid architectures generally have services that  manage computing resources and distribute the execution of  independent tasks on available ones.
aiming to standardize interfaces and services to grid, the open grid services architecture (ogsa) [7] has been defined.
among them, globus [6], condor-g [9] and legion [10] are widely known.
there are several academic and commercial products that promise to support grid computing, aiming to provide  interfaces, protocols and services to leverage the use of widely middleware for grid computing 90 distributed resources in heterogeneous and autonomous  networks.
