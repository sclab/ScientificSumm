it would be interesting to compare commitment machines with hermes, but, since  commitment machines are a framework, not a design methodology, we need to compare hermes with a methodology for designing  interactions that results in commitment machines [13, 17]. 
there has already been some work on comparing hermes with a  conventional message-centric approach to designing interaction, and this has shown that using hermes results in designs that are  significantly more flexible and robust [4].
finally, there is a need to perform empirical evaluation.
another area for further work is to look at how the assumptions required to ensure that actions commute can be relaxed.
also, although we have not done so, it should be clear that the translation from a cm to its implementation could easily be automated.
clearly, it would be desirable to modify the semantics of 3apl (or of another language) directly, by changing the implementation.
although we have implemented the netbill interaction using 3apl, the changes to the semantics were done by modifying our netbill 3apl program, rather than by modifying the 3apl  implementation itself.
however, they provide  infrastructure support (casa) rather than a programming language, and do not appear to provide assistance to a programmer seeking to implement agents.
[8]) also uses  commitments, and deals with implementation.
on autonomous agents and multi-agent systems (aamas 07) 879 figure 8: sample runs from 3apl implementation (non-alternating turns) the work of kremer and flores (e.g.
joint conf.
the sixth intl.
9 we also assume that the communication medium does not deliver messages out of order, which is the case for (e.g.)
also, they do not address the turn taking issue: how to decide which agent acts when more than one agent is able to act.
however, since hermes does not yield a design that is formal, it is only possible to generate skeleton code that then needs to be completed.
although the main focus of their work is a pragmatic design methodology, they also provide guidelines for implementing hermes designs using bdi platforms (specifically jadex) [3].
another piece of work that is relevant is the work by cheong and winikoff on their hermes methodology [2].
we have already discussed staple [9, 10].
as we have mentioned in section 1, there has been some work on designing flexible and robust agent interaction, but virtually no work on implementing flexible and robust interactions.
the three changes to saapl, and the translation scheme from commitment machine to bdi plans are both applicable to any bdi language.
we have presented a scheme for mapping commitment machines to bdi platforms (using saapl as an exemplar), identified three changes that needed to be made to saapl to support cm-based  interaction, and shown that turn management can be avoided in  cmbased interaction, provided the cm is locally monotonic.
