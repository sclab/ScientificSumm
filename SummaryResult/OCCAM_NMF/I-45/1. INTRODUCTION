we then extend our scheme to  address a range of issues concerned with distribution, including turn tracking [7], and race conditions. 
we then present a scheme for translating commitment machines to this language, and indicate how the language needs to be extended to support this.
in the remainder of this paper we briefly review  commitment machines and present a simple abstraction of bdi aopls which lies in the common subset of languages such as jason, 3apl, and can.
this paper presents a scheme for extending bdi-like aopls to support direct implementation of agent interactions that are  designed using yolum & singh"s commitment machine (cm)  framework [19].
the first such language, staple, was proposed a few years ago [9], but is not described in detail, and is arguably impractical for use by non-specialists, due to its logical basis and heavy reliance on temporal and modal logic.
this paper presents what, to the best of our knowledge, is the second aopl to support high-level, flexible, and robust agent  interaction implementation.
indeed, modern aopls [1], with virtually no exceptions, provide only simple message sending as the basis for implementing agent interaction.
current agent oriented programming languages  (aopls) do not provide support for implementing flexible and robust agent interactions using higher-level concepts than messages.
however, although there has been work on designing flexible and robust agent interactions, there has been virtually no work on  providing programming language support for implementing such  interactions.
there has also been work on richer forms of interaction in specific settings, such as teams of  cooperative agents [5, 11].
recognising these limitations of the traditional approach to  designing agent interactions, a number of approaches have been  proposed in recent years that move away from message-centric  interaction protocols, and instead consider designing agent interactions using higher-level concepts such as social commitments [8, 10, 18] or interaction goals [2].
on the other hand, when following an interaction  protocol, an agent has limited flexibility and robustness: the ability to persistently try alternative means to achieving the interaction"s aim is limited to those options that the protocol"s designer provided, and in practice, message-centric design processes do not tend to lead to protocols that are flexible or robust.
intelligent agents should exhibit the ability to persist in achieving their goals in the face of failure (robustness) by trying different approaches (flexibility).
it has been argued that this message-centric approach to  interaction design is not a good match for intelligent agents.
the standard approach for designing agent interactions is  messagecentric: interactions are defined by interaction protocols that give the permissible sequences of messages, specified using notations such as finite state machines, petri nets, or agent uml.
consequently, design and implementation of agent interaction is an important research topic.
agents are social, and agent interaction plays a vital role in  multiagent systems.
