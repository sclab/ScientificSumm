a summary, conclusion and outlook to future work finish this paper. 
sections 4 and 5 describe the  distributed resource allocation algorithm and presents various experimental results.
section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.
the remainder of the paper is structured as follows: the next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.
selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (rps) c 2007 ifaamas system resources and is an emergent property of the  system [21].
this can be achieved by the mutual interactions between agents by applying techniques from complex system theory.
such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.
this proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation  requests of agents [11].
the proposed approach provides an easy way to implement distributed resource allocation and takes into  account multi-agent system tendencies toward autonomy,  heterogeneity and unreliability of resources and agents.
in addition, the overall system performance is not affected in case agents or servers fail or become  unavailable.
we demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various  system sizes.
the proposed mechanism does not require a central  controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.
the basic  concept of our solution is inspired by inductive reasoning and bounded rationality introduced by w. brian arthur [2].
additional resource load  information about servers is not disseminated.
the only information available to all agents are resource load and allocation success information from past resource allocations.
they optimise the resource  allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.
all control needed for our algorithm is distributed among the agents in the system.
in our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.
in our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.
in this paper we propose a distributed solution of the  resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.
another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].
even if those approaches are distributed, they usually require a facilitator for pricing,  resource discovery and dispatching jobs to resources [5, 9].
a promising kind of such distributed approaches are based on economic market models [4], inspired by  principles of real stock markets.
researchers have recognised these  requirements [10] and proposed techniques for distributed resource allocation.
hence, distributed solutions of the resource allocation  problem are required.
it is difficult for a central resource allocation mechanism to collect and  manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.
in this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.
with the increasing popularity of distributed computing technologies such as grid [12] and web services [20], the internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing  computing resources to perform tasks.
