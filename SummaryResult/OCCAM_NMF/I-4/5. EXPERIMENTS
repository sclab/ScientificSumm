this conclusion holds for those environments where the system is facing moderate heavy load and tasks have relatively tight time deadline (our experiment setup is to produce such environment); the efficient negotiation is especially important in such environments. 
the reasoning process based on this more accurate model  produces an efficient negotiation solution, which improves the agent"s and the system"s overall utility significantly.
the above experiment results show that the meta-level  information transferred among agents during the pre-negotiation phase is critical in building a more accurate model of the negotiation  problem.
in the  evenly-divideddeadline policy, the agent allocates negotiation time evenly among the related negotiations, hence the complicated negotiation does not get enough time to complete.
the evenly-divided-deadline policy performs much worse than the meta-info-deadline policy.
in this way, the agent does not have to pay decommitment penalty for those canceled negotiations because no commitment has been  established yet.
the consequence of  sequencing negotiation is that, if there is failure, an agent can simply cancel the other related negotiations that have not been started.
this also has the effect of allowing some  negotiations to be performed in sequence.
when the agent uses the meta-info-deadline policy, complicated negotiations are allocated more time and, correspondingly, simpler negotiations are allocated less time.
in the case that one  negotiation fails, all related tasks have to be canceled, and the agent needs to pay multiple decommitment penalties.
when an agent uses the same-deadline policy, all  negotiations have to be performed in parallel.
in this situation, we found the meta-info-deadline policy performs much better than same-deadline policy (see  figure 7).
this setup generates a higher level of system workload, which results in some tasks not being completed no matter what negotiation  ordering is used.
on autonomous agents and multi-agent systems (aamas 07) 15 time units, and one task deliver gift (directly from the  customer to the transporter) is generated every 10 time units.
joint conf.
56 the sixth intl.
one purchase computer task is generated every 15 time units, three purchase memory tasks are generated every 2 we only measure the utility collected after the learning phase  because that the learning phase is relatively short comparing to the evaluation phase, also during the learning phase, no meta-level  information is used, so some of the policies are invalid.
therefore, in this second set of experiments, we increase the number of new tasks generated to raise the average workload in the system.
in this situation, with either of the policies, most  negotiations are successful, and there are few decommitment  occurrences, so the ordering of negotiations does not make too much  difference.
the initial result shows that the same-deadline policy and the meta-info-deadline policy perform almost the same when the amount of system  workload level is moderate, tasks can be accommodated given sufficient flexibility.
in the second set of experiments studies, we compare three  negotiation deadline policies described in section 4.2 when using the meta-info flexibility policy described above.
therefore, the success probability increases and fewer tasks are rejected or canceled (90% of the tasks have been successfully negotiated over when using meta-level information, compared to 39% when no pre-negotiation is used), resulting in both the agent and the  system achieving better performance.
when the agent has a better understanding of the global negotiation scenario, it is able to allocate more flexibility for those tasks that involve complicated negotiations and resource contentions.
especially for those agents in the middle of the negotiation chain, such as the pc manufacturer and the  distribution center, the flexibility policy makes a significant difference.
all agents perform better in this example (gain more utility) when they are using the meta-level information to adjust their local control through the parameters in the success probability function (meta-info-flex policy).
this setting creates  multiple concurrent negotiation chain situations; there is one long chain: customer - store - pc manufacturer - distribution center -  producers - transporter and two short chains: customer - store - memory producer this demonstrates that this mechanism is capable of handling  multiple concurrent negotiation chains.
the decommitment penalty rate is randomly generated in the range of [0, 1].
the deadline for task purchase computer is randomly  generated in the range of [30, 60], the deadline for task purchase  memory is in the range of [10, 30].
one purchase computer task is generated every 20 time units, and two purchase memory tasks are generated every 20 time units.
the data was collected over the 800 time units after the pre-negotiation figure 7: different negotiation deadline policies phase 2 .
at time 200, agents perform meta-level  information communication, and in the next 800 time units, agents use the meta-level information in their local reasoning process.
in the first 200 time units, agents are learning about the task characteristics, which will be used to calculate the conflict probabilities pcij.
this set of  experiments includes 10 system runs, and each run is for 1000 simulating time units.
figure 6 shows the results of this experiment.
it also adjusts those parameters (pbs(v) and c) according to the meta-level information obtained in  prenegotiation phase as described in section 4. table 2 shows the values of those parameters for some negotiations.
2. meta-info-flexibility policy: the agent uses the function ps(v) = pbs(v) ∗ (2/π) ∗ (arctan(f(v) + c))) to model the  success probability.
1. fixed-flexibility policy: the agent uses a fixed value as the success probability (ps(v) = pbs(v)), according to its local knowledge and estimation.
we tried two different flexibility policies.
a search algorithm [10] and a set of partial order  scheduling algorithms are used to handle these attributes.
all other attributes involved in negotiation are handled according to how they affect the feasibility of local schedule (time-related  attributes) and how they affect the negotiation success probability (time and cost related attributes) and how they affect the expect utility.
here we only describe how agents handle the negotiation duration and negotiation deadlines because they are the attributes affected by the pre-negotiation phase.
to focus on the study of flexibility, in this experiment, the regular rewards for each type of tasks are fixed and not under negotiation.
in this experiment, agents need to make decision on negotiation ordering and feature assignment for multiple attributes including: earliest start time, deadline, promised finish time, and those attributes-of-negotiation.
on autonomous agents and multi-agent systems (aamas 07) 55 table 2: parameter values without/with meta-level  information fixed-flex meta-info-flex negotiation pbs pbs c order computer 0.95 1.0 0 order memory (1) 0.95 0.79 1 order hardware 0.95 1.0 2 deliver computer 0.95 1.0 1 deliver hardware 0.95 1.0 5 order chips 0.95 1.0 1 order memory (2) 0.95 0.76 1 figure 6: different flexibility policies how the success probability functions and negotiation deadlines  affect the negotiation outcome, the agents" utilities and the system"s overall utility.
we performed two sets of experiments to study the sixth intl.
new tasks were randomly generated with  decommitment penalty rate p ∈ [0, 1], early finish reward rate e ∈ [0, 0.3], and deadline dl ∈ [10, 60] (this range allows different flexibilities available for those sub-contracted tasks), and arrived at the store agent periodically.
to verify and evaluate the mechanisms presented for the  negotiation chain problem, we implemented the scenario described in figure 1 .
