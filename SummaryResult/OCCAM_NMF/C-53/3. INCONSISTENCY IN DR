d1 is de(i, j, t0, t1) and it is caused by the state filtering mechanism of dr. d2 is de(i, j, t1, t2) and it is caused by network transmission delay. 
from figure 1, it can be seen that the after inconsistency is 0, and the before consistency is composed of two parts, d1 and d2.
then site j updates its replicated entity"s position and velocity, and the paths of the shared entity at sites i and j overlap again.
at time point t2, the state update reaches site j, and the received state and the time deviation between time points t1 and t2 are used to calculate the current position of the shared entity.
at time point t1, site i finds that the difference is larger than the threshold and it sends a state update to site j. the state update contains the position and velocity of the shared entity at time point t1 and time point t1 is also attached as a timestamp.
site i first periodically checks whether the difference between the accurate position of the shared entity and the estimated one, 0 in this case, is larger than a predefined threshold.
at time point t0, the player at site i issues an operation, which changes the velocity in x axis to v0.
figure 1 illustrates the paths of the shared entity at local site and remote site in x axis by using gs-dr. at the beginning, the positions of the shared entity are the same at sites i and j and the velocity of the shared entity is 0. before time point t0, the paths of the shared entity at sites i and j in x coordinate are exactly the same.
to simplify the description, it is also assumed that there are only two sites i and j in a game session, site i acts as 2 the 5th workshop on network & system support for games 2006 - netgames 2006 local site and site j acts as remote site, and t1 is the time point the local site updates the state of the shared entity.
figure 1. the paths of a shared entity by using gs-dr. for example, it is assumed that the velocity of a shared entity is the only parameter to predict the entity"s position, and current position of the entity can be calculated by its last position and current velocity.
the second reason is network transmission delay, as a shared entity can be synchronized only after remote sites receiving corresponding state update.
the first reason is the delay of sending state updates, as local site does not send a state update unless the difference between accurate state and the estimated one is larger than a predefined threshold.
before inconsistency is caused by two reasons.
by employing physical clock synchronization, gs-dr can accurately calculate the states of shared entities after receiving state updates, and it can eliminate after inconsistency.
after inconsistency is caused by the lack of synchronization between the physical clocks of all sites in a system.
before inconsistency and after inconsistency are similar with the terms before export error and after export error [8].
the inconsistency before a remote site receives a state update is referred to as before inconsistency, and the inconsistency after a remote site receives a state update is referred to as after inconsistency.
the inconsistency in dr can be divided into two sections by the time point when a remote site receives a state update.
