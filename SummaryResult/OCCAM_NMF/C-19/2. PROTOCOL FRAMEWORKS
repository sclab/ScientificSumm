notifications may also be the results of a request. 
• notifications can be used by a protocol module to inform (possibly many) protocol modules in the same stack about the occurrence of a specific event.
for example, a request by pi generates replies that concern only protocol modules pj.
only protocol modules belonging to the same protocol as the module that has issued the request are concerned by the corresponding replies.
a single request can generate several replies.
• replies are the results of a request.
a request by a protocol module pi is an asynchronous call by pi of another protocol module.
• requests are issued by protocol modules.
below, we define the  different kinds of interaction between protocol modules.
protocol module interactions.
1).
for instance, protocol module p1 interacts with the protocol module q1 and conversely (see fig.
arrows show module interactions.
modules are  represented as white boxes.
we write pi to denote the protocol module of a protocol p in stack i. we use this notation throughout the paper.
p1, q1, r1 and s1.
we  represent protocol modules by capital letters indexed with a natural number, e.g.
stack 1 s1 q1 r1 p1 network figure 1: example of a protocol stack in figure 1, we show an example protocol stack.
in the remainder of this paper, we use the terms machine and stack interchangeably.
a protocol module can interact with all other  protocol modules in the same stack, not only with the protocol modules directly above and below.
note that, despite its name, a stack is not strictly layered, 691 i.e.
a stack is a set of protocol modules (of different protocols) that are located on the same machine.
protocol stacks.
a protocol is implemented as a set of identical protocol modules located on different machines.
a tcp protocol solves the reliable channel problem.
a protocol is a  distributed algorithm that solves a specific problem in a  distributed system, e.g.
protocols and protocol modules.
in this section, we describe notions that are common to all protocol frameworks.
