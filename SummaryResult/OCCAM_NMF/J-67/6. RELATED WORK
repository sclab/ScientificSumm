a dominant strategy ic  mechanism is presented for the variant in which every point in time is essentially independent, while a bayes-nash ic  mechanism is presented for the variant in which the center"s  current decision affects the cost of future actions. 
the only other paper we are aware of that addresses the issue of incentive compatibility in a real-time system is [11], which considers several variants of a model in which the center allocates bandwidth to agents who declare both their value and their arrival time.
it is pointed out in [16] that their results continue to hold when the setting is extended so that bidders can delay their arrival.
the main difference between the two is that the former considers the case of a digital good, which thus has unlimited supply.
truthful declaration of values is also  considered in [3] and [16], which both consider multi-unit online auctions.
in [2], a  general method is presented for converting an online algorithm into an online mechanism that is incentive compatible with respect to values.
for example, [5]  considers an online market clearing setting, in which the  auctioneer matches buy and sells bids (which are assumed to be exogenous) that arrive and expire over time.
online execution presents a different type of algorithmic challenge, and several other papers study online algorithms or mechanisms in economic settings.
for a survey of this and other topics in distributed algorithmic mechanism design, see [9].
a growing sub-field in this area is multicast cost-sharing mechanism design (see, e.g., [1]), in which the mechanism must efficiently determine, for each agent in a multicast tree, whether the agent receives the transmission and the price it must pay.
this paper also launched the area of  algorithmic mechanism design, in which the mechanism must  sat69 isfy computational requirements in addition to the standard incentive requirements.
several incentive compatible mechanisms are presented that are based on approximation algorithms for the computationally infeasible optimization problem.
the private information of an agent is the time it will require to execute each job.
in their model, the center owns the jobs in an oﬄine setting, and it is the agents who can execute them.
mechanism design was also applied to a scheduling problem in [18].
recent work related to this scheduling domain has focused on competitive analysis in which the online algorithm uses a faster processor than the oﬄine algorithm (see, e.g., [13, 14]).
in this section we describe related work other than the two papers ([4] and [15]) on which this paper is based.
