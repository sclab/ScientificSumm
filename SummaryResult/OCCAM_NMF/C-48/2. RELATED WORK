dimensions and difs can be thought of as using the same set of primitives as ght (storage using consistent hashing), but for different ends: dimensions allows  drill64 down search for features within a sensor network, while difs allows range queries on a single key in addition to other operations. 
we also leverage properties in gpsr (as we describe later), but we use a locality-preserving hash to store data, enabling efficient multi-dimensional range queries.
ghts are built upon the gpsr [16] protocol and leverage some interesting properties of that protocol, such as the ability to route to a node nearest to a given location.
finally, our work is most close related to data-centric storage [23] systems, which include geographic hash-tables (ghts) [20], dimensions [7], and difs [10].in a ght, data is hashed by name to a location within the network,  enabling highly efficient rendezvous.
these approaches work well for relatively long-lived queries.
a similar differentiation applies with respect to work on data-centric routing in sensor networks [15, 25], where data generated at a node is assumed to be stored at the node, and queries are either flooded throughout the network [15], or each source sets up a network-wide overlay announcing its presence so that mobile sinks can rendezvous with sources at the nearest node on the overlay [25].
finally, in srt queries are issued from a fixed node while in dim queries can be issued from any node.
second, srt constructs a routing tree based on historical sensor readings, and therefore works well only for  slowlychanging sensor values.
first, srt is built on single attributes while dim supports mulitple attributes.
our work  differs from srt in three key aspects.
this index is used to direct queries to nodes that have detected relevant data.
[17] also describe a distributed index, called semantic routing trees (srt).
madden et al.
our work avoids query flooding by an appropriate choice of hashing.
in all the other systems described above, queries are flooded throughout the network, and can  dominate the total cost of the system.
this hashing is the key to scaling multi-dimensional range searches.
unlike these approaches, in our work the data generated at a node are hashed (in general) to different  locations.
our work departs from prior work in this area in two  significant respects.
in fact, dims could become an important component of a sensor network database system such as tinydb [17].
our work is similar in spirit to this body of  literature.
several research efforts have expressed the vision of a database interface to sensor networks [9, 3, 18], and there are examples of systems that contribute to this vision [18, 3, 17].
more recent work in the internet context has addressed support for range queries in dht systems [1, 12], but it is unclear if these directly translate to the sensor network context.
the underlying details make the two systems very different: can"s overlay is purely logical while our overlay is consistent with the underlying physical topology.
our work is superficially similar to can in that both construct a zone-based overlay atop of the underlying physical  network.
examples of such systems, of course, are the internet domain name  system, and the class of distributed hash table (dht) systems exemplified by freenet[4], chord[24], and can[19].
there  exist distributed indices of a restricted kind-those that allow exact match or partial prefix match queries.
while there has been some work on distributed indexing, the problem has not been extensively explored.
finally, tangentially related to our work is the class of spatial indexing systems [21, 6, 11].
our current design is not data dependent.
the index structure is decided not only by the data, but also by the order in which data is inserted.
the classical indexing structures are data-dependent (as are some indexing schemes that use locality preserving hashes, and developed in the theory literature [14, 8, 13]).
there is one important difference.
our approach essentially represents a geographic embedding of such structures in a sensor field.
our work draws its inspiration from the class of multi-key constant branching index structures,  exemplified by k-d trees [2], where k represents the dimensionality of the data space.
indexing has, for long, been a classical research problem in the database  community [5, 2].
indexing techniques essentially trade-off some data  insertion cost to enable efficient querying.
the database  community has focused mostly on centralized indices, but distributed indexing has received some attention in the literature.
the basic problem that this paper addresses -  multidimensional range queries - is typically solved in database systems using indexing techniques.
