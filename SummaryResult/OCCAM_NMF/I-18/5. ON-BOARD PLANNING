thus, a conflict has at least a cardinality of 2. 
the conflict cardinality corresponds to the number of agents that are candidates or committed to the same request.
the conflict cardinality is cardc(r) = |{c ∈ ct si |modc ∈ {2, 3}, cr = r}|.
let si be an agent and r a request in conflict.
we can define the conflict cardinality: definition 10 (conflict cardinality).
so each agent is able to determine if a conflict is soft or hard.
in satellite swarms, the geographical positions of the  requests are known as well as the satellite orbits.
consequently, the conflict is hard.
if this chain does not exist, it means that the agents in conflict cannot  communicate directly or not.
a conflict is soft if it exists a chain of agents between the two agents in conflict such as information can propagate  before both agents realize the request.
tj−1} (ti−1 = t) where: ∀ i ≤ k <j, sk+1 ∈ vicinity(sk, tk) with tk < obscsi , tk < obscsj and tk ≥ tk−1 then the conflict is soft else it is hard.
sj} and if ∃ t ∈ t such as t = {ti−1 .
if ∃ v ⊆ s such as v = {si .
let si and sj (i < j) two agents in conflict with, at time t, candidacies csi and csj respectively (scsi = si and scsj = sj).
definition 9 (soft/hard conflict).
a conflict is hard when the agents cannot communicate before the  realization of the request.
a conflict is soft when the concerned agents can communicate before one or the other carries out the request in question.
all the conflicts do not have the same strength, meaning that they can be solved with more or less difficulty according to the agents" communication capacities.
indeed, they exchange information not only concerning their own plan but also concerning what they know about the other agents" plans.
si and sj are in conflict if and only if: - rcsi = rcsj - modcsi and modcsj ∈ {2, 3} let us notice that the agents have the means to know whether they are in conflict with another one during the communication process.
let si and sj be two agents with, at time t, candidacies csi and csj respectively (scsi = si and scsj = sj).
consequently, conflict has to be defined: definition 8 (conflict).
because of clouds), it may also lead to a loss of opportunity.
whereas such  redundancies may sometimes be useful to ensure the realization of a request (the realization may fail, e.g.
: several agents stand as candidates to carry out this request.
it is a matter of redundancies between allocations on a given request, i.e.
on autonomous agents and multi-agent systems (aamas 07) 5.2 conflicts when two agents compare their respective plans some conflicts may appear.
joint conf.
290 the sixth intl.
- ∀ r ∈ at1 si such as r ∈ at2 si , a candidacy c such as mod(c) = ¬3, sc = si and rc = r is generated; - ∀ r ∈ at2 si such as r ∈ at1 si , a candidacy c such as mod(c) = 3, sc = si and rc = r is generated; - protocol 2 is used to update kt1 si in kt2 si .
let at2 si be the plan generated at time t2 with t2 > t1.
let si be an agent and at1 si a (possibly empty) plan at time t1.
definition 7 (generating candidacies).
building a plan generates candidacies.
let us define three sets: - the set of potential requests: rp = {r ∈ rt si |br = false} - the set of mandatory requests: rm = {r ∈ rp |∃c ∈ ct si : modc = 2, sc = si, rc = r} - the set of given-up requests: rg = {r ∈ rp |∃c ∈ ct si : modc = ¬2, sc = si, rc = r} a plan at si generated at time t ∈ t is a set of requests such as rm ⊆ at si ⊆ rp and ∃ r ∈ rg such as r ∈ at si .
let si be an agent, rt si a set of requests and ct si a set of candidacies.
a plan is defined as follows: definition 6 (plan).
in order to build the agents" initial plans, let us assume that each agent is equipped with an on-board planner.
proposing such partial allocations allows conflicts to be solved locally without propagating them through the whole plan.
this  horizon corresponds to the request realization date.
5.1 a deliberative approach inspired from both approaches, we propose to build  allocations made up of a set of unquestionable requests and a set of uncertain disjunctive requests on which a decision will be made at the end of the decision horizon.
the main idea in contingency planning [15, 29] is to determine the nodes in the initial plan where the risks of failures are most important and to incrementally build contingency branches for these situations.
the realization date), especially if there are several possibilities for a given request.
in an uncertain environment such as the one of satellite swarms, it may be advantageous to delay the decision until the last moment (i.e.
[13] relax these constraints by cleaving planning modules: on the first hand, satellites have a planner that builds plans on a large horizon and on the second hand, they have a decision  module that enables them to choose to realize or not a planned observation.
however, they assume high communication and computation capabilities [10].
in space contexts, [5, 21, 6] present multi-agent  architectures for on-board planning.
