in what follows, we will sometimes use the term activity to refer generically to both task and method nodes. 
figure 2 shows the subjective view available to agent 2 for the same problem.
figure 1 shows the complete objective view of a simple 2 agent problem.
a may also inherit these constraints from ancestor tasks at any higher level in the task structure, and its effective execution window will be defined by the tightest of these constraints.
any given task or method a can also be constrained by an earliest start time and a deadline, specifying the window in which a can be feasibly executed.
soft nles, which include facilitates and hinders, are not required constraints; however, when they are in play, they amplify (or dampen) the quality and duration of the target task.
on autonomous agents and multi-agent systems (aamas 07) 485 causal preconditions: for example, the enables nle in figure 1 stipulates that the target method m5 can not be executed until the source m4 accumulates quality.
joint conf.
the sixth intl.
hard nles express 1 for simplicity, figures 1 and 2 show only fixed values for method quality and duration.
two types of nles can be specified: hard and soft.
inter-dependencies between tasks/methods in the  problem are modeled via non-local effects (nles).
a sync-sum task will accrue quality only for those children that commence execution concurrently with the first child that executes, while an exactly-one task accrues quality only if precisely one of its children executes.
tasks with sum or max qafs acquire quality as soon as one child executes with positive quality; as their qaf names suggest, their respective values ultimately will be the total or maximum quality of all children that executed.
for example, a task with a min qaf will accrue the quality of its child with lowest quality if all its children execute and accumulate  positive quality.
for each task, a quality accumulation function qaf is  defined, which specifies when and how a task accumulates  quality as its subtasks (methods) are executed.
method durations and quality are typically specified as discrete probability distributions, and hence known with certainty only after they have been  executed.1 it is also possible for a method to fail unexpectedly in execution, in which case the reported quality is zero.
agents are unit-capacity resources).
each declared method m can only be executed by a specified agent (denoted by ag : agentn in figure 1) and each agent can be  executing at most one method at any given time (i.e.
methods appear at the leaf level of c taems task structures and are those that are directly executable in the world.
on successive levels, tasks constitute aggregate activities, which can be decomposed into sets of subtasks and/or  primitive activities, termed methods.
within c taems, tasks are represented hierarchically, as shown in the  example in figure 1. at the highest, most abstract level, the root of the tree is a special task called the task group.
problems are formally specified using a version of the taems language (task analysis, environment modeling and simulation) [4] called c taems [1].
figure 2: subjective view for agent 2. as execution proceeds, agents must react to unexpected  results (e.g., task delays, failures) and changes to the mission (e.g., new tasks, deadline changes) generated by the  simulator, recognize when scheduled tasks are no longer feasible or desirable, and coordinate with each other to take corrective, quality-maximizing rescheduling actions that keep execution of the overall mission moving forward.
each task has an associated quality value which accrues if it is successfully executed within its constraints, and the overall goal is to maximize the quality obtained during execution.
a pre-computed initial schedule is also  distributed to the agents, and each agent"s schedule indicates which of its local tasks should be executed and when.
instead, each agent receives only a subjective view containing just the portion of the task network that relates to ground tasks that it is responsible for and any remote tasks that have interdependencies with these local tasks.
a mission is formulated as a network of tasks, which are distributed among the agents by the mass  simulator such that no agent has a complete, objective view of the whole problem.
the coordinators  problem is concerned generally with the collaborative execution of a joint mission by a team of agents in a highly dynamic environment.
as indicated above the distributed schedule management problem that we address in this paper is that put forth by the darpa coordinators program.
