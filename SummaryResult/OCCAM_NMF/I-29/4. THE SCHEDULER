if these insertions  succeed, the routine returns success, otherwise the two extant timeline methods are relinked and allocation attempts the next possible slot for mnew insertion. 
at the stn level, mnew"s insertion breaks the  sequencing constraint between the two extant timeline  methods and attempts to insert two new sequencing constraints that chain mnew to these methods.
once scheduling of enablers is ensured, a feasible slot on the agent"s  timeline within mnew"s time window is sought and the allocator attempts to insert mnew between two currently scheduled methods.
in this event any enabler activities it has scheduled are  uninstalled and the allocator returns failure.
the stn  rejects an infeasible enabler constraint by returning a conflict.
when successful, the enables constraints linking the enabler activities to mnew are activated.
if any of the enabler activities fails to install, the allocation pass fails.
this entails first checking that all activities that enable mnew have been  scheduled, while attempting to install any enabler that is not.
the allocator iteratively pops the first method mnew from the agenda and attempts to install it.
since an and task accumulates quality only if all its children are scheduled, this biases the  scheduling process towards failing early (and regenerating  contributors) when the methods chosen for the and cannot  together be allocated.
in addition, methods associated with a and task (i.e., min, sumand) are grouped consecutively within the agenda.
the contributors are then preprocessed using a quality-centric heuristic to create an agenda sorted in  decreasing quality order.
any  currently scheduled methods that do not appear in the  contributors list are first unscheduled and removed from the timeline.
the activity allocator - the activity allocator seeks to install the contributors of the taskgroup identified by the quality propagator onto the agent"s timeline.
subsequent calls to the propagator occur as the allocator installs methods on the agent"s timeline: failure of the allocator to install a method causes the propagator to recompute a new list of contributors and activators.
the first time the quality propagator is invoked, the  qualities of all tasks and methods are calculated and the initial lists of contributors and activators are determined.
methods in the activators list are chosen to minimize demands on the agent"s timeline without regard to quality.
• generates a list of activators for each task: methods that, if scheduled, are sufficient to qualify the task as scheduled.
• generates a list of contributors for each task: methods that, if scheduled, will maximize the quality obtained by the task.
the quality qual(t) of a task t is computed by applying its qaf to the assessed quality of its children.
the quality propagator - the quality propagator  performs the following actions on the c taems task structure: • computes the quality of all activities in the task  structure: the expected quality qual(m) of a method m is computed from the probability distribution of the  execution outcomes.
failure to do so reinvokes the quality propagator with the problematic activity excluded.
the allocator  selects methods from this list and attempts to install them in the agent"s schedule.
the methods are collected without regard for resource  contention; in essence, the quality propagator optimally solves a relaxed problem where agents are capable of performing an infinite number of activities at once.
the quality propagator analyzes the activity hierarchy and collects a set of methods that (if scheduled) would maximize the quality of the agent"s local problem.
4.2 maintaining high-quality schedules the scheduler consists of two basic components: a quality propagator and an activity allocator that work in a tightly  integrated loop.
otherwise a conflict has been detected, and some amount of constraint retraction is necessary to restore feasibility.
as bounds are updated, a consistency check is made for the presence of negative cycles, and the absence of any such cycle ensures the continued temporal feasibility of the network (and hence the schedule).
this is accomplished efficiently via the use of a standard all-pairs shortest path algorithm; in our  implementation, we take advantage of an incremental procedure based on [2].
as new methods are inserted into a schedule or  external state updates require adjustments to existing constraints (e.g., substitution of an actual duration constraint,  tightening of a deadline), the network propagates constraints and maintains lower and upper bounds on all time points in the network.
an agent"s schedule is designated as a total ordering of selected methods by posting precedence  constraints between the end and start points of each ordered pair.
parentchild relation, enables) are uniformly represented as  temporal constraints (i.e., edges) between relevant start and finish time points.
release time, due time, duration) and relationships between activities (e.g.
an stn represents temporal constraints as a graph g < n, e >, where nodes in n represent the set of time points of interest, and edges in e are distances between pairs of time points in n. a special time point, called calendar zero grounds the network and has the value 0. constraints on activities (e.g.
on autonomous agents and multi-agent systems (aamas 07) ule, all problem and scheduling constraints impacting these times are encoded in an underlying simple temporal  network (stn)[3].
4.1 stn solution representation to maintain the range of admissible values for the start and end times of various methods in a given agent"s  sched486 the sixth intl.
joint conf.
in  subsequent sections we discuss its use in managing execution and coordinating with other agents.
in this section, we summarize the core scheduler that we have developed to solve the coordinators problem.
it also provides a basis for softening the impact of inter-dependencies across agents.
as mentioned earlier, slack can be used as a hedge against uncertain method execution times.
the coupling of incremental scheduling with flexible times scheduling adds additional leverage in an uncertain,  multiagent execution environment.
this latter property is also advantageous in multi-agent settings, since solution stability tends to minimize the ripple across different agents"  schedules.
there is an inherent bias toward schedule stability which provides better support for the continuity in execution.
incremental scheduling frameworks are ideally suited for domains requiring tight scheduler-execution  coupling: rather than recomputing a new schedule in response to every change, they respond quickly to execution events by localizing changes and making adjustments to the current schedule to accommodate the event.
as indicated above, our agent scheduler operates  incrementally.
