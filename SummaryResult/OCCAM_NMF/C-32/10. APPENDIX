the failover protocol has not been implemented yet.
it is straightforward to see that since this check is an end-to-end client-server check it is unaffected by client or redirector failure.
the validation procedure checks that the version number in the commit record matches the version number in the  unacknowledged outstanding invalidation.
retransmition of invalidations and updates maintains this invariant.
the  invariant holds since the client never applies an earlier  modification after a later modification has been received.
the version number protocol maintains the invariant v p that ensures that the value of object o read by the transaction corresponds to the highest version number for o received by the client.
the transaction commit record contains a version number for each object read by the transaction.
now consider the validation using version numbers.
when a server receives an acknowledgement for an object o  modification (invalidation or update) from a client group, any client in the group caching the object o has either installed the latest value of object o, or has invalidated o.  therefore, if a server receives a commit request from a client for a transaction t reading an object o after a failover in the client group, and the server has no unacknowledged invalidation for o pending for this group, the version of the object read by the transaction t is up-to-date independently of client or redirector failures.
the redirector-based invalidation (and update)  acknowledgement propagation ensures the following invariant.
recall that buddycache transaction validation uses two complementary mechanisms, page  version numbers and invalidation acknowledgements from the clients, to check that a transaction has read up-to-date data.
since the transaction validation procedure depends on the cache coherence protocol to ensure that transactions do not read stale data, we now need to argue that buddycache failover protocol does not compromise the correctness of the validation procedure.
unique version numbers in invalidations and updates ensure that duplicate retransmitted requests are detected and  discarded.
therefore, servers detecting a redirector crash  retransmit unacknowledged invalidations and commit replies.
invalidations, updates or collected update acknowledgements lost at the crashed redirector could prevent the garbage collection of pending invalidations at the servers or the vcache in the clients.
a client will restart the transaction and the commit request will be retransmitted after the failover.
a transaction running at the client during a failover and committing after the failover is treated as a regular transaction, a transaction trying to commit during a failover is aborted by the failover  protocol.
a lost fetch request will time out at the client and will be retransmitted.
requests outstanding at the redirector at the time of the crash may be lost.
whether the pages are complete or incomplete.
the newly restarted redirector asks the active group members for the list of pages they are caching and the  status of these pages, i.e.
in the case of a redirector failure, the failover protocol reinitializes sessions with the servers and clients, and  rebuilds the page directory using a protocol similar to one in [6].
any response to an earlier request  initiated by the failed client is ignored except a commit reply, in which case the redirector distributes the retained committed updates to active clients caching the modified pages.
in the case of a client failure, the failover removes the crashed client pages from the directory.
to restart the buddycache protocol, the failover needs to resynchronize the redirector page directory and  clientserver request forwarding so that active clients can continue running transactions using their caches.
here we describe how the failover manages the buddycache state.
the group reconfiguration protocol is similar to the one presented in [25].
the failover determines the active group participants, re-elects a redirector if needed, reinitializes the buddycache data structures in the new configuration and restarts the protocol.
a failure of a client or a redirector is detected by a  membership protocol that exchanges periodic i am alive  messages between group members and initiates a failover  protocol.
the  buddycache design assumes that the client caches and the  redirector data structures do not survive node failures.
to accommodate heterogeneous clients including  resourcepoor hand-helds we do not require the availability of  persistent storage in the buddycache peer group.
this appendix outlines the buddycache failover protocol.
