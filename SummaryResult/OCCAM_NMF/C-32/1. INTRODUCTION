these strong performance gains could make transactional object storage systems more attractive for collaborative  applications in wide-area environments. 
for latencies ranging from 40 to 80 milliseconds round trip time, clients using the buddycache can reduce by up to 50% the latency of access to shared objects  compared to the clients accessing the repository directly.
analytical results, supported by measurements based on the multi-user 007 benchmark, indicate that for typical  internet latencies buddycache provides significant performance benefits, e.g.
we compared the storage system performance with and without buddycache and considered how the cost-benefit balance is affected by network latency.
we designed and implemented a buddycache prototype and studied its performance benefits and costs using analytical modeling and system measurements.
since redirection supports the performance benefits of  reducing interaction with the server but introduces extra  processing cost due to availability mechanisms and request  forwarding, this raises the question is the cure worse than the disease?
a salient feature of solo commit is  supporting fine-grained validation using inexpensive coarse-grained coherence information.
solo commit, is a validation technique used by buddycache to avoid the  undesirable client dependencies that reduce object availability when some client nodes in the group are slow, or clients fail independently.
nevertheless, in a transactional system, redirection  interferes with shared object availability.
buddycache uses  redirection to support peer update, a lightweight application-level multicast technique that provides group members with  consistent access to the new data committed within the  collaborating group without imposing extra overhead outside the group.
similarly, when a client creates or modifies a shared object, the new data is likely to be of potential interest to all group members.
buddycache redirects subsequent requests for this object to the caching client.
when one of the clients in the group fetches a shared object from the  repository, the object is likely to be needed by other clients.
if the client request can not be served locally, the redirector forwards it to a remote server.
a  redirector server, interposed between the clients and the remote servers, runs on the same network as the collaborating group and, when possible, replaces the function of the remote servers.
buddycache uses a redirection approach similar to one used in cooperative web caching systems [11].
the other challenge is to support fine-grain cache coherence in the presence of slow and failed nodes.
one challenge is how to provide efficient access to shared  finegrained objects in the collaborative group without imposing performance overhead on the entire caching system.
buddycache presents two main technical challenges.
with buddycache, a group of close-by collaborating clients, connected to storage repository via a high-latency link, can avoid interactions with the server if needed objects, updates or coherency information are available in some client in the group.
the performance problem facing the collaborative application is coordinating with the servers consistent access to shared objects.
a coherence protocol ensures that client caches remain  consistent when objects are modified.
to improve access latency, clients fetch objects from repository servers and cache and access them locally.
the workstations are interconnected by a fast local ethernet but the network connection to the home repository servers is slow.
the engineers use workstations running repository clients.
the shared documents are stored in  transactional repository servers at the company home site.
the engineers use a collaborative cad application to revise and update complex project  design documents.
consider a team of engineers employed by a construction company overseeing a remote project and working in a shed at the construction site.
the contribution of this work is extending cooperative caching techniques to provide strong consistency and efficient access to fine-grain objects in wide-area  environments.
interaction with the server  increases latency.
however, they rely on interaction with the server to provide fine-grain cache  coherence that avoids the problem of false sharing when accesses to unrelated objects appear to conflict because they occur on the same physical page.
cooperative object caching systems [2] provide these properties.
however, cooperative web caching  techniques do not provide two important properties needed by collaborative applications, strong consistency and efficient 26 access to fine-grained objects.
collaborative applications seem a  particularly good match to benefit from this approach since one of the hard problems, namely determining what objects are cached where, becomes easy in small groups typical of  collaborative settings.
cooperative web caching [10, 11, 15] is a well-known  approach to reducing client interaction with a server by  allowing one client to obtain missing objects from a another client instead of the server.
if shared persistent objects could be accessed with low-latency, a new field of distributed strong-consistency applications could be opened.
adapting an application to use weak consistency storage system requires significant effort since the application needs to be rewritten to deal with a  different storage system semantics.
for transactional storage systems, the high cost of wide-area network interactions to maintain data consistency is the main cost limiting the performance and therefore, in wide-area network environments, collaborative applications have been adapted to use weaker consistency storage systems [22].
up to now however, users have rarely considered running consistent network storage systems over wide-area networks as performance would be unacceptable [24].
strong-consistency collaborative applications, for example cad systems, use client/server transactional object storage systems to ensure consistent  access to shared persistent data.
collaborative applications provide a shared work  environment for groups of networked users collaborating on a  common task, for example a team of engineers jointly  overseeing a construction project.
buddycache is a new object caching technique that addresses the network latency problem for collaborative  applications in wide-area network environment.
network bandwidth problems will improve in the foreseeable  future, but improvement in network latency is fundamentally limited.
nevertheless, distributed applications may perform poorly in wide-area network environments.
improvements in network connectivity erode the  distinction between local and wide-area computing and,  increasingly, users expect their work environment to follow them wherever they go.
