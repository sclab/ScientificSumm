finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in bpel. 
further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.
for example, we can analyse transfer costs with  varying bandwidth, latency, data size, and data distribution.
we will also look at other qos metrics such as cpu and i/o usage.
in future work, we look to acquire real-world traces of web  service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.
finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.
with a default configuration for all parameters and using our business value  scoring, the ga produced up to 115% business value improvement over the next best algorithm.
since the solution space of scheduler  mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.
haviour of workflows meeting or failing qos values, and we  optimised our scheduling to maximise the aggregate business value across all workflows.
0 5 10 15 20 25 0 200 400 600 800 1000 runningtimeinseconds total number of workflows running time of genetic algorithm ga running time figure 11: running time of the genetic algorithm.
a saturated service provider is one whose workload is greater that its advertised maximum  concurrency.
0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 percentageofallserviceproviders number of workflows service providers saturated genetic algorithm round robin random proportional greedy figure 10: the percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the  service providers represented in figure 9).
the greedy algorithm always hits the one service provider, while the round robin algorithm spreads requests evenly across the providers.
we used a business value metric to measure the  be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 percentageofallserviceproviders number of workflows service providers utilised genetic algorithm round robin random proportional greedy figure 9: the percentage of service providers utilized during  workload executions.
the resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.
in this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.
business processes within workflows can be orchestrated to  access web services.
