finally, we comment on related work, draw conclusions and report on future work in section 7. 
further on, in section 4 we formalise the notion of conflict to subsequently analyse the complexity of conflict detection in terms of cpns in section 5. section 6 describes the computational management of nss by describing their enactment and presenting an algorithm for conflict  resolution.
next, in section 3 we formally define the normative structure  artifact.
in section 2 we detail a scenario to serve as an example throughout the paper.
the paper is organised as follows.
this algorithm is paramount for the  distributed enactment of a ns.
hence, we present a tractable algorithm for conflict resolution.
we believe that online conflict detection and resolution is required.
we show this by formalising the notion of conflict, providing a  mapping of nss into coloured petri nets (cpns) and borrowing well-known theoretical results from the field of cpns.
however, ensuring conflict-freedom of a ns at design time is computationally intractable.
since the regulation of a mas entails that participating agents need to be aware of the validity of those actions that take place within it, such conflicts ought to be identified and possibly resolved if a claim of validity is needed for an agent to engage in an  action or be sanctioned.
for instance, an agent may be obliged and prohibited to do the 636 978-81-904262-7-5 (rps) c 2007 ifaamas very same action in an activity.
within a ns conflicts may arise due to the dynamic  nature of the mas and the concurrency of agents" actions.
in order to model the separation of concerns between the coordination level (agents" interactions) and the  normative level (propagation of normative positions), we propose an artifact called the normative structure (ns).
since in an open, regulated mas one cannot embed  normative aspects into the agents" design, we adopt the view that the mas should be supplemented with a separate set of norms that further regulates the behaviour of participating agents.
for instance, the seller"s obligation above must flow (or be  propagated) from a negotiation activity to a delivery activity.
notice that, when activities are distributed, normative positions must flow from the activities in which they are generated to those in which they take effect.
we assume that agents may choose not to fulfill all their obligations and hence may be sanctioned by the mas.
for instance, a buyer agent who runs out of credit may be forbidden to make further offers, or a seller agent is obliged to deliver after closing a deal.
obligations, permissions, and prohibitions) [26] that may constrain its future behaviour.
an agent"s actions within an  activity may have consequences in the form of normative  positions (i.e.
each agent may  concurrently participate in several activities, and change from one activity to another.
the type of  regulated mas we envisage consists of multiple, concurrent,  related activities where agents interact.
in our paper we approach that problem and propose means to handle conflicting commitments in open, regulated,  multiagent systems in a distributed manner.
to our knowledge, no proposal truly  supports the distributed enactment of normative environments.
[10, 13, 24]), operate in a centralised manner which creates bottlenecks and single points-of-failure.
the few that exist (e.g.
however, there are very few proposals for computational realisations of normative models - the way norms can be integrated in the design and execution of mass.
there are many contributions on the subject of norms from sociologists, philosophers and  logicians (e.g., [15, 28]).
norms can be used to model such  conventions and hence as a means to regulate the observable  behaviour of agents [6, 29].
a fundamental feature of open, regulated multi-agent  systems in which autonomous agents interact, is that  participating agents are meant to comply with the conventions of the system.
