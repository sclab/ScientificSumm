since our problem is as hard as mis as shown in  theorem 1, it is not possible to give a worst case bound better than δε for any polynomial time algorithm, unless p = np. 
it has been shown in [2] that the maximum  independent set problem in the case of the degree bounded by δ for δ ≥ 3 is np-complete and is not approximable within δε for some ε > 0. using the similar reduction from the proof of theorem 1, this result also holds for the stap.
in addition, it is not approximable within δε for some ε > 0. proof.
theorem 2. let the number of neighbors of each agent in the social network sn be bounded by δ for δ ≥ 3.  computing the efficient task allocation given such a network is np-complete.
we now give a complexity result on this class of networks as follows.
one may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.
in our proof, the complexity comes from the introduction of a social network.
the utility of this allocation is k. similarly, if there is a solution for the stap with the utility value k, and the allocated task set is n, then for the is problem, there exists a maximum independent set n of size k in g. an example can be found in figure 1. we just proved that the stap is np-hard for an  arbitrary graph.
the set of tasks of the agents an (|an | = k) is thus the maximum set of tasks that can be allocated.
thus, for each agent a ∈ an , a assigns its task to the edge agents which are connected to a. all other vertex agents a /∈ an are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ an .
given two agents a1, a2 ∈ an we now know that there is no edge agent ae connected to both a1 and a2.
we define utility 1 for each task, and the quantity of all required and available resources to be 1. taken an instance of the is problem, suppose there is a solution of size k, i.e., a subset n ⊆ v such that no two vertices in n are joined by an edge in e and |n| = k. n specifies a set of vertex agents an in the corresponding graph g .
there is no task on the edge agents in g .
each vertex agent avi in g has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ e}.
we assign each agent in g one resource, which is related to the node or the edge in the graph g, i.e., for each v ∈ v , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ e, rsc(ae) = {e}.
on autonomous agents and multi-agent systems (aamas 07) 501 when v was incident to e in g we correspondingly add an edge e in g between av and ae.
joint conf.
the sixth intl.
an instance of the following construction is shown in  figure 1. for each node v ∈ v and each edge e ∈ e in the graph g, we create a vertex agent av and an edge agent ae in g .
the left figure is an undirected graph g, which has the optimal solution {v1, v4} or {v2, v3}; the right  figure is the constructed instance of the stap, where the optimal allocation is {t1, t4} or {t2, t3}.
given an undirected graph g = (v, e) and an integer k, we  construct a network g = (v , e ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if g has an independent set (is) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 figure 1: the mis problem can be reduced to the stap.
given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. we now prove that the stap is np-hard by showing that maximum independent set ≤p stap.
we first show that the problem is in np.
we now show that the tap with an arbitrary social  network is also np-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1. theorem 1. given the social task allocation problem with an arbitrary social network, as defined in definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is np-complete.
although we may consider the tap as a special case of the stap by assuming agents are fully connected, we cannot directly use the complexity results from the tap, since we study the stap in an arbitrary social network, which, as we argued in the introduction, should be partially connected.
the traditional task allocation problem, tap (without the condition of the social network sn), is np-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.
