these appear to be the main avenues for collusive attacks, but we are still exploring this issue. 
note that the loan mechanism doesn"t need to be built into the system; the agents can simply use a fake transaction to transfer the money.
by pooling their money in this way, the k agents can again do better by setting a higher threshold.
if k agents  collude, they can agree that, if one runs out of money, another in the group will loan him money.
the second point raised regarding sybils also applies to collusion if we allow money to be loaned.
given the number of sybils that would be needed to cause a real change in the perceived size of a large p2p network, the practicality of this attack depends heavily on how much sybils cost an attacker and what resources he has available.
we have not yet calculated the exact effect of this change (it interacts with the other two effects of having sybils that we have already noted).
concievably he could alternate between these techniques to magnify the effects of work he does.
similarly, he could  increase the cost (and thus the value of his money) by making a number of sybils leave the system.
third, an agent can drive down the cost of fulfilling a request by introducing many sybils.
even if they look for advertised node features to help make this decision, sybils would allow a user to advertise a wide range of features.
it seems reasonable to believe that when people make a decision  between a number of nodes to satisfy a request they do so at random, at least to some extent.
unlike the first concern, this seems like a real issue.
intuitively, the need for money is not as critical if money is easier to obtain.
this can allow a user to increase his utility by setting a lower threshold; that is, to use a strategy sk where k is smaller than the k used by the nash equilibrium strategy.
second, having sybils makes it more likely that one of the sybils will be chosen to fulfill a request.
indeed, it would be reasonable to assume that sybils do not make requests at all.
having sybils should not  increase the need to have a request satisfied.
our model implicitly assumed that all agents are equally likely to have a desire at any particular time.
in practice, requests are made to satisfy a desire.
to make our system simple to analyze, we have assumed that request opportunities came uniformly at random.
however, this is just an artifact of our model.
it is easy to see that this will lead to the agent having higher total utility.
first, by having more identities he will have a greater probability of getting chosen to make a request.
nevertheless, there are some less direct ways that an agent could take advantage of sybils.
moreover, since newcomers enter the system with $0, there is no benefit to creating new agents simply to take advantage of an initial endowment.
to get d dollars, his sybils together still have to perform d units of work.
in a naive sense, our system is essentially sybil-proof.
