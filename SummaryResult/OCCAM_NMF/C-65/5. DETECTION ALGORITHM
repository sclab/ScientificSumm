the functional equivalence between the two implementations were tested by vhdl test benches and python scripts which provided an automated way to exercise the detection cores on the same set of pre-recorded signals and to compare the results. 
later on, they were ported to vhdl and synthesized using the xilinx ise tool suite.
the detection cores were originally implemented in java and evaluated on pre-recorded signals because of much faster test runs and more convenient debugging facilities.
117 0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1 time (µs) amplitude muzzle blast (m16) 1 2 3 4 5 len2 + len1 (a) idle 1 second zc 3 pending zc 4 first zc 2 found 5 amplitude threshold long positive zc long negative zc valid full period max garbage wrong sign garbage collect first period garbage collect first period garbage (b) figure 6: muzzle blast signature (a) produced by an m16 assault rifle and the corresponding detection logic (b).
the dynamic noise level is estimated by a single pole recursive low-pass filter (cutoff @ 0.5 khz ) on the fpga.
the latter one is essential to adapt the sensor to different ambient noise environments and to temporarily suspend the muzzle blast detector after a shock wave event (oscillations in the analog section or reverberations in the sensor enclosure might  otherwise trigger false muzzle blast detections).
the initial triggering mechanism is based on two amplitude thresholds: one static (but configurable)  amplitude level and a dynamically computed one.
finally, if the constraints on the total length and on the length ratio hold, the core generates a detection event along with the actual length, amplitude and energy of the period calculated  concurrently.
if too much garbage is discarded in the collection phases, the core resets itself to prevent the (false) detection of the halves from completely different  periods separated by rapid oscillation or noise.
after it encounters a sufficiently long negative segment, it runs the same collection logic for the second half period.
after the initial triggering, the detector attempts to collect those zc  segments which belong to the first period (positive amplitude) while discarding too short (in our terminology: garbage) segments-effectively implementing a rudimentary low-pass filter in the zc domain.
the state machine (figure 6(b)) does not work on the raw samples directly but is fed by a zero crossing (zc) encoder.
therefore, the real challenge for the matching detection core is to identify the first and second half periods properly.
due to the physical limitations of the analog circuitry  described at the beginning of this section, irregular oscillations and glitches might show up within this longer time window as they can be clearly seen in figure 6(a).
in contrast to shockwaves, the muzzle blast signatures are characterized by a long initial period (1-5 ms) where the first half period is significantly shorter than the second half [4].
the only feature calculated by the core is the length of the observed shockwave signal.
the input parameters are the minimum  steepness of the edges (d, e), and the bounds on the length of the wave (lmin, lmax).
the state machine of the algorithm is shown in figure 5(b).
the shockwave detection core is continuously looking for two rising edges within a given interval.
also, the length of the n-wave is fairly predictable-as it is described in section 6.5-and is relatively short (200-300 μs).
ginning and end of the signal.
the most conspicuous characteristics of an acoustic  shockwave (see figure 5(a)) are the steep rising edges at the  be0 200 400 600 800 1000 1200 1400 1600 -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1 shockwave (m16) time (µs) amplitude 1 3 5 2 4 len (a) s[t] - s[t-d] > e tstart := t s[t] - s[t-d] < e s[t] - s[t-d] > e & t - t_start > lmin s[t] - s[t-d] < e len := t - tstart idle 1 first edge done 3 second edge 4 first edge 2 found 5 t - tstart ≥ lmax t - tstart ≥ lmax (b) figure 5: shockwave signal generated by a 5.56 × 45 mm nato projectile (a) and the state machine of the detection algorithm (b).
at this point, the mote can read and forward the detection times and features and is responsible to restart the cores afterwards.
although the cores are running  independently and in parallel, a crude local fusion module integrates them by shutting down those cores which missed their events after a reasonable timeout and by generating a single  detection message towards the mote.
the cores are run-time configurable and provide detection event signals with high precision time stamps and event specific feature vectors.
the detectors are implemented as independent ip cores within the fpga-one pair for each channel.
instead of using mundane energy detectors-which might not be able to distinguish the two different events-the applied  detectors strive to find the most important characteristics of the two signals in the time-domain using simple state machine logic.
these requirements dictated simple and robust algorithms both for muzzle blast and shockwave detections.
moreover, the detection logic needs to process multiple  channels in parallel (4 channels on our existing hardware).
also,  precise angle of arrival estimation necessitates high sampling frequency (in the mhz range) and accurate event detection.
since the muzzle blast signature closely follows the shockwave  signal and because of potential automatic weapon bursts, it is extremely important to settle the audio channels and the detection logic as soon as possible after an event.
the detection algorithms have to be robust enough to handle  severe nonlinear distortion and transitory oscillations.
although  mechanical damping of the microphone membranes can mitigate the problem, this approach is not without side effects.
this is increasingly problematic with low cost electret microphones-designed for picking up regular speech or music.
both events are transient by their nature and present very intense stimuli to the microphones.
there are several characteristics of acoustic shockwaves and muzzle blasts which distinguish their detection and  signal processing algorithms from regular audio applications.
