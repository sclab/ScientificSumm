last, relevant work in the literature is discussed 889 978-81-904262-7-5 (rps) c 2007 ifaamas with respect to the proposal, limitations are addressed, and current and future work is described. 
next, the dynamics of social interactions will show how these entities and relationships evolve.
the paper is structured as follows: first, the major entities and relationships which constitute the structure of social interactions are introduced.
structural operational semantics (sos)[21], a common technique to specify the operational semantics of programming languages, is used for this  purpose.
furthermore, the paper also provides this model with a formal  execution semantics which describes the dynamics of multi-agent (or social) interactions.
agents,  attempting to identify their essential structure.
the outcome of this analysis will be a connector-based model of multi-agent interactions between autonomous social and situated components, i.e.
to approach this issue, we draw on the notion of connector, put forward within the field of software architectures [1, 17].
its first goal is to carry out a principled analysis of  multiagent interactions, departing from general features commonly ascribed to agent-based computing: autonomy, situatedness and sociality [26].
this paper thus focuses on the fundamental building blocks of multi-agent interactions: those which may be composed, extended or refined in order to define more complex  organizational or communicative types of interactions.
the main hypothesis motivating this paper is that the  variety of multi-agent interaction mechanisms - both,  organizational and communicative, share a common semantic core.
still, these tools and frameworks are designed to support a limited range of interaction capabilities that constrain  developers to a fixed set of particular, pre-defined abstractions.
), which leverage multi-agent  middlewares built upon raw acl-based interaction mechanism [14], and minimize the gap between organizational  metamodels and target implementation languages.
this wealth of computational  abstractions has found currency in several programming  frameworks and software platforms (ameli [9], madkit [13],  ingenias toolkit [18], etc.
this approach has resulted in a wide spectrum of organizational and communicative  abstractions, such as institutions, normative positions, power relationships, organizations, groups, scenes, dialogue games, communicative actions (cas), etc., to effectively model the interaction space of mas.
particularly, the organizational or social stance advocated by institutional frameworks [2] and most multi-agent system (mas) methodologies [26, 10], provides an excellent basis to deal with the complexity and dynamism of the interactions among system components.
the suitability of agent-based computing to manage the complex patterns of interactions naturally occurring in the development of large scale, open systems, has become one of its major assets over the last few years [26, 24, 15].
