on autonomous agents and multi-agent systems (aamas 07) 965 of the representation and gives an approximate shapley value in linear time, without the need for an oracle. 
joint conf.
in contrast, our method is independent the sixth intl.
furthermore, they assume that the shapley value of a component of a given coalition game is given by an oracle, and on the basis of this assumption aggregate these values to find the value for the overall game.
this method can be used if the coalition game is represented as a marginal  contribution net.
finally, [9, 10] present a  polynomial time method for finding the shapley value.
furthermore, the method can be used only if the game is represented in a specific form (viz., the multi-issue representation), not otherwise.
this method gives the exact shapley value, but its time  complexity is exponential.
a method for finding the shapley value was also proposed in [5].
also, unlike all the above mentioned work, we provide an analysis of the performance of our method in terms of the percentage error in the approximate shapley value.
thus, as stated in section 1, our method is more general than [3, 12, 7].
our method also differs from [7] in that while [7] presents a method for the case where all the players" weights are distributed normally, our method applies to any type of distribution for these weights.
since the voting game is defined in terms of the players" weights and the number of swings are obtained from these weights, our method corresponds more closely to the definition of the voting game.
in [12], however, the question remains how to get the number of swings from the definition of a voting game and what is the time  complexity of doing this.
the method we propose differs from this in that they  define the shapley value by treating a player"s number of swings (if a player can change a losing coalition to a winning one, then, for the player, the coalition is counted as a swing) as a random variable, while we treat the players" weights as random variables.
in [12], for instance, the shapley value is computed by considering a random sample from a large population of players.
the other method uses an approximation technique based on monte carlo simulation.
it also has the limitation (not shared by other  approaches) that it can only be applied to games with integer weights and quotas.
this method is an exact procedure that overcomes the problem of time complexity, but its storage requirements are substantial - it requires huge arrays.
one approach is to use generating functions [3].
in order to overcome the computational complexity of finding the shapley value, two main approaches have been proposed in the literature.
