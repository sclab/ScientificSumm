in our later  experiments, however, we find that even though the shape of the f(s) graph changes noticeably between experiments, the optimal index size consistently lies between 10%-30% in most experiments. 
therefore, the function f(s) and the optimal-index size may change significantly depending on the query load and the pruning policy.
similarly, if we use an effective pruning policy, more queries will be handled by ip than when we use an ineffective pruning policy, increasing f(s).
for example, even for the same p-index, if the query load changes  significantly, fewer (or more) queries may be handled by the p-index, decreasing (or increasing)f(s).
this theorem shows that the optimal point is when the slope of the f(s) curve is 1. for example, in figure 3, the optimal size is when s = 0.16. note that the exact shape of the f(s) graph may vary depending on the query load and the pruning policy.
2 proof the proof of this and the following theorems is omitted due to space constraints.
theorem 1 the cost for handling the query load q is minimal when the size of the p-index, s, satisfies d f(s) d s = 1.
2 the following theorem shows how we can determine the optimal index size.
problem 1 (optimal index size) given a query load q and the function f(s), find the optimal p-index size s that minimizes the total size of the indexes necessary to handle the load q.
is roughly proportional to the total size of the indexes necessary to handle the query load.
in formulating the problem, we assume that the number of machines required to operate a two-tier architecture 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1 fractionofqueriesguaranteed-f(s) fraction of index - s fraction of queries guaranteed per fraction of index optimal size s=0.16 figure 3: example function showing the fraction of guaranteed queries f(s) at a given size s of the p-index.
in figure 3, we show an example graph of f(s) over s. given the notation, we can state the problem of p-index-size  optimization as follows.
in general, we can expect that f(s) will increase as s gets larger because ip can handle more queries as its size grows.
we use f(s) to denote the fraction of the queries that a p-index of size s can handle (i.e., if f(s) = 0.3, 30% of the queries return the value c = 1 from ip ).
we use s to denote the size of the p-index relative to if (i.e., if s = 0.2, for example, the p-index is 20% of the size of if ).
2 the above example shows that the cost of the two-tier  architecture depends on two important parameters: the size of the p-index and the fraction of the queries that can be handled by the 1st tier index alone.
given this result, we can conclude that using ip 2 is preferable.
we can do similar analysis when we use ip 2 and see that a total of 14 machines are needed when ip 2 is used.
overall, when we use ip 1 for the 1st tier, we need 5 + 12 = 17 machines to handle the load.
also, since ip 1 can handle 40% of the queries, the 2nd tier has to handle 3000 queries/sec (60% of the 5000 queries/sec), so we need a total of 3×4 = 12 machines for the 2nd tier (3 copies of if with 4 machines per copy).
therefore, the total number of machines required for the 1st tier is 5×1 = 5 (5 copies of ip 1 with 1 machine per copy).
since the size of ip 1 is 25% of if (that requires 4 machines), one copy of ip 1 requires one machine.
at the 1st tier, we need 5 copies of ip 1 to handle the query load of 5000 queries/sec.
to find out the answer, we first compute the number of machines needed when we use ip 1 for the 1st tier.
which one of the ip 1, ip 2 is preferable for the 1st -tier index?
also suppose that if if is pruned by 50% to ip 2, ip 2 can handle 80% of the queries.
but now, suppose that if we prune if by 75% to ip 1 (i.e., the size of ip 1 is 25% of if ), ip 1 can handle 40% of the queries (i.e., c = 1 for 40% of the queries).
example 3 again, consider a scenario similar to example 1, where the query load is 5000 queries/sec, each copy of an index can handle 1000 queries/sec, and the full index spans across 4  machines.
to find the answer, we start with a simple example.
given this tradeoff, how should we determine the optimal size of ip in order to maximize the cost saving?
when ip is small, on the other hand, the cost for ip will be smaller, but more queries will be forwarded to if , requiring us to maintain more copies of if .
intuitively, there exists a clear tradeoff between the size of ip and the fraction of queries that ip can handle: when ip is large and has more information, it will be able to handle more queries, but the cost for maintaining and looking up ip will be higher.
