when ip cannot answer a query, it is redirected to the 2nd tier, where the full index if is used to compute the answer. 
(b) in the 1st tier, small  pindexes ip handle most of the queries.
if if if if if if if ip ip ip ip ip ip 5000 queries/sec 5000 queries/sec : 1000 queries/sec : 1000 queries/sec 2nd tier 1st tier (a) (b) figure 1: (a) search engine replicates its full index if to  increase query-answering capacity.
finally, we study and present how search engines can minimize the operational cost of answering queries while providing high quality search results.
these enhanced pruning techniques and answer-computation algorithms are explored in the context of the cluster architecture commonly employed by today"s search engines.
our main contribution is a new answer computation algorithm that guarantees that the top-matching pages (according to the search-engine"s ranking metric) are always placed at the top of search results, even though we are computing the first batch of answers from the pruned index most of the time.
that is, we present a number of simple (yet important) changes in the pruning techniques for  creating the pruned index.
in this paper, we study how we can avoid any degradation of search quality due to the above performance optimization while still realizing most of its benefit.
given the fierce competition among search engines today this degradation is clearly undesirable and needs to be addressed if possible.
that is, even if a page should be placed as the top-matching page according to a search engine"s ranking  metric, the page may be placed behind the ones contained in the pruned index if the page did not become part of the pruned index for  various reasons [7, 20].
while this approach has been shown to give significant improvement in performance, it also leads to noticeable degradation in the quality of the search results, because the top answers are computed only from the pruned index [7, 20].
one natural solution to this problem is to create a small index on a subset of the documents that are likely to be returned as the top  results (by using, for example, the pruning techniques in [7, 20]) and compute the first batch of answers using the pruned index.
since the users are interested in a small  number of results (and thus are viewing a small portion of the index for every query that they issue), using an index that is capable of  returning all the results for a query may constitute a significant waste in terms of time, storage space and computational resources, which is bound to get worse as the web grows larger over time [24].
at the same time, given the size of the web, the inverted index that the search engines maintain can grow very large.
that is, 80% of the users typically view at most 30 to 60 results for every query that they issue to a search engine.
a recent study [16] indicated that approximately 80% of the users examine at most the first 3 batches of the results.
the user then looks through the first batch of results and, if she doesn"t find the answer she is looking for, she may potentially  request to view the next batch or decide to issue a new query.
in order to avoid  overwhelming the users with a huge amount of results, the search  engines present the results in batches of 10 to 20 relevant documents.
in most cases, a query that the user issues may have thousands or even millions of matching documents.
an inverted index provides for the efficient retrieval of the documents (or web pages) that contain a particular keyword.
typically, the web search  engines, similar to other information retrieval applications, utilize a data structure called inverted index.
due to this immense amount of available information, the users are becoming more and more dependent on the web search engines for locating relevant information on the web.
according to a recent study [13], it is estimated that the web currently consists of more than 11 billion pages.
the amount of information on the web is growing at a prodigious rate [24].
