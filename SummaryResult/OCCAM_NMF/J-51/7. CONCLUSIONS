finally, we can ask whether some of the algorithms we described (such as the one for iterated strict dominance with mixed strategies) can be made faster. 
(how to efficiently perform iterated very weak dominance has already been studied for partially observable stochastic games [8].)
second, we can study computational aspects of (iterated) dominance in concise representations of normal form games other than bayesian games-for  example, in graphical games [9] or local-effect/action graph games [12, 2].
first, there is the open question of whether it is possible to complete iterated dominance in bayesian games in polynomial time (even though we showed that an exponential number of  alternations between the players in eliminating strategies is sometimes required).
there are various avenues for future research.
finally, we showed that iterated dominance using pure strategies can require an exponential number of iterations in a bayesian game (both with strict and weak dominance).
we showed that, unlike in normal form games,  deciding whether a given pure strategy is dominated by another pure strategy in a bayesian game is np-complete (both with strict and weak dominance); however, deciding whether a strategy is dominated by some mixed strategy can still be done in polynomial time with a single linear program solve (both with strict and weak dominance).
finally, we studied dominance and iterated dominance in bayesian games, as an example of a concise representation language for normal form games that is interesting in its own right.
then, we showed that  iterated strict dominance becomes path-dependent when there is a limit on the support size of the dominating strategies, and that deciding whether a given strategy can be  eliminated by iterated strict dominance under this restriction is np-complete (even when the limit on the support size is 3).
first, we showed that finding the dominating strategy with minimum support size is np-complete (both for strict and weak dominance).
we then studied what happens when the dominating  strategy is allowed to place positive probability on only a few pure strategies.
iterated strict dominance, on the other hand, is path-independent (both with and without dominance by mixed strategies) and can therefore be done in polynomial time.
(a weaker version of the second result (only without dominance by mixed strategies) was already known [7].)
both of these results hold both with and without dominance by mixed strategies.
this  allowed us to also show that determining whether there is a path that leads to a unique solution is np-complete.
we showed that  determining whether there is some path that eliminates a given  strategy is np-complete with iterated weak dominance.
we then moved on to iterated dominance.
we first studied both strict and weak dominance (not  iterated), and showed that checking whether a given strategy is dominated by some mixed strategy can be done in  polynomial time using a single linear program solve.
in this paper we studied various computational aspects of this concept.
while the nash equilibrium solution concept is studied more and more intensely in our community, the perhaps more elementary concept of (iterated) dominance has  received much less attention.
