devanur, mihail, and vazirani give a strategyproof cost allocation for the facility location problem, but cannot achieve group  strategyproofness [7]. 
pÂ´al and tardos develop a method for cost-sharing that is approximately budget-balanced and group strategyproof and show that the method recovers 1/3 of the total cost for the facility location game [29].
goemans and skutella show strong connections between fair cost allocations and linear programming relaxations for facility location problems [13].
cost sharing in the facility location problem has been studied using cooperative game theory [7, 13, 29].
however, their results are incomparable to ours because their  payoff functions neglect network latencies between users, they  consider multiple data items (markets), and each node has a limited budget to cache items.
as in our work, they provide monetary incentives to mobile users for caching data items, and provide tight bounds on the price of  anarchy and speed of convergence to (approximate) nash equilibria.
analyze content distribution on ad-hoc wireless networks using a game-theoretic approach [12].
in a recent paper, goemans et al.
on the other hand, the significant problems in our game are undersupply and misplacement.
note that in that paper the increase of the price of anarchy comes from  oversupply problems due to the fact that competing corporations can open facilities at the same location.
their results are not  directly applicable to our problem, however, because we consider each server to be tied to a particular location, while in their model an agent is able to open facilities in multiple locations.
in the case of competitive facility location among corporations he proves that any nash equilibrium gives an expected social utility within a factor of 2 of optimal plus an additive term that depends on the facility opening cost.
vetta [35] considers a class of problems where the social utility is submodular (submodularity means decreasing marginal utility).
there is little research in non-cooperative facility location games, as far as we know.
our caching game is different from all of these in that the optimization process is performed among distributed selfish servers.
since the problem is np-hard,  approximation algorithms based on primal-dual techniques, greedy  algorithms, and local search have been explored [17, 24, 26].
the facility location problem has been widely studied as a  centralized optimization problem in theoretical computer science and operations research [27].
centralized algorithms for the placement of objects, web proxies, mirrors, and instrumentation servers in the internet have been studied  extensively [18,19,23,30].
tang and chanson propose a coordinated en-route web caching that caches objects along the routing path [34].
radar is a  system that replicates and migrates objects for an internet hosting  service [31].
douceur and wattenhofer describe a hill-climbing algorithm to  exchange replicas for reliability in farsite [8].
chen, katz, and kubiatowicz propose a dynamic replica  placement algorithm exploiting underlying distributed hash tables [4].
ko and rubenstein propose a self-stabilizing, distributed graph coloring algorithm for the replicated resource placement [20].
discuss the data placement problem in peer-to-peer systems.
in [14], gribble et al.
all  protocols assume obedience and ignore participants" incentives.
there is much work on the placement of web  replicas, instrumentation servers, and replicated resources.
the placement of replicas in the caching problem is the most  important issue.
our work starts from the assumption that servers are selfish and quantifies the cost of the lack of coordination when servers behave selfishly.
the caching protocols assume obedience to the  protocol and ignore participants" incentives.
most of these systems use caching for performance, availability, and reliability.
there has been considerable research on wide-area peer-to-peer file systems such as oceanstore [22], cfs [5], past [32],  farsite [2], and pangaea [33], web caches such as netcache [6] and summarycache [10], and peer-to-peer caches such as squirrel [16].
