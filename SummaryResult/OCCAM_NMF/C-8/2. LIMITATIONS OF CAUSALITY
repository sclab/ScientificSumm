moreover, after executing an inverse  operation like o2, the document state can no longer be properly represented by the state vector, which is only capable of representing original normal editing operations.
if o2 was to inherit the causal relation of undo(o2), then it would be effectively treated as an operation defined on the  document state with the effects of all three operations o1, o2, and o3, which would prohibit o2 from being transformed against any operation, thus failing to achieve the correct undo effect.
however, according to lamport"s happen-before relation [9], undo(o2) is causally dependent on o1, o2, and o3.
to achieve this effect, o2 needs to be treated as an operation defined on the document state including the effect of o2 but not o1 and o3, so that o2 can be transformed against o1 and o3 before its execution.
o1 and o3) [21].
the correct undo effect for o2 is to eliminate the effect of o2 but retain the effects of other operations (i.e.
the undo(o2) command in figure 1 is interpreted as an inverse operation o2.
another major limitation of causality is its unsuitability for capturing ot conditions for inverse operations.
furthermore, the  concurrency relation does not capture the essential condition for correct it-transformation: the two input operations must be defined on the same document state [23].
o1).
o1, o2 and o3) directly generated by users, but not for transformed operations (e.g.
from definitions 1 and 2, it is clear that the  causaldependency relation is only defined for original operations (e.g.
the solution to this puzzle is first to it-transform o1 against o2 to produce o1, which is defined on the document state including the effect of o2 (the same state on which o3 is defined), and then to it-transform o3 against o1 [22].
in this case, the parameters of o3 and o1 are not comparable and hence may not be it-transformed correctly.
when o3 arrives at site 0, it will also be it-transformed against o1 since o3 o1; but this is incorrect because o3 is defined on the document state that contains the effect of o2, whereas o1 is defined on the initial document state.
under the dopt algorithm [4], when o2 arrives at site 0, it will be  ittransformed against o1 since o2 o1; this is correct because o2 and o1 are defined on the same (initial) document state.
the scenario in figure 1 (without the undo command) has often been used to illustrate the dopt-puzzle.
figure 1: a real-time group editing scenario.
this term is introduced to differentiate this special transformation function from other steps involved in a transformation process.
in the following discussion, we shall use the term  ittransform to mean the use of the it (inclusion  transformation) function: it(oa, ob), which transforms operation oa against operation ob in such a way that the impact of ob is effectively included in oa [23].
to illustrate causal relations among operations, consider a real-time group editing session with two sites in figure 1. there are three editing operations in this scenario (the undo command undo(o2) and its relation with other operations shall be explained later): o1 generated at site 0, and o2 and o3 generated at site 1. according to definitions 1 and 2, we have o2 → o3 because the generation of o2 happened before the generation of o3; o1 o2 and o1 o3 because for each pair, neither operation"s execution happened before the other operation"s generation.
2 just as vector logical clocks are used for capturing  casuality in distributed systems [17], state vectors have been used for capturing causal relationships among operations and for representing document states in ot systems [4, 19, 23].
2 definition 2. causal-independency relation   given two operations oa and ob, oa and ob are  causalindependent or concurrent, denoted by oa ob, iff neither oa → ob, nor ob → oa.
definition 1. causal-dependency relation → given two operations oa and ob, generated at sites i and j, ob is causal-dependent on oa, denoted by oa → ob, iff: (1) i = j and the generation of oa happened before the  generation of ob; or (2) i = j and the execution of oa at site j happened before the generation of ob; or (3) there exists an operation ox, such that oa → ox and ox → ob.
following lamport [9], causal-dependency/-independency  relations among editing operations can be defined in terms of their generation and execution sequences [4, 23].
﻿the theory of causality is central to distributed  computing and to the design of all existing ot algorithms.
