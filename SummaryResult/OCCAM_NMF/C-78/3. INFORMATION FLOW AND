as discussed in section 5, the generic-events architecture introduces the concept of generic event and an event layer abstraction which aim at dealing, among others, with these issues. 
on the other hand, in order to deal with the information flow through the whole computer system and environment in a seamless way, handling software and hardware events uniformly, it is also necessary to find adequate abstractions.
therefore, any solution to the problem requires the definition of convenient abstractions and appropriate  architectural constructs.
it has been shown that the hidden channels developing through the latter (e.g.,  feedback loops) may hinder software-based algorithms ignoring them [30].
in systems that involve interactions with the environment it is very important to consider the possibility of  communication through the environment.
clearly, other objects might as well capture the same events, thus  establishing the above-mentioned indirect communication path.
in other words, when a sentient object actuates on the environment it will be able to observe the state changes in the environment by means of events captured by the sensors.
thus the environment constitutes an interaction and communication channel and is in the control and awareness loop of the objects.
a distinguishing aspect of our work from many of the  existing approaches, is that we consider that sentient objects may indirectly communicate with each other through the environment, when they act on it.
moreover, typical properties of event-based models, such as anonymous and non-blocking communication, are highly desirable in systems where sentient objects can be mobile and where interactions are naturally very dynamic.
in  consequence, it is quite natural to base the communication and  interaction among sentient objects and with the environment on an event-based communication model.
interaction with the  environment is therefore done through sensors and actuators, which may, or may not be part of sentient objects, as  discussed in section 4.2. state or state changes in the environment are considered as events, captured by sensors (in the environment or within sentient objects) and further disseminated to other  potentially interested sentient objects in the system.
we further consider that there may exist dumb sensors and actuators, which interact with the objects by disseminating or capturing raw transducer information, and smart sensors and actuators, with enhanced processing  capabilities, capable of speaking some more elaborate event dialect (see sections 5 and 6.1).
the required transformations between system representations of these real-time entities and their physical representations is accomplished, generically, by sensors and actuators.
on the other hand, actuation on the environment implies the manipulation of these real-time entities, like increasing the temperature  (applying more heat), changing the distance (applying some movement) or changing the state of the door (closing or opening it).
quite clearly, the information produced by the environment corresponds to the physical representation of real-time entities, of which typical examples include  temperature, distance or the state of a door.
the  environment is the real (physical) world surrounding an  object, not necessarily close to the object or limited to certain boundaries.
we consider that the environment can be a producer or consumer of  information while interacting with sentient objects.
before continuing, we need to clarify a few issues with respect to these possible forms of interaction.
object-to-environment interactions: correspond to a flow of information from an object to the environment, with the purpose of forcing a change in the state of the latter.
the second is related to  collaboration, in which the object tries to influence other objects into contributing to a common goal, or into reacting to an unexpected situation.
the first is related with complementing the assessment of each individual object about the state of the surrounding space.
object-to-object interactions: correspond to a flow of information among sentient objects, serving two  purposes.
therefore, the following kinds of interactions can take place in the system: environment-to-object interactions: correspond to a flow of information from the environment to  application objects, reporting about the state of the former, and/or notifying about events taking place therein.
sentient objects accept input events from a variety of different sources (including sensors, but not constrained to that), process them, and produce output events, whereby 29 they actuate on the environment and/or interact with other objects.
these components are referred to as sentient objects, a metaphor elaborated in cortex and inspired on the generic concept of sentient computing introduced in [12].
as mentioned above, a  fundamental idea underlying the approach is that applications can be composed of a large number of smart components that are able to sense their surrounding environment and  interact with it.
interaction model in this paper we consider a component-based system model that incorporates previous work developed in the context of the ist cortex project [5].
