the model also offers opportunities to solve a long lasting problem in  realtime, computer control, and embedded systems: the  inconsistency between message passing and the feedback loop  information flow subsystems. 
a key advantage of this architecture is that event-messages and physical events can be globally ordered, if necessary, since they all pass through the event layer.
in any case, if they are also of interest to other entities, such as other sentient objects that wish to be informed of the actuation command, then they are also disseminated through the ec to these sentient objects.
if they are of concern to a remote smart actuator, they are disseminated through the distributed event layer, to reach the former.
now, if these commands are of concern to local actuator units (e.g., body, including internal operational networks), they are passed on to the local translation layer.
they publish these exactly the same way: on an event channel through the local event layer representative.
alternatively to talking to other sentient objects, sentient objects can produce events of a lower level, for example, actuation commands on the body or environment.
smart actuators, on the other hand, merely consume events produced by sentient objects, whereby they accept and execute actuation commands.
however, these events are  semantically of a kind such that they are to be subscribed by the relevant sentient objects, for example, the sentient  objects composing a robot controller system, or, at a higher level, the sentient objects composing the actual robots in 32 a cooperative application.
they are  published on an ec using the same ec dialect that serves, e.g., sensor originated events.
some of these events are destined to other sentient objects.
sentient objects consume events they are interested in, process them, and produce other events.
they are disseminated by the local event layer module, on an event channel (ec) propagated through the regular network, to any relevant remote event layer  modules where entities showed an interest on them, normally, sentient objects attached to the respective local event layer modules.
body sensors produce events which report on the body.
smart sensors produce events which report on the  environment.
it occurs in a number of different ways, which demonstrates the expressiveness of the model with regard to the necessary forms of information encountered in real-time cooperative and embedded systems.
5.1 information flow in gear the flow of information (external environment and  computational part) is seamlessly supported by the l-shaped architecture.
the event layer is realized by the cosmic middleware, as described in section 7.
crucial to the architecture is the event layer, which uses event channels to propagate events through regular network infrastructures.
this is possible due to the use of a common basic dialect for talking about events and due to the existence of the translation layer, which performs the necessary translation between the physical representation of a real-time entity and the ec compliant format.
while serving an object model based on production and consumption of generic events, it treats events produced by several sources (environment, body,  objects) in a homogeneous way.
the gear introduces some innovative ideas in distributed systems architecture.
regular network: this is represented in the horizontal axis of the block diagram by the communication layer, which encompasses the usual lan, tcp/ip, and  realtime protocols, desirably augmented with reliable and/or ordered broadcast and other protocols.
dumb sensors and actuators do not send event-messages, since they are unable to understand the ec dialect (they do not have an event layer  neither a communication layer- they communicate, if needed, through operational networks).
likewise, this may apply to an event-message from one sentient object to another.
the same holds for an  actuation event produced by a sentient object, to be  delivered to a remote smart actuator.
for example, a  sensing event generated by a smart sensor is wrapped in an event-message and disseminated, to be caught by whoever is concerned.
communication layer: the layer responsible for  wrapping events (as a matter of fact, event descriptions in ec dialect) into carrier event-messages, to be transported to remote places.
for example, some of the services that imply the  processing of events may include publishing, subscribing, discrimination (zoning, filtering, fusion, tracing), and queuing.
in concrete terms, this layer is a kind of  middleware that provides important event-processing services which are crucial for any realistic event-based system.
event layer: the layer responsible for event propagation in the whole system, through several event channels (ec):.
these interactions are done through  operational networks (hence the antenna symbol in the figure).
on the lower side this layer may also interact with dumb sensors or actuators, therefore talking the language of the  specific device.
essentially one doing observation and  actuation operations on the lower side, and doing  transactions of event descriptions on the other.
translation layer: the layer responsible for physical event transformation from/to their native form to event  channel dialect, between environment/body and an event channel.
such  intrinsic information is not available outside a body and, therefore, more explicit information has to be carried by an event.
inside a body there may also be implicit knowledge, which can be exploited to make interaction more  efficient, like the knowledge about the number of  cooperating entities, the existence of a specific  communication network or the simple fact that all components are co-located and thus the respective events do not need to specify location in their context attributes.
this architecture layering allows composition to take place seamlessly, in what concerns information flow.
in fact, the body is the internal environment of the object.
note that due to the compositional approach taken in our model, part of what is environment to a smaller object seen  individually, becomes body for a larger, containing object.
body: the physical embodiment of a sentient object (e.g., the hardware where a mechatronic controller resides, the physical structure of a car).
31 c o m m ' sc o m m ' sc o m m ' s t r a n s l a t i o n l a y e r t r a n s l a t i o n l a y e r b o d y e n v i r o n m e n t b o d y e n v i r o n m e n t b o d y e n v i r o n m e n t ( i n c l u d i n g o p e r a t i o n a l n e t w o r k ) ( o f o b j e c t o r o b j e c t c o m p o u n d ) t r a n s l a t i o n l a y e r t r a n s l a t i o n s e n t i e n t o b j e c t s e n t i e n t o b j e c t s e n t i e n t o b j e c t r e g u l a r n e t w o r k c o n s u m ep r o d u c e e v e n t l a y e r e v e n t l a y e r e v e n t l a y e r s e n t i e n t o b j e c t figure 2: generic-events architecture.
environment: the physical surroundings, remote and close, solid and etherial, of sentient objects.
the l-shaped structure is crucial to ensure some of the  properties described.
we propose the generic-events architecture (gear), depicted in figure 2, which we briefly describe in what  follows (for a more detailed description please refer to [29]).
in order to successfully apply event-based object-oriented models, addressing the challenges enumerated in the  introduction of this paper, it is necessary to use adequate  architectural constructs, which allow the enforcement of  fundamental properties such as timeliness or reliability.
