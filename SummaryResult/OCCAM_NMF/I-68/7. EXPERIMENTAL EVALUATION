we therefore vary the time horizons from 3000 to 4000, and then to 5000. we show the results in figure (7c) where, especially for larger meshes, the vfp algorithm runs up to one  order of magnitude faster than oc-dec-mdp while finding a policy that is within less than 1% from the policy found by oc-  decmdp. 
for such configurations we have to greatly increase the time horizon since the  probabilities of enabling the final methods by a particular time decrease exponentially.
meshes of 3×3, 4×4, and 5×5 methods.
figure 7: scalability experiments for oc-dec-mdp and vfp for different network configurations.
on autonomous agents and multi-agent systems (aamas 07) figure 4: visualization of heuristics for opportunity costs splitting.
we finally tested how vfp handles the domains with methods  arranged into a n × n mesh, i.e., c≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1. in particular, we consider 836 the sixth intl.
joint conf.
although the speedups are smaller than in case of a chain, the vfp algorithm still runs up to 4 times faster than oc-dec-mdp when computing the policy with an error of less than 1%.
in particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400. we show the results in figure (7b).
we then tested how vfp scales up, given that the methods are  arranged into a tree (figure (5c)).
as we observe, scaling up the domain reveals the high performance of vfp: within 1% error, it runs up to 6 times faster than  oc-decmdp.
we show the results in figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).
we tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.
we next decided to test how vfp performs in a more difficult  domain, i.e., with methods forming a long chain (figure (5b)).
for comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like oc-dec-mdp.
as we see, for this small domain, vfp runs 15% faster than  ocdec-mdp when computing the policy with an error of less than 1%.
figure (6b) shows the performance of the vfp algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).
we then run both algorithms for a total of 100 policy improvement iterations.
30, σ = 5), and the deadline was extended to δ = 200. we decided to test the runtime of the vfp algorithm running with three different levels of accuracy, i.e., different approximation  parameters p and v were chosen, such that the cumulative error of the solution found by vfp stayed within 1%, 5% and 10% of the solution found by the oc- dec-mdp algorithm.
figure 6: vfp performance in the civilian rescue domain.
we began the vfp scalability tests with a configuration from figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions n(μ = figure 5: mission plan configurations: (a) civilian rescue  domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.
part 2: we then chose h 1,1 to split the opportunity cost  functions and conducted a series of experiments aimed at testing the scalability of vfp for various mission plan configurations, using the performance of the oc-dec-mdp algorithm as a benchmark.
figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: h 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.
we then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.
to obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (figure (6a)).
we then shifted our attention to the civilian rescue domain  introduced in figure 1 for which we sampled all action execution  durations from the normal distribution n = (μ = 5, σ = 2)).
when  heuristics h 1,0 , h 1/2,1/2 and bh 1,1 were used (graphs 2,3 and 4), the function vi1 + vi2 was always below vj0 .
in particular, vi1 (280) + vi2 (280) exceeded vj0 (280) by 69%.
the first graph confirms, that when the opportunity cost function vj0 was split into  opportunity cost functions vi1 and vi2 using the h 1,1 heuristic, the  function vi1 +vi2 was not always below the vj0 function.
rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400. we show our results in figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.
we assumed that only method mj0 provided  reward, i.e.
time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal  distributions, i.e., pi1 = n(μ = 250, σ = 20), and pi2 = n(μ = 200, σ = 100).
part 1: we first ran the vfp algorithm on a generic mission plan configuration from figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.
since the vfp algorithm that we introduced provides two  orthogonal improvements over the oc-dec-mdp algorithm, the  experimental evaluation we performed consisted of two parts: in part 1, we tested empirically the quality of solutions that an locally optimal solver (either oc-dec-mdp or vfp) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we  compared the runtimes of the vfp and oc-dec- mdp algorithms for a variety of mission plan configurations.
