although prophet [16] and link-state [22] do no replication, as described, we added replication to those protocols for better  comparison to our protocol. 
in our implementation, we always replicate.
the replication decision is orthogonal to the transfer decision.
if p (k) ij is above a threshold, or if j is the destination of the message, node i will send a copy of the message to node j. all the above effort serves to determine the transfer probability when two nodes meet.
next, if a node has a message to forward, the node estimates its neighboring node"s order-k contact probability to contact the destination of the message using equation (6).
after the exchange, the two nodes will have identical contact probability matrices.
if node j"s matrix has a row l with a higher version number, then node i replaces its own row l with node j"s row l. likewise node j updates its matrix.
node i compares its own contact matrix with node j"s matrix.
when two nodes i and j meet, they first exchange their contact probability matrices.
each row of the contact probability matrix has a version number; the version number for row i is only increased when node i updates the matrix entries in row i. other matrix entries are updated through exchange with other nodes when they meet.
every node keeps a contact probability matrix, in which each cell pij is a contact probability between to nodes i and j. each node i computes its own contact probabilities (row i) with other nodes using equation (5) whenever the node ends a contact with other nodes.
3.1.3 multi-node relay when we use more than two hops to relay a message, each node needs to know the contact probabilities along all possible paths to the message destination.
otherwise, the message is stored in the receiver"s storage for forwarding to the destination.
when a node receives a message, if the destination of the  message is the receiver itself, the message is delivered.
if it has, it sends a copy of the message.
after receiving a meta-message, a node checks whether it has any message that destined to its neighbor, or to a node in the node list of the neighbor"s meta-message.
when two nodes meet, they exchange a meta-message,  containing an unordered list of node ids for which the sender of the  metamessage has a contact probability greater than the threshold.
therefore, meta-data exchange is necessary.
3.1.2 sender decision to make decisions, a sender must have the information about its neighbors" contact probability with a message"s destination.
notice that our protocol replicates the message whenever a good-looking relay comes along.
if the probability is less than the threshold, the receiver discards the message.
to the destination.
otherwise, if the probability of delivering the message to its destination through this receiver node within δt is greater than or equal to a certain threshold, the message is stored in the receiver"s storage to forward 1 in our simulation, however, we accurately model the  communication costs and some short contacts will not succeed in transfer of all messages.
if the destination of a  message is the receiver itself, the message is delivered.
3.1.1 receiver decision whenever a node meets other nodes, they exchange all their  messages (or as above, index messages).
we consider two approaches: either the receiving neighbor decides whether to act as a relay, or the source decides which neighbors to use as relay.
3.1 our routing protocol we first consider the case of a two-hop path, that is, with only one relay node.
we define the k-order probability inductively, p (k) ij = p (0) ij + x α p (0) iα p (k−1) αj , (6) where α is any node other than i or j.
we are also interested in the probability that we may be able to pass a message through a sequence of k nodes.
the above probability is the direct contact probability of two nodes.
(5) to adapt to the change of contact patterns, and reduce the storage space for contact histories, a node may discard old history contacts; in this situation, the estimate would be based on only the retained history.
if node i had any contact with node j during a given period m, which is [t0 + mδt, t0 + (m + 1)δt), we set the contact status im to be 1; otherwise, the contact status im is 0. the probability p (0) ij that node i meets node j in the next δt can be estimated as the average of the contact status in prior intervals: p (0) ij = 1 n n−1x m=0 im.
we number each of the n periods from 0 to n − 1, then check each period.
we divide the contact history hi(j) into a sequence of n periods of δt starting from the start time (t0) of the first contact in history hi(j) to the current time.
for this purpose, we assume that even short contacts are sufficient to exchange messages.1 the probability for node i to meet node j is computed by the following procedure.
we design a method to capture the contact frequency of mobile nodes.
in the second example, however, the two nodes have more frequent contacts.
using the above estimation approach, both examples would have similar contact probability.
a third node may have a short contact with the first node, followed by a short non-contact period.
for example, one node may have a long contact with another node, followed by a long non-contact period.
however, this approach does not capture the frequency of contacts.
one way to estimate the timely-contact probability is to use the ratio of the total contact duration to the total time.
neither prophet nor link-state considers time in this way.
for example, what is the contact probability in the next hour?
but our method differs in that we estimate the contact probability within a period of time.
we also use historical contact information to estimate the  probability of meeting other nodes in the future.
