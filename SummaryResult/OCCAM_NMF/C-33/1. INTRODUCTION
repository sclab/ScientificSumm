in section 5 we introduce some related work and conclude in section 6. 
section 4 evaluates our approach.
section 3 describes our approach based on negotiation detailedly, including  utility functions, negotiation protocol and context providers" strategies.
section 2 presents some assumptions.
the remainder of this paper is organized as follows.
it also expands the negotiation space considered in present negotiation process, and therefore provides more  possibilities to find better agreement.
it will cost more time to reach agreement.
without the reward, it may find current offer worth less than the counter-offer, and proposes its counter-offer.
negotiator may find current offer and reward worth more than counter-offer which will delay the agreement, and accepts current offer and reward.
rewards).
this model can help negotiators reach agreement in the present negotiation process by providing some guarantees over the outcome of next negotiation process (i.e.
the negotiation model we have designed to support our  approach is also a novel model in negotiation domain.
it does not need any applications and users" intervention.
4. this approach can choose an appropriate provider  automatically.
3. it can guarantee providers" interests and provide fair proceeds allocation when providers negotiate with each other to reach agreement on their concerned problems.
2. it is more reasonable that distributed context providers decide who provide context, because it can avoid the serious consequences caused by a breakdown of a  centralized arbitrator.
thus it will reduce the burden of the  middleware.
our approach has some specific advantages: 1. we do not need an arbitrator provided by the  middleware of pervasive computing to decide who provides context.
thus  context providers negotiate with each other to reach agreement on the issues who can provide context and how they allocate the proceeds.
in order to get such right, context providers may agree to share some portion of the proceeds with its opponents.
since high reputation could help providers get more opportunities to provide context and get more proceeds in the future, providers try to get the right to provide good context to enhance their reputation.
in this paper, we let distributed context providers themselves decide who  provide context information.
moreover, when such arbitrator is broken down, it will cause serious  consequences for context-aware applications.
thus the burden of the middleware is very heavy, and its decision may be unfair and harm some providers" interests.
however, most existing approaches consider context providers as entities without any personal interests, and use a centralized arbitrator provided by the middleware to  decide who can provide appropriate context.
they hope to get proceeds when they provide context  information.
in pervasive environments, context providers considered as relatively independent entities, have their own interests.
thus we should design a mechanism to provide appropriate context information for current context-aware applications.
because context-aware applications utilize context information to adapt their behaviors, inappropriate context information may lead to inappropriate behavior.
for example, different sensors report that the same person is in different places at the same time.
for example, in a smart home, thermometer a"s measurement precision is 0.1 ◦ c, and thermometer b"s measurement precision is 0.5 ◦ c. thus a could provide more precise context  information about temperature than b. moreover, sometimes different context providers may provide conflictive context information.
however, one specific kind of context can often be provided by  different context providers (sensors or other data sources of  context information) with different quality levels.
context-aware applications exploit  context information, such as location, preferences of users and so on, to adapt their behaviors in response to changing  requirements of users and pervasive environments.
context informs both recognition and mapping by  providing a structured, unified view of the world in which the system operates [1].
context-awareness is a key concept in pervasive  computing.
