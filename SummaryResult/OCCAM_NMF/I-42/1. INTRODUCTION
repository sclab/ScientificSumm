we conclude with a selection of ideas for future work and extensions for dcpop. 
we then show that our distributed cross-edged pseudotree optimization procedure (dcpop) performs significantly better in practice than the original dpop algorithm for some problem  instances.
we discuss the complexity of our algorithm as well as the impact of pseudotree generation  heuristics.
we then provide a summary of the original dpop algorithm and  introduce our dcpop algorithm.
we begin with a definition of 741 978-81-904262-7-5 (rps) c 2007 ifaamas dcop, traditional pseudotrees, and cross-edged pseudotrees.
in this paper we introduce an extension to the dpop algorithm that handles an extended set of pseudotree arrangements which include cross-edged pseudotrees.
our hypothesis was that these  crossedged pseudotrees would outperform traditional pseudotrees for some problem types.
after  exploring these other arrangements we found that cross-edged  pseudotrees provide shorter depths and higher branching factors than the traditional pseudotrees.
we suspected that there could be other ways to arrange the pseudotrees that would  provide increased parallelism and smaller message sizes.
we found that these heuristics  often produced little parallelism as the pseudotrees tended to have high depth and low branching factors.
we began to  investigate the performance of traditional pseudotrees generated by  current edge-traversal heuristics.
however, it was also shown that  finding the optimal pseudotree was np-hard.
it has been shown in [6] that any constraint graph can be mapped into a traditional pseudotree.
to date, both categories of algorithms arrange agents into a traditional pseudotree to solve the problem.
dynamic programming based algorithms include dpop and its  extensions [5, 6, 7].
search based  algorithms that originated from discsp typically use some form of backtracking [10] or bounds propagation, as in adopt [3].
current algorithms that solve complete dcops use two main approaches: search and dynamic programming.
this extension to the original discsp approach has become popular in multi-agent systems, and has been labeled the distributed constraint optimization problem (dcop) [1].
instead of finding an assignment that satisfies all constraints, these approaches find an assignment that produces a high level of global utility.
recent approaches to solving problems in these domains rely on optimization techniques that map constraints into multi-valued utility functions.
many domains for agent systems, especially teamwork coordination, distributed scheduling, and sensor networks, involve overly constrained  problems that are difficult or impossible to satisfy for every constraint.
early domains for  distributed constraint satisfaction problems (discsp) included job shop scheduling [1] and resource allocation [2].
csps were originally extended to distributed agent environments in [9].
with the  advent of distributed ai, multi-agent systems became a popular way to model the complex interactions and coordination required to solve distributed problems.
many historical problems in the ai community can be  transformed into constraint satisfaction problems (csp).
