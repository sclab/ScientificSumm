thus we have an overall complexity of o(v ·e+v ·(v +e)) = o(v ·e). 
this increases the complexity of the place operation, but for all placements the total complexity is only o(v · e).
if we are smart about evaluating local changes when each node receives placement messages from its neighbors and cache the results the getbestneighbor operation is only o(e).
thus we have o(v ·(v +v +v ·e)) = o(v 2 ·e).
this operation is o(v · e), but results can be cached using only o(v ) space at each node.
each recursion performs a  recursive getbestneighbor operation that traverses all placed nodes and their neighbors.
= previous then if n is placed then nscore ← getbestneighbor(n, current) else nscore ← evaluate(current, n) if nscore > score then score ← nscore best ← n return best, score nodes, so it has o(v ) recursions.
on autonomous agents and multi-agent systems (aamas 07) 745 algorithm 2 distributed best-first search algorithm root ← electedleader next(root, ∅) place(node, parent) node.parent ← parent node.ancestors ← parent.ancestors ∪ parent send placement message (node, node.ancestors) to all  neighbors of node next(current, previous) if current is not placed then place(current, previous) next(current, ∅) else best ← getbestneighbor(current, previous) if best = ∅ then if previous = ∅ then terminate, all nodes are placed next(previous, ∅) else next(best, current) getbestneighbor(current, previous) best ← ∅; score ← 0 for all n ∈ current.neighbors do if n!
joint conf.
finding the next node uses recursion and traverses only already placed the sixth intl.
the place operation is at most o(v ) because of the sent messages.
for each v ∈ v we perform a place operation, and find the next node to place using the getbestneighbor operation.
assuming a complexity of o(v ) for the evaluation function, which is the case for our best  overall function, the best-first traversal is o(v · e) which is at worst o(n3 ).
the complexity of the best-first traversal depends on the  complexity of the evaluation function.
after completion each node has knowledge of its parent and ancestors, so it can  easily determine which connected nodes are pseudo-parents,  branchparents, pseudo-children, and branch-children.
the best overall function calculated the value as ancestors−(branchparents+branchchildren) with the  number of unknown relationships being a tiebreak.
from these we can calculate  branchparents, branch-children, and unknown relationships for a potential node placement.
in our experiments we used several evaluation functions that took as arguments an ordered list of ancestors and a node, which  contains a list of neighbors (with each neighbor"s placement depth in the tree if it was placed).
note that in this  algorithm each node only exchanges its best value with its neighbors.
a general distributed best-first  algorithm for node expansion is presented in algorithm 2. an  evaluation function at each node provides the values that are used to determine the next best node to expand.
5.1 the best-first cross-edged pseudotree heuristic the heuristics used to generate cross-edged pseudotrees  perform a best-first traversal.
the dfs based heuristics used in our experiments come from the work done in [4, 8].
improved dfs based heuristics use a special procedure to choose the root node, and also provide an ordering function over the neighbors of a node to determine the order of path recursion.
the general distributed algorithm uses a token passing mechanism and a linear number of messages.
the heuristics used to generate traditional pseudotrees perform a distributed dfs traversal.
each node then proceeds to begin the dcpop algorithm using its  knowledge of the pseudotree generated by the best heuristic.
after all heuristics have had a chance to complete, every node knows which heuristic produced the best pseudotree.
the root then broadcasts the total complexity for that heuristic to all nodes.
after each heuristic completes its generation of a pseudotree, we execute the measurement procedure and propagate the  measurement information up to the chosen root in that pseudotree.
instead, messages include  dimensional and branch information but no utility hypercubes.
to do this, we simply run the algorithm without attempting to calculate any of the local utility hypercubes or optimal value assignments.
the actual dcpop algorithm has worst case exponential complexity, but we can calculate the maximum message size, computation size, and sequential path cost for a given cross-edged pseudotree in  linear space-time complexity.
we consider only heuristics that run in polynomial time with  respect to the number of nodes in the original dcop instance.
while we have developed some heuristics that generate good cross-edged pseudotrees for use with dcpop, our focus has been to use multiple heuristics and then select the best pseudotree from the generated pseudotrees.
some previous research focused on finding heuristics to generate good pseudotrees [8].
thus a heuristic is used for generation, and the performance of the algorithm depends on the pseudotree found by the heuristic.
the problem of finding the best pseudotree for a given dcop instance is np-hard.
xi is a leaf node) then 11: utilxi (p(xi)) ← compute utils(p(xi),pp(xi)) for all pp(xi) 12: send message(p(xi), utilxi (p(xi)),branchxi ) 13: send message(pp(xi), empty util, empty branch) to all pp(xi) 14: activate util message handler() phase 3: value message propagation 15: activate value message handler() end algorithm util message handler(xk,utilxk (xi), branchxk ) 16: store utilxk (xi),branchxk (xi) 17: if util messages from all children and branch children arrived then 18: for all bj ∈branch(xi) do 19: if bj is merged then 20: join all hypercubes where bj ∈util(xi) 21: eliminate bj from the joined hypercube 22: if p(xi) == null (that means xi is the root) then 23: v ∗ i ← choose optimal(null) 24: send value(xi, v ∗ i) to all c(xi) 25: else 26: utilxi (p(xi)) ← compute utils(p(xi), pp(xi)) 27: send message(p(xi),utilxi (p(xi)), branchxi (p(xi))) value message handler(valuexi ,p(xi)) 28: add all xk ← v ∗ k ∈valuexi ,p(xi) to agent view 29: xi ← v ∗ i =choose optimal(agent view) 30: send valuexl , xi to all xl ∈c(xi) that in real world problems the generation of the pseudotree has a significant impact on the actual performance.
on autonomous agents and multi-agent systems (aamas 07) algorithm 1 dcpop algorithm 1: dcpop(x; d; u) each agent xi executes: phase 1: pseudotree creation 2: elect leader from all xj ∈ x 3: elected leader initiates pseudotree creation 4: afterwards, xi knows p(xi), pp(xi), bp(xi), c(xi), bc(xi) and pc(xi) phase 2: util message propagation 5: if |bp(xi)| > 0 then 6: branchxi ← |bp(xi)| + 1 7: for all xk ∈bp(xi) do 8: utilxi (xk) ←compute utils(xi, xk) 9: send message(xk,utilxi (xk),branchxi ) 10: if |c(xi)| = 0(i.e.
we acknowledge 744 the sixth intl.
in our assessment of complexity in dcpop we focused on the worst case possibly produced by the algorithm.
