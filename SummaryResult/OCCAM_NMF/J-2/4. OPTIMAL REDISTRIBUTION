+ ci−1ˆvi−1 + ciˆvi+1 + .
+ cn−1ˆvn. 
+ zn ≥ kmˆvm+1 (worst-case constraint) we recall that zi = c0 + c1ˆv1 + c2ˆv2 + .
+ zn ≤ mˆvm+1 (non-deficit) z1 + z2 + .
≥ ˆvn ≥ 0 zn ≥ 0 (individual rationality) z1 + z2 + .
this corresponds to the following optimization problem: maximize k (the percentage redistributed in the worst case) subject to: for every bid vector ˆv1 ≥ ˆv2 ≥ .
(hence, as long as the total amount redistributed is at least 0 when the total vcg payment is 0, these cases do not affect the worst-case percentage.)
this percentage is undefined when the total vcg payment is 0. to deal with this, technically, we define the worst-case redistribution percentage as the largest k so that the total amount redistributed is at least k times the total vcg payment, for all bid vectors.
thus, it seems most natural to compare mechanisms by the percentage of total vcg payment that they redistribute in the worst case.
on the other hand, when n = 12 and m = 1, for the first  example, the percentage redistributed in the worst case is 5 6 , and for the second example, this percentage is 14 15 , which implies that this time the second mechanism has better worst-case performance.
when n = 6 and m = 1, for the first example (bailey-cavallo mechanism), the percentage redistributed in the worst case is 2 3 , and for the second example, this  percentage is 1 2 , which implies that for this pair of n and m, the first mechanism has better worst-case performance.
since we  assume that the number of agents n and the number of units m are known, we can determine which example mechanism has better worst-case performance by comparing the two quantities.
so in the worst case, which is when ˆvm+3 = ˆvm+1, the  percentage redistributed is 1 − (m+1)(m+2) (n−m−1)(n−m−2) .
for the second example, the total  redistribution payment is mˆvm+1 − m(m+1)(m+2) (n−m−1)(n−m−2) ˆvm+3, which is greater than or equal to mˆvm+1(1− (m+1)(m+2) (n−m−1)(n−m−2) ).
so in the worst case, which is when ˆvm+2 = 0, the percentage  redistributed is n−m−1 n .
for the first example, the total  redistribution payment is (m+1)m n ˆvm+2 +(n−m−1)m n ˆvm+1, which is greater than or equal to (n−m−1) m n ˆvm+1.
finally, we can evaluate a mechanism by considering the lowest redistribution  percentage that it guarantees.
worst-case performance.
(if it were possible, then our worst-case optimal redistribution mechanism would also  always redistribute all of the vcg payment, and we will see later that it does not.)
but since the function must be linear (has degree at most 1), it follows that p = 0. thus, a  dominant mechanism would always redistribute all of the vcg payment, which is not possible.
32 polynomial function.
, ˆvn), where p is a 2 the percentage redistributed seems the natural criterion to use, among other things because it is scale-invariant: if we multiply all bids by the same positive constant (for example, if we change the units by re-expressing the bids in euros instead of dollars), we would not want the behavior of our mechanism to change.
the above implies that this function can be  written as (ˆvm+2 − ˆvm+1)(ˆvm+3)p(ˆv1, ˆv2, .
the remaining vcg payment of the dominant mechanism should be 0 whenever ˆvm+2 = ˆvm+1 or ˆvm+3 = 0. now, the remaining vcg payment is a linear function of the ˆvi (linear redistribution), and therefore also a polynomial function.
consider the  remaining vcg payment (the vcg payment failed to be  redistributed).
then, it should dominate both examples above.
for suppose such a mechanism exists.
it turns out that there is no  mechanism in the family that dominates all other mechanisms in the family.
for the previous two examples, neither dominates the other, because they each redistribute 100% in different cases.
inside the family of linear vcg  redistribution mechanisms, we say one mechanism dominates another mechanism if the first one redistributes at least as much as the other for any bid vector.
moreover, there are actually infinitely many mechanisms that redistribute 100% of the total vcg payment in the best case-for example, any convex combination of the above two will redistribute 100% if both ˆvm+2 = ˆvm+1 and ˆvm+3 = 0. dominance.
thus, this mechanism also redistributes 100% of the total vcg payment in the best case.
when ˆvm+3 = 0, this is equal to the total vcg payment mˆvm+1.
for the second example, the total  redistribution payment is mˆvm+1 − m(m+1)(m+2) (n−m−1)(n−m−2) ˆvm+3.
thus, this mechanism redistributes 100% of the total vcg payment in the best case.
when ˆvm+2 = ˆvm+1, this is equal to the total vcg payment mˆvm+1.
for the first example, the total redistribution payment is (m + 1)m n ˆvm+2 + (n − m − 1)m n ˆvm+1.
consider the previous two examples.
one way of evaluating a  mechanism is by considering the highest redistribution  percentage that it achieves.
best-case performance.
below, we study three well-defined ways of comparing  redistribution mechanisms: best-case performance, dominance, and worst-case performance.
we emphasize that we do not assume that a prior distribution over bidders" valuations is available, so we cannot compare them based on expected redistribution.
mechanisms among all linear vcg redistribution mechanisms, we would like to be able to identify the one that redistributes the greatest percentage of the total vcg payment.2 this is not a well-defined notion: it may be that one mechanism  redistributes more on some bid vectors, and another more on other bid vectors.
