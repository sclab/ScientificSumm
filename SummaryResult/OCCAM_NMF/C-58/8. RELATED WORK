although this strategy guarantees path convergence, it loses the  aggregation tree abstraction property of dhts as the domain constrained routing might touch a node more than once (as it searches forward and then backward to stay within a domain). 
this interface can be used to ensure path  convergence by searching in the lowest domain and moving up to the next domain when the search reaches the root in the current domain.
skipnet [18]  provides domain restricted routing where a key search is limited to the specified domain.
[17] point out the importance of path convergence from the  perspective of achieving efficiency and investigate the performance of pastry and other dht algorithms, respectively.
[7] and gummadi et al.
castro et al.
internal dht trees typically do not satisfy domain locality  properties required in our system.
with the aggregation abstraction provided by our system, designing and building of such applications becomes easier.
all these systems implicitly perform aggregation on some attribute, and each one of them must be designed to handle any reconfigurations in the underlying dht.
although object location is a predominant target application for dhts, several other applications like multicast [8, 9, 33, 36] and dns [11] are also built using dhts.
our goal is to develop and expose the internal reduction forest of dhts as a similarly general and useful abstraction.
some of these systems internally make use of the reduction forest not only for routing but also for caching [32], but for simplicity, these systems do not  generally export this powerful functionality in their external interface.
many systems-building upon both plaxton"s bit-correcting strategy [32, 46] and upon other strategies [24, 29, 35]-have chosen to hide this power and export a simple and  general distributed hash table abstraction as a useful building block for a broad range of distributed applications.
"s [28] original paper  describes not a dht, but a system for hierarchically aggregating and querying object location data in order to route requests to nearby copies of objects.
plaxton et al.
the observation that dhts internally provide a scalable forest of reduction trees is not new.
tag [21] collects information from a large number of sensors along a single tree.
this research is complementary to our work.
sophia [42] is a distributed monitoring system designed with a declarative logic programming model where the location of query execution is both explicit in the language and can be calculated during evaluation.
ganglia [15, 23] uses a hierarchical system where the attributes are replicated within clusters using multicast and then cluster  aggregates are further aggregated along a single tree.
some of them are centralized where all the monitoring data is collected and analyzed at a central host.
several academic [15, 21, 42] and commercial [37] distributed monitoring systems have been designed to monitor the status of large networked systems.
cone builds a tree per attribute and requires a total order on the attribute values.
willow, dasis and somo build a single tree for aggregation.
other closely related projects include  willow [39], cone [4], dasis [1], and somo [45].
our approach provides a  flexible api for applications to set propagation rules according to their read-to-write ratios.
while such aggressive replication is efficient for read-dominated attributes, it incurs high message cost for attributes with a small read-to-write ratio.
however, any gossiping scheme requires aggressive replication of the aggregates.
astrolabe adopts a  propagateall and unstructured gossiping techniques to attain robustness [5].
the aggregation abstraction we use in our work is heavily  influenced by the astrolabe [38] project.
