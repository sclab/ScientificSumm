when these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 
with partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.
combination time: co-allocation architecture exploits the partial copy feature of the gridftp data movement tool to enable data transfers across multiple connections.
this is less time-costly.
however, data channels must be explicitly reset between transfer requests.
this allows the same data pathways to be used for multiple file transfers.
data pathways need be opened only once and may handle many transfers before being closed.
transmission time: transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.
when the channel has been established, the data begins flowing.
the client then establishes a control channel, sets up transfer parameters, and requests data channel creation.
authentication time: before a transfer, the client must load a globus proxy and authenticate itself to the gridftp server with specified user credentials.
4.4 co-allocation cost analysis when clients download datasets using gridftp co-allocation technology, three time costs are incurred: the time required for client authentication to the gridftp server, actual data transmission time, and data block reassembly time.
their respective values in our data grid environment are 80%, 10%, and 10%.
when we performed data transfers using the gridftp protocol we discovered that cpu and i/o statuses slightly affect data transfer performance.
after several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.
oioi j cpucpu j bwbw jiji wpwpwpscore // (1) the three influencing factors in this formula: wbw , wcpu , and wi/o describe cpu, i/o, and network bandwidth weights, which can be determined by data grid organization administrators according to the various attributes of the storage systems in data grid nodes since some storage equipment does not affect cpu loading.
the seven system parameters our replica selection cost model considers are: scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j bw jip : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth bbw : network bandwidth weight defined by the data grid administrator cpu jp : percentage of node j cpu idle states wcpu : cpu load weight defined by the data grid administrator oi jp / : percentage of node j i/o idle states wi/o : i/o state weight defined by the data grid administrator we define the following general formula using these system factors.
we assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.
however, we must express these factors in mathematical notation for further analysis.
we listed some influencing factors for our cost model in the preceding section.
4.3 our replica selection cost model the target function of a cost model for distributed and replicated data storage is the information score from the information service.
we measure i/o states using sysstat [15] utilities.
if the i/o state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.
data files in data grids are huge.
i/o state: data grid nodes consist of different heterogeneous storage systems.
the measurement of it is done by the globus toolkit / mds.
cpu loading is a dynamic system factor, and a heavy system cpu load will certainly affect data file downloads process from the site.
cpu load: grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, pcs.
the network weather service (nws) is a powerful toolkit for this purpose.
because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.
in other words, data file transfer times are tightly dependent on network bandwidth situations.
in our model, we consider three system factors that affect replica selection: network bandwidth: this is one of the most significant data grid factors since data files in data grid environments are usually very large.
4.2 system factors determining the best database from many with the same replications is a significant problem.
when the application finishes, it returns the results to the user.
the replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through gridftp.
the replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.
the application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.
if they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.
the client first logins in at a local site and executes the data grid platform application, which checks to see if the files are available at the local site.
4.1 replica selection scenario our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.
service we constructed a replica selection service to enable clients to select the better replica servers in data grid environments.
see below for a detailed description.
