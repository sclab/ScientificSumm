a re-ranking algorithm implementing this strategy is presented in section 6 and evaluated in section 7. section 8 discusses an extended version of the algorithm. 
section 5 then outlines a strategy for controlling overlap, using the baseline method as a starting point.
the remainder of the paper is organized as follows: after a discussion of background work and evaluation  methodology, a baseline retrieval method is presented in section 4. this baseline method represents a reasonable adaptation of standard ir technology to xml.
extending that approach, the re-ranking algorithm varies weights dynamically as elements are processed.
the inspiration for this strategy comes partially from recent work on structured  documents retrieval, where terms appearing in different fields, such as the title and body, are given different weights [20].
for  example, once an element representing a section appears in the ranking, the scores for the paragraphs it contains and the article that contains it are reduced.
starting with an initial element ranking, a re-ranking algorithm adjusts the scores of lower ranking elements that contain, or are contained within, higher ranking elements, reflecting the fact that this information may now be redundant.
this paper presents a method for controlling overlap.
even when an entire book is relevant, a user may still wish to have the most important paragraphs highlighted, to guide her reading and to save time [6].
in such cases, it is reasonable to report elements which contain, or are contained in, higher ranking elements.
for example, an outer element may contain a substantial amount of information that does not appear in an inner element, but the inner element may be heavily focused on the query topic and provide a short overview of the key concepts.
unfortunately, this approach destroys some of the possible benefits of xml ir.
one possible solution is to report only the highest  scoring element along a given path in the tree, and to remove from the lower ranks any element containing it, or contained within it.
if each of these elements are presented to a user as an individual and  separate result, she may waste considerable time reviewing and rejecting redundant content.
for example, many of the elements in figure 2 would receive a high score on the keyword query text index compression algorithms.
a high scoring section is likely to contain several high scoring paragraphs and to be contained in an high scoring article.
the direct application of a standard relevance ranking technique to a set of xml elements can produce a result in which the top ranks are dominated by many structurally related elements.
of x. since an element may be represented by the node at its root, the output of an xml ir system may be viewed as a ranked list of the top-m nodes.
for each node x âˆˆ n , the notation x.parent refers to the parent node of x, if one exists, and the notation x.children refers to the set of child nodes sec bdyfm atl au au au abs p b st ip1 sec st ss1 st article p figure 2: example xml tree.
the article of figure 1 may be viewed as an xml tree, as illustrated in figure 2. formally, a collection of xml documents may be represented as a forest of ordered, rooted trees, consisting of a set of nodes n and a set of directed edges e connecting these nodes.
most of these fundamental problems can be solved through the careful adaptation of standard ir techniques, but the problems caused by overlap are unique to this area [4,11] and form the primary focus of this paper.
each of these characteristics affects the design of an xml ir  system, and each leads to fundamental problems that must be solved in an successful system.
elements overlap each other - articles contain sections, sections  contain subsections, and subsections contain paragraphs.
some elements, such as  paragraphs and sections, may be reasonably presented to the user as retrieval results, but others are not appropriate.
tags indicate the beginning and end of each element, with elements varying widely in size, from one word to thousands of words.
figure 1 provides an example of a journal article encoded in xml, illustrating many of the important characteristics of xml documents.
<article> <fm> <atl>text compression for dynamic document databases</atl> <au>alistair moffat</au> <au>justin zobel</au> <au>neil sharman</au> <abs><p><b>abstract</b> for ...</p></abs> </fm> <bdy> <sec><st>introduction</st> <ip1>modern document databases...</ip1> <p>there are good reasons to compress...</p> </sec> <sec><st>reducing memory requirements</st>... <ss1><st>2.1 method a</st>... </sec> ... </bdy> </article> figure 1: a journal article encoded in xml.
this facility is of particular benefit when a collection contains very long documents, such as product manuals or books, where the user should be directed to the most relevant portions of these documents.
in response to a user query, an xml information retrieval system might return a mixture of paragraphs, sections, articles, bibliographic entries and other components.
the representation of documents in xml provides an  opportunity for information retrieval systems to take  advantage of document structure, returning individual document components when appropriate, rather than complete  documents in all circumstances.
