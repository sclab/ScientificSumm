by taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 
finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in  section 5.2.3. as in many column generation problems, the tailing-off effect is substantial.
for larger instance, this restricted seeder is clearly worse.
however, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.
this setting is faster for smaller instances, since the lp relaxations are smaller, and faster to solve.
first, we restrict the seeder so that it only begins with 10,000 cycles.
in each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.
302 the combination of these optimizations allows us to easily clear markets with over 10,000 patients.
branching rule uncertainty.
primal heuristic rounding & cplex tree search.
optimality prover on.
column management on, with 400,000 column limit.
column generation one column at a time.
the other algorithms are variations of the incremental  column generation approach described in section 5. we begin with the following settings (all optimizations are switched on): category setting column seeder combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).
also, its running time on markets smaller than this is significantly worse than the other algorithms.
this algorithm fails to clear any markets with 1000 patients or more.
the first algorithm is cplex on the full cycle  formulation.
for each market size listed, we randomly  generated 10 markets, and attempted to clear them using each of the algorithms.
wherever we used cplex (e.g., in solving the lp and as a primal heuristic, as discussed in the previous sections), we used cplex 10.010. figure 6 shows the runtime performance of four clearing algorithms.
all our experiments were performed in linux (red hat 9.0), using a dell pc with a 3ghz intel pentium 4  processor, and 1gb of ram.
