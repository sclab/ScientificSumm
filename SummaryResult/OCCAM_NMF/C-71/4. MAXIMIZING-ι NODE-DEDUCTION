icqa is also a distributed algorithm that serves as an approximate solution of problem 1. 
icqa is also based on locally obtainable information of sensor nodes.
and the condition that icqa stops is the same as mind.
the above procedure is handed over as what mind does and new groups are thus formed one by one.
in this way, node i"s group sensing neighbors are found.
this node-selecting process continues until the sensing area of node i is entirely covered.
details are presented in our  simulation study.
a numerical approximation is employed to calculate this improvement.
the improvement of the coverage quality, mathematically, should be the integral of the the improvements of all points inside the neighbor"s sensing area.
• the selected neighbor results in highest improvement of the coverage quality of the neighbor"s sensing area.
(i.e., the coverage quality requirement of the parts is not fulfilled if this neighbor is not selected.)
the criterion is: • the selected neighbor is responsible to provide surveillance work for some uncovered parts of node i"s sensing area.
a node i  greedily selects an ungrouped sensing neighbor in the same group as  itself one by one, and informs the neighbor it is selected in the group.
in icqa, a node-selecting process is as follows.
our aim 1174 is to evaluate how an idea, i.e., mind, based on locally maximize ι performs.
4.2 incremental coverage quality algorithm: a benchmark for mind to evaluate the effectiveness of introducing ι in the sensor-group problem, another algorithm for sensor-group problem called  incremental coverage quality algorithm (icqa) is designed.
it is a distributed algorithm that serves as an approximate solution of problem 1.
mind is based on locally obtainable information of sensor nodes.
when a node that involves in this algorithm found out that the coverage quality if its sensing area, except what overlaps the network margin, cannot be ensured even if all its ungrouped sensing neighbors are grouped into the same group as itself, the algorithm stops.
in this way, groups are formed one by one.
after a group is formed, another random-selected ungrouped node begins to group itself to the second group and initiates the above procedure.
then the first group is formed (algorithmic description of this procedure can be found at [19]).
this group sensing neighbor continues this procedure until no unfinished neighbor can be found.
then it hands over the above procedure to an unfinished group sensing neighbors that is the farthest from  itself.
it informs these group sensing neighbors that they are selected in the group.
it  calculates the resulting group sensing neighbors of it based on the above procedure.
the node is grouped to the first group.
the above procedure initiates at a random-selected node that is not in the margin.
those nodes that have not yet finished this procedure are called unfinished nodes.
then all the ungrouped sensing neighbors that are not deleted are grouped into the same group of node i. we call the sensing neighbors that are in the same group of node i the group sensing neighbors of node i. we then call node i a finished node, meaning that it has finished the above procedure and the sensing area of the node is covered.
this node-deduction process continues until no candidate can be found.
• the deletion of the node will not result in uncovered-points inside the sensing area of i. a candidate is deleted if the deletion of the candidate results in largest ι of the sub-network compared to the deletion of other  candidates.
the candidate to be pruned satisfies that: • it is an ungrouped node.
under the constraint that the coverage quality of its sensing area should be ensured, node i deletes nodes in this sub-network one by one.
a node i greedily maximizes ι of the sub-network composed by itself, its ungrouped sensing neighbors, and the neighbors that are in the same group of itself.
4.1 maximizing-ι node-deduction algorithm the node-deduction process of our maximizing-ι node-deduction algorithm (mind) is simple.
each in-network sensor node can be pre-programmed or on-line informed about φ and ρ, and thus calculate whether a point in its sensing area is in the margin or not.
the information on φ and ρ is  networkbased.
based on this consideration, in our algorithm design, we ensure the coverage quality of the network area except the margin.
obviously, the number of sensor nodes that can sense an event occurring in the margin of the network is smaller than the number of sensor nodes that can sense an event occurring in other area of the network.
in a practical network, sensor nodes are usually evenly deployed in the network area.
algorithm for sensor-grouping problem before we process to introduce algorithms to solve the sensor grouping problem, let us define the margin (denoted by θ) of an area φ monitored by the network as the band-like marginal area of φ and all the points on the outer perimeter of θ is ρ distance away from all the points on the inner perimeter of θ. ρ is called the margin length.
