we emphasize that both of our domains are multidimensional, since each machine i needs to specify a vector saying which jobs are low and high on it. 
the private information of a machine is which jobs have value lj (or l) and which ones have value hj (or h) on it.
for our two scheduling domains, the informational  assumption is that the values lj, hj are publicly known.
inequality (1) also defines truthfulness-in-expectation for a randomized mechanism, where p1 i , p2 i now denote the expected payments made to player i, x1 , x2 are the fractional assignments denoting the  randomized algorithm"s schedule (i.e., xk ij is the probability that j is assigned to i in the schedule output for (pk i , p−i)).
for a randomized mechanism, we will consider the notion of truthfulness in expectation [3], which means that a  machine (player) maximizes her expected utility by declaring her true processing-time vector.
the notion of  truthfulness for a fractional mechanism is the same as in  definition 2.1, where x1 , x2 are now fractional assignments.
we will also consider fractional mechanisms that return a fractional assignment, and randomized mechanisms that are allowed to toss coins and where the assignment and the payments may be random variables.
to put it in words, in a truthful mechanism, no machine can improve its utility by declaring a false processing time, no matter what the other machines declare.
definition 2.1 (truthfulness) a scheduling mechanism is truthful if, for every machine i, every vector of processing times of the other machines, p−i, every true processing-time vector p1 i and any other vector p2 i of machine i, we have: p1 i − x j x1 ijp1 ij ≥ p2 i − x j x2 ijp1 ij, (1) where (x1 , p1 ) and (x2 , p2 ) are respectively the schedule and payments when the other machines declare p−i and machine i declares p1 i and p2 i , i.e., x1 = x(p1 i , p−i), p1 i = pi(p1 i , p−i) and x2 = x(p2 i , p−i), p2 i = pi(p2 i , p−i).
this is made precise using the notion of dominant-strategy truthfulness.
the mechanism must therefore incentivize the machines/players to truthfully reveal their processing times via the payments.
the mechanism"s goal is to compute a schedule that has near-optimal makespan with respect to the true processing times; a machine i is however only interested in maximizing its own utility, pi − li, where li is its load under the output assignment, and may declare false processing times if this could increase its utility.
a (direct-revelation) mechanism thus consists of a tuple (x, p): x specifies the schedule, and p = {pi} specifies the  payments handed out to the machines, where both x and the pis are functions of the reported processing times p = (pij)i,j.
we consider direct-revelation mechanisms: each machine reports its (possibly false) vector of processing times, the mechanism then computes a schedule and hands out  payments to the players (i.e., machines) to compensate them for the cost they incur in processing their assigned jobs.
on a machine incurs a cost to the machine equal to the true  processing time of the job on the machine, and a machine may choose to misrepresent its vector of processing times, which are private, in order to decrease its cost.
each machine is a selfish entity, that privately knows its own processing time for each job.
the social designer holds the set of jobs that need to be assigned, but does 254 not know the (true) processing times of these jobs on the different machines.
following the work of nisan and ronen [22], we consider the machines to be the strategic players or agents.
mechanism design studies strategic settings where the social designer needs to ensure the cooperation of the  different entities involved in the algorithmic procedure.
2.2 mechanism design we consider the makespan-minimization problem in the above scheduling domains in the context of mechanism  design.
the goal in the makespan-minimization problem is to  assign the jobs to the machines so as to minimize the makespan of the schedule.
we denote the load of machine i (under a given  assignment) by li = p j xijpij, and the makespan of a schedule is defined as the maximum load on any machine, i.e., maxi li.
in both these settings, we will again specify an assignment by a  vector x = (xij)i,j with p j xij = 1, but now xij ∈ [0, 1] for every i, j. for a randomized algorithm, xij is simply the probability that j is assigned to i (thus, x is a convex  combination of integer assignments).
we represent a deterministic schedule by a vector x = (xij)i,j, where xij is 1 if job j is assigned to  machine i, thus we have xij ∈ {0, 1} for every i, j, p i xij = 1 for every job j. we will also consider randomized algorithms and algorithms that return a fractional assignment.
we will use the terms schedule and assignment interchangeably.
2. the two-values case, which is a special case of above where lj = l and hj = h for all jobs j, i.e., pij ∈ {l, h} for every i, j. we say that a job j is low on machine i if pij = lj, and high if pij = hj.
this generalizes the classic  scheduling model of restricted machines, where hj = ∞.
in the unrelated-machines setting, each machine i is characterized by a vector of processing times (pij)j, where pij ∈ r≥0 ∪ {∞} denotes i"s processing time for job j with the value ∞ specifying that i cannot process j. we consider two special cases of this problem: 1. the job-dependent two-values case, where pij ∈ {lj, hj} for every i, j, with lj ≤ hj, and the values lj, hj are known.
2.1 the scheduling domain in our scheduling problem, we are given n jobs and m machines, and each job must be assigned to exactly one machine.
