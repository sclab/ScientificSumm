for most of this paper, we will consequently ignore any strategic considerations and  focus on designing an approximation algorithm for minimizing makespan that satisfies (3). 
(3) thus (3) reduces our mechanism design problem to a concrete algorithmic problem.
we have vk i (xk ) = − p j xk ijpk ij, so cycle monotonicity translates to pk k=1 ˆ − p j xk ijpk ij + p j xk+1 ij pk ij ˜ ≥ 0. rearranging, we get kx k=1 x j xk+1 ij ` pk ij − pk+1 ij ´ ≥ 0.
xk could be a {0, 1}-assignment or a fractional assignment.
let x(pk i , p−i) = xk for 1 ≤ k ≤ k, and let xk+1 = x1 , pk+1 = p1 .
, pk i .
fix a player i, p−i, and any p1 i , .
corollary 3.4 there exist prices p such that the  mechanism (f, p) is truthful iff f satisfies cycle monotonicity.1 we now consider our specific scheduling domain.
, vk i ∈ vi, kx k=1 h vk i (ak) − vk i (ak+1) i ≥ 0 where ak = f(vk i , v−i) for 1 ≤ k ≤ k, and ak+1 = a1.
definition 3.3 (cycle monotonicity) a social choice  function f satisfies cycle monotonicity if for every player i, every v−i ∈ v−i, every integer k, and every v1 i , .
furthermore, if all cycles are non-negative, a feasible assignment is 255 obtained as follows: fix an arbitrary node a∗ ∈ a and set pa to be the length of the shortest path from a∗ to a. this leads to the following definition, which is another way of phrasing the condition that the allocation graph have no negative cycles.
theorem 3.2 there exists a feasible assignment to (2) iff the allocation graph has no negative-length cycles.
[11]) the allocation graph of f is a directed weighted graph g = (a, e) where e = a × a and the weight of an edge b → a (for any a, b ∈ a) is δa,b.
definition 3.1 (gui et al.
we can now rephrase the above price-assignment problem: we seek an assignment to the variables {pa}a∈a such that pa − pb ≤ δa,b ∀a, b ∈ a (2) this is easily solved by looking at the allocation graph and applying a standard basic result of graph theory.
define δa,b := inf{vi(a)− vi(b) : vi ∈ vi, f(vi, v−i) = a}.
(strictly speaking, we should use a = f(vi, v−i) instead of a here.)
we seek an assignment to the variables {pa}a∈a such that vi(a) − vi(b) ≥ pa − pb for every a, b ∈ a and vi ∈ vi with f(vi, v−i) = a.
now fix a player i, and fix the declarations v−i of the others.
[15]) that the price pi can only depend on the alternative chosen and the others" declarations, that is, we may write pi : v−i × a → r. thus, truthfulness implies that for every i, every v−i ∈ v−i, and any vi, vi ∈ vi with f(vi, v−i) = a and f(vi, v−i) = b, we have vi(a) − pi(a, v−i) ≥ vi(b) − pi(b, v−i).
it is well known (see e.g.
a basic question that arises is given an algorithm f : v1 × · · · × vm → a, do there exist prices that will make the resulting mechanism truthful?
the mechanism is  truthful if for every i, every v−i ∈ v−i = q i =i vi , and any vi, vi ∈ vi we have vi(a) − pi(vi, v−i) ≥ vi(b) − pi(vi, v−i), where a = f(vi, v−i) and b = f(vi, v−i).
cycle monotonicity is best described in the abstract social choice setting: there is a finite set a of alternatives, there are m players, and each player has a private type  (valuation function) v : a → r, where vi(a) should be interpreted as i"s value for alternative a. in the scheduling domain, a represents all the possible assignments of jobs to machines, and vi(a) is the negative of i"s load in the schedule a. let vi denote the set of all possible types of player i. a  mechanism is a tuple (f, {pi}) where f : v1 × · · · × vm → a is the algorithm for choosing the alternative, and pi : v1 × · · · × vm → a is the price charged to player i (in the scheduling setting, the mechanism pays the players, which corresponds to negative prices).
the exposition here is largely based on [11].
we include a brief exposition on it for completeness.
one of the main contributions of this paper is to demonstrate that the monotonicity condition for multidimensional settings, which is sometimes called cycle monotonicity, can indeed be effectively utilized to devise truthful mechanisms.
most positive results for multidimensional domains have relied on explicit price specifications in order to prove truthfulness.
however for multidimensional  domains, the monotonicity condition is more involved and there has been no success in employing it in the design of  truthful mechanisms.
this seems to have been first observed for multidimensional domains by rochet [23] in 1987, and has been used successfully in  algorithmic mechanism design several times, but for  singledimensional domains.
although truthfulness is defined in terms of payments, it turns out that truthfulness actually boils down to a  certain algorithmic condition of monotonicity.
