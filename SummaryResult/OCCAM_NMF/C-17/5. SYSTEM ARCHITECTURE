thus, the use of sip makes this architecture more useful and interoperable with any other sip clients or servers. 
the entities described here are exhaustive and conform to the sip philosophy.
we will see this mechanism in some detail in the sequel.
the m-cs will be able to create a hierarchy of css inside a domain by adding one or more slave css (s-css) to accommodate all the active clients and prevent its own flooding at the same time.
its mechanism will be described in the next section.
this server will be used for handling media packets for the clients of the domain.
 one master conference server (m-cs) (simply a conference server (cs)) for each conference is created by the local sips when a conference starts.
if the load on a particular sips is too heavy, it can create another sips in the same domain so that the load will be shared.
sipss in different domains communicate with each other using sip messages as described in [16].
sips is entrusted with maintaining total service and has many advantages such as (a) it works as a centralized entity that can keep track of the activities of the uas in a conference; (b) it can do all the switching for providing pbx features; (c) it can locate the uas and invite them for a conference; (d) it can do the billing as well.
this physical implementation enables the handling of incoming/outgoing sip messages by one or another logical entity according to the needs.
in particular, it is considered as a physical implementation encompassing different logical roles, namely a sip proxy server, a sip registrar server, a sip redirect server and a sip b2bua (back-to-back user agent) [22].
[16].
 one sip server (sips) per domain, taking care of all the signaling aspects of the conference (clients joining, leaving, etc.)
these clients are thus not aware of the complex setting that supports the conference and this is highlighted below.
in our conferencing environment, these clients are regular sip user agents (sip uas), as defined in [22] so to gain in interoperability with other existing sip-compatible systems.
included in one and only one domain at a given instant, but can move from domain to domain (nomadism).
1. conference example - 3 domains containing the necessary entities so that the conference can take place.
every user is fig.
1):  an arbitrary number of end users (clients) that can take part in at most one audio conference at a time.
more explicitly, in each domain, we can identify several relevant logical components of a conferencing facility (fig.
this distributed assumption asks for distributed controlling and media handling solutions, as centralized systems would not scale for such very large conferences (vide section 4).
these domains are local area networks (lans), such as corporate or educational networks.
the participating users are grouped into several domains.
two issues must be taken care of when building a voip conferencing system: (i) the front-end, consisting of the application program running on the end-users" computers and (ii) the back-end that provides other application programs that facilitate conferencing and conference.
this view stems from an appraisal that vces will gain in importance in the future, as interactive audio conferences will be more popular because of the spread of the media culture around the world.
first, we do not restrict our conferencing system to work on small conferences only, but rather on large audio vces that have hundreds (or even thousands) of users across a wide area network (wan) such as the internet.
however, as this paper constitutes the continuation of our work started in [14] and furthered in [16], we will not present here all the details about the proposed entities and invite the readers to consult the papers mentioned above for a full and thorough description.
this section is dedicated to the description of the proposed system architecture.
