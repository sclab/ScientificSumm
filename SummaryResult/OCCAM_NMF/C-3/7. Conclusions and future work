this project is supported by a bsik grant from the dutch ministry of education, culture and science (oc&w) and is part of the ict innovation program of the ministry of economic affairs (ez). 
acknowledgments this work was carried out in the context of virtual laboratory for e-science project (ww.vl-e.nl).
this problem can be solved by implementing a hierarchy of coordinators: one  subcoordinator per cluster which collects and processes statistics from its cluster and one main coordinator which collects the information from the sub-coordinators.
finally, the centralized implementation of the adaptation coordinator might become a bottleneck for applications which are running on very large numbers of nodes (hundreds or thousands).
for  example, the node badness formula could be refined at runtime based on the effectiveness of the previous adaptation decisions.
another line of research that we wish to investigate is using feedback control to refine the adaptation strategy during the application run.
for example, the information about cpu load could be used to decrease the benchmarking frequency.
further research is also needed to decrease the benchmarking overhead.
this, however, requires grid schedulers with more sophisticated functionality than currently  exists.
future work will involve extending our adaptation strategy to support opportunistic migration.
we implemented our approach in the satin divide-and-conquer framework and evaluated it on the das-2 distributed supercomputer and demonstrate that our  approach can yield significant performance improvements (up to 60% in our experiments).
the application adapts fully  automatically to changing conditions.
our simple  adaptation strategy allows us to handle multiple scenarios typical for grid environments: expand to more nodes or shrink to fewer nodes if the application was started on an inappropriate number of  processors, remove inadequate nodes and replace them with better ones, replace crashed processors, etc.
if the weighted average efficiency raises above a certain level, new nodes are added.
the badness of the nodes is defined by a heuristic formula.
if the weighted  average efficiency drops below a certain level, the adaptation  coordinator starts removing worst nodes.
the adaptation decisions are based on the weighted average  efficiency - an extension of the concept of parallel efficiency defined for traditional, homogeneous parallel machines.
our approach also allows the application to adapt to the changing grid conditions.
a set free from various performance bottlenecks such as slow network connections or overloaded  processors.
this approach does not result in the optimal resource set, but in a reasonable resource set, i.e.
we use this knowledge to gradually refine the resource set by removing inadequate nodes or adding new nodes if necessary.
the performance monitoring allows us to learn certain application requirements such as the number of processors needed by the application or the application"s bandwidth  requirements.
we start the application on an arbitrary set of resources and monitor its performance.
we propose an approach that does not require in-depth knowledge about the application.
however, creating performance models is inherently difficult and requires knowledge about the application.
existing approaches to these  problems typically assume the existence of a performance model that allows predicting application runtimes on various sets of resources.
in this paper, we investigated the problem of resource selection and adaptation in grid environments.
