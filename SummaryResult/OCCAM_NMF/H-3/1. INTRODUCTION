experiments are presented in section 7 and conclusions in section 8. 
section 6 explains the method for parameter training.
then sections 4 and 5 describe respectively the domain model and the knowledge model.
section 3 presents our general model.
in section 2, we review some related work and introduce the principle of our approach.
this paper is organized as follows.
we will also show that it is possible to determine the query domain automatically, and this results in comparable effectiveness to a manual specification of domain.
the experiments clearly show that both types of context can result in significant improvements in retrieval effectiveness, and their effects are complementary.
our approach has been tested on several trec collections.
• multiple contextual factors: finally, we propose a framework based on language modeling approach to integrate multiple contextual factors.
• context within query: we integrate context words in term relations so that only appropriate relations can be applied to the query.
the domain related to a specific query is selected (either manually or automatically) for each query.
this paper aims to make contributions on the following aspects: • query-specific domain model: we construct more specific domain models instead of a single user model grouping all the domains.
the method we propose is to add context words into the condition of a relation, such as {java, program} → computer, to limit its applicability to the appropriate context.
we argue that the problem stems from the lack of necessary context information in relations themselves, and a more radical solution lies in the addition of contexts in relations.
although improvements are observed in some cases, they are limited.
in some previous studies [24][31], context words in a query have been used to select expansion terms suggested by term relations, which are, however, context-independent (such as program→computer).
these context words form a context within query.
so the important question is how we can serve these context words in queries to select the appropriate relations to apply.
looking at the two query examples, however, people can easily determine whether the relation is applicable, by considering the context words java and tv.
therefore, the relation has been applied to all queries containing program in previous studies, leading to a wrong expansion for tv program.
for example, usually little information is available to determine whether program→computer is applicable to queries java program and tv program.
however, the use of general knowledge gives rise to an enormous problem of knowledge ambiguity [31]: we are often unable to determine if a relation applies to a query.
the shortage of domain knowledge has led to the utilization of general knowledge for query expansion [31], which is more available from resources such as thesauri, or it can be automatically extracted from documents [24][27].
medicine).
however, domain knowledge is available only for a few domains (e.g.
using this relation, one would be able to expand the query program with the term computer.
another strong contextual factor identified in literature is domain knowledge, or domain-specific term relations, such as program→computer in computer science.
this method allows us to select more appropriate query-specific context around the query.
in this paper, we propose to model topic domains, among which the related one(s) will be selected for a given query.
a possible solution to this problem is to use query-related profiles or models instead of user-centric ones.
for example, if a user working in computer science issues a query java hotel, the documents on java language will be incorrectly favored.
however, a single profile for a user can group a variety of different domains, which are not always relevant to a particular query.
a user profile is used to favor the documents that are more closely related to the profile.
typically, a user profile is constructed to reflect the user"s domains of interest and background.
recent studies have investigated the integration of some contexts around the query [9][30][23].
it has been demonstrated that user"s query should be placed in its context for a correct interpretation.
so we call them context around query in this paper.
all these elements specify the contexts around the query.
these factors include, among many others, the user"s domain of interest, knowledge, preferences, etc.
as it has been found in many previous studies [2][14][20][21][26], contextual factors have a strong influence on relevance judgments.
in reality, query is always formulated in a search context.
in these studies, however, it has been generally assumed that query is the only element available about the user"s information need.
typical solutions include expanding either document or query representation [19][35] by exploiting different resources [24][31], using word sense disambiguation [25], etc.
these issues have been addressed in a large number of previous studies.
many relevant terms can be absent from queries and terms included may be ambiguous.
queries, especially short queries, do not provide a complete specification of the information need.
