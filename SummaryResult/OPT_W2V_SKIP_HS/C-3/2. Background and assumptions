We find it a reasonable assumption for a grid application, since applications for which the slowest processor becomes a bottleneck will not be able to  efficiently utilize grid resources.
We also assume that the  processors of the sites are accessible using a grid scheduling system, such as Koala (15), Zorilla (9) or GRMS (3).
However, we believe that our methodology can be used for other types of applications as well.
This can be achieved by using a dynamic load balancing  strategy, such as work stealing used by divide-and-conquer  applications (19).
In ( 23 ) , we showed how divide-andconquer applications 