In Step 2, it must be that C(O) = DS (CC3), so O is executed as-is, and the original of O is added to DS (according to Definition 3-Item 2).
COT-UNDO works by first creating an inverse O by  invoking makeInverse(O)2 , with its context C(O) := C(O) âˆª {O} (according to Definition 4-Item 2), and then invoking  COTDO to handle O.
In COT-UNDO, Undo(O) is interpreted as an inverse O, that is context-dependent on operations in C(O) and O itself.
After the generation of O1 , since C ( O1 ) = DS0 , O1 