The results of this research addresses primarily the issues of the second type of usage for our SAND Internet Browser (i.e., as a stand-alone application).
We have developed a centralized  peerto-peer approach to provide the users with the ability to transfer large volumes of data (i.e., whole data sets to the local database) more efficiently by better utilizing the  distributed network resources among active clients of a  clientserver architecture.
This way, users across various platforms can continuously access large spatial data on a remote location with little or 15 no need for any preceding software installation.
Section 5 outlines a sample SAND Internet Browser scenario for both of our remote access approaches.
We first aimed at developing a client-server architecture with efficient caching methods to balance local resources on one side and the  significant latency of the network connection on the other.
Interactive work with such large volumes of online spatial data is a challenging task.
The outcome of this research primarily addresses the issues of our first type of usage (i.e., as a remote browser application or an applet) for our browser and other similar applications.
We developed two separate methods for improving the system performance,  together, form a dynamic network infrastructure that is highly scalable and provides a satisfactory user experience for  interactions with large volumes of online spatial data.
We have been  developing an interactive browser for accessing spatial online databases: the SAND (Spatial and Non-spatial Data)  Internet Browser.
The second direction aims at helping users that wish to manipulate large volumes of online data for prolonged periods.
We call this architecture  APPOINTApproach for Peer-to-Peer Oï¬„oading the INTernet.
In this case, the SAND Internet Browser can still be utilized to view data from remote  locations.
SAND is a spatial database system developed at the  University of Maryland [12].
In addition, since Java has often been installed on target computers beforehand, our clients can be deployed on these systems with little or no need for any additional software installation or  customization.
We focused our efforts in two directions.
Power users can also upload large volumes of spatial data back to the remote server using this enhanced client.
The system can start being utilized immediately  without any prior setup which can be extremely beneficial in time-sensitive usage scenarios such as emergencies.
First, any standard Web browser can be used to retrieve and run the client piece (SAND Internet Browser) as a Java application or an applet.
Unfortunately, interactive remote access to spatial data slows to a crawl without proper data access mechanisms.
Section 3 focuses on APPOINT, our peer-to-peer approach.
The second option is to use a stand-alone SAND Internet Browser along with a locally-installed Internet-enabled database  management system (server piece).
The low bandwidth of this connection is the primary concern in both cases.
SAND Internet Browser is Java-based, which makes it  deployable across many platforms.
Section 2  describes our client-server approach in more detail.
The core functionality responsible for the actual database operations is performed by the server-based SAND system.
Users of this browser can interactively and visually manipulate spatial data remotely.
However, frequently accessed data can be downloaded to the local database on demand, and subsequently accessed locally.
There are two ways to deploy SAND.
The rest of this paper is organized as follows.
In recent years, enterprises in the public and private  sectors have provided access to large volumes of spatial data over the Internet.
Section 4 discusses our work in relation to existing work.
The client-side SAND Internet Browser provides a graphical user interface to the facilities of SAND over the Internet.
Section 6 contains  concluding remarks as well as future research directions. 
Users specify queries by  choosing the desired selection conditions from a variety of menus and dialog boxes.
