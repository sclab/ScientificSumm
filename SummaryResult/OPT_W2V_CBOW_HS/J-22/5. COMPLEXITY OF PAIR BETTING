Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.
It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.
Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H).
Assuming unit  orders and considering the order graph G(V, E), we restate the auctioneer"s optimal matching problem in a pair  betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t.
The above two lemmas prove that the maximum  worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.
First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.
Consider the graph of accepted orders for optimal  matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).
Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the  shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).
Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.
e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for  indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.
Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.
Note that this procedure gives a polynomial  transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard.
If the optimal indivisible match consists only of edge  disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.
The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.
set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.
• k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic.
Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.
This gives the maximum number of winning edges wmax.
Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.
It remains to verify that each iteration reduces k(G) by exactly 1.
When he accepts the original order graph G in full, his  worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.
Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are  provided computing the optimal worst-case profit from  accepting those orders is NP-hard.
If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.
All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.
With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).
Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.
Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.
Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.
Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.
Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.
If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).
All edges have equal weight of 1.
At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the  edgeremoval lemma.
The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper.
Unweighted minimum feedback arc set  problem is to find a feedback arc set with the minimum  cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.
√ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two  cycles, the dotted cycle in the center and the unique remaining cycle.
The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.
A B C D E F b b b b b b b b b Figure 2: An order graph.
Hence, if  inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.
By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.
Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).
If the edge prices are be = (1− ), then the  optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).
We reduce from the unweighted minimum  feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).
Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.
Assuming unit orders and considering the order graph G(V, E), we restate the auctioneer"s optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t.
However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.
Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.
• l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic.
The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).
G∗ is a subgraph of G, hence the minimum  number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).
Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.
Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.
The latter takes as  input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.
Thus computing each automatically gives the other, hence  computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.
We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the  latter contains only edges with unit weight.
Despite the potential profit increase for accepting divisible orders, the auctioneer"s optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.
Hence, finding the optimal worst-case profit is NP-hard.
e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.
Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.
We know that the auctioneer"s worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.
For any state s, the winning edges form a DAG.
The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.
The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.
• c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.
A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.
It can be shown that identifying such a non-negative  worstcase profit cycle in an order graph G can be achieved in polynomial time.
For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).
By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the  smallest number of edges, that has the same size of minimum feedback arc set as G .
• be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted  orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer.
By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one.
The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).
We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal  matching problem.
Hence the number of iterations is equal to k(G).
In each  iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).
Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.
Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal  worstcase profit.
Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.
finding the  optimal set of orders to accept, is NP-hard.
A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.
If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).
The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.
For any state s, all winning edges necessarily form a DAG.
If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the  condition in lemma 13 is not a necessary condition for the  existence of a match.
Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).
Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the  smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.
Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}).
The labels in the faces give the number of edges in the corresponding cycle.
Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).
Computing the maximum worst-case profit in indivisible pair betting is NP-hard.
5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.
k(G) is equal to the returned value from the procedure.
Next, we prove that the indivisible optimal matching problem is actually NP-hard.
(9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1.
Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive  worstcase profit.
Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.
Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.
We reduce from the unweighted minimum  feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.
Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.
We have the following lemmas.
There exists some such that when all edge prices be"s are (1 − ), l(G∗ ) = k(G).
It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the  corresponding worst-case profit.
Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.
Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.
We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.
Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .
Hence, the optimal matching problem for divisible orders is NP-hard.
Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.
Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).
We have the following lemma.
Suppose all edge weights are (1 − ).
Finding the optimal worst-case profit in divisible pair betting is NP-hard.
The left-hand side of the inequality (11)  represents the total payment that the auctioneer receives by  accepting every unit orders in the cycle C in full.
In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and  indivisible orders.
By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.
Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].
• H(V, E): a generic weighted directed graph of accepted orders.
An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.
The greedy algorithm gives at most an O( √  n)approximation to the maximum number of disjoint cycles.
Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).
l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .
The following procedure outputs k(G).
Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .
Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is  minimized.
Lemma 5 (Edge removal lemma).
When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 
Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.
We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O.
xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible  orders.
We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.
5.2 Optimal Divisible Matching When orders are divisible, the auctioneer"s optimal  matching problem is described in Definition 4 of Section 3.
Then by Lemma 5, k(H − {e}) = k(H) − 1.
Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.
A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).
Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.
Our hardness proof is based on the following lemmas.
Approxima334 tion algorithms for finding the maximum number of  edgedisjoint cycles have been considered by Krivelevich,  Nutov and Yuster [11, 19].
Consider an instance graph G of the minimum feedback arc set problem.
In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.
On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).
Because xe"s are less than 1, l(G∗ ) > k(G) is impossible.
5.1 Optimal Indivisible Matching The auctioneer"s optimal indivisible matching problem is introduced in Definition 3 of Section 3.
Where not stated, < 1/(2|E|) for a graph H(V, E).
Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle  meaning that there is some logical contradiction on the predicted orderings of candidates.
Finding the optimal match in indivisible pair betting is NP-hard.
In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).
Letters on edges  represent order prices.
In light of Lemma 15, one may expect that greedy  algorithms would give √ n-approximations at best.
From lemma 8, l(G∗ ) ≤ k(G).
Finding the optimal match in divisible pair betting is NP-hard.
In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.
When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).
We show that the linear program (7)  sometimes has a non-integer optimal solution.
There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.
In this section we show that a slight change of the  bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the  auctioneer.
Consider the graph in Figure 2.
Then, k(H − {e}) = k(H).
Assume the contrary, namely k(H−{e}) < k(H).
Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.
Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.
However, it does not imply whether the optimal matching problem, i.e.
When xe"s are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).
(10) Combining (9) and (10), we get xe ≥ 1.
Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.
In other cases, the value is determined in context.
Suppose k(G∗ ) < k(G).
Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].
Theorem 10 states that solving the linear program (7) is NP-hard.
332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).
Hence, we have the above relation.
Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.
Lemma 2.
Suppose l(G∗ ) < k(G).
Thus, l(G∗ ) = k(G).
Lemma 3.
However, we show that such greedy algorithm can give a very poor approximation.
We will use the following short fact repeatedly.
Lemma 9.
We will use this result in our complexity analysis on pair betting markets.
Lemma 7.
Lemma 13.
Lemma 14.
Lemma 11.
331 Proof.
Theorem 6.
The  contradiction arises.
Lemma 15.
(8) Proof.
Theorem 4.
Theorem 12.
Theorem 10.
Example 2.
Figure 1 exhibits such a situation.
