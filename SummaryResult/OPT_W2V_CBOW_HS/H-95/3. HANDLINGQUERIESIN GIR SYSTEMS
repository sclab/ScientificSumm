However, if the query is given in a single string, we require the identification of the associated < what,relation,where > triple, before disambiguating the where term into the corresponding ontology concepts.
Although there is no need for separating query string into the different components, we still need to  disambiguate the where term into a set of unique identifiers.
Most GIR queries can be parsed to < what,relation,where > triple, where the what term is used to specify the general  nongeographical aspect of the information need, the where term is used to specify the geographical areas of interest, and the relation term is used to specify a spatial relationship connecting what and where.
Input to the system is provided in two separate strings, one concerning the what term, and the other concerning the where.
This is the  hardest case, since we need to separate the query into the three different components, and then we need to disambiguate the where term into a set of unique identifiers.
near or contained at), and the where term should be disambiguated into a set of unique identifiers,  corresponding to concepts at the ontology.
In the cases where a query does not contain place references, we start by assuming that the top results from a search engine represent the most popular and correct context and usage for the query.
It uses Algorithm 1 to find the where term, disambiguating it into a set of ontology concepts.
We also check if the last word in the what term belongs to a list of exceptions, containing for instance first names of people in different languages.
then propose to use the distributional characteristics of  geographical scopes previously assigned to the documents corresponding to these top results.
3.1 From Place Names to Ontology Concepts A required task in handling GIR queries consists of associating a string containing a geographical reference with the set of  corresponding concepts at the geographic ontology.
The relation term is matched against a list of possible values (e.g.
In a previous work, we presented a text mining approach for assigning documents with corresponding  geographical scopes, defined at an ontology, that worked as an offline  preprocessing stage in a GIR system [13].
Different systems can use alternative schemes to take input queries from the users.
We Topic What Relation Where TGN concepts ML concepts Vegetable Exporters of Europe Vegetable Exporters CONTAINED-AT Europe 1 1 Trade Unions in Europe Trade Unions CONTAINED-AT Europe 1 1 Roman cities in the UK and Germany Roman cities CONTAINED-AT UK and Germany 6 2 Cathedrals in Europe Cathedrals CONTAINED-AT Europe 1 1 Car bombings near Madrid Car bombings NEAR Madrid 14 2 Volcanos around Quito Volcanos NEAR Quito 4 1 Cities within 100km of Frankfurt Cities NEAR Frankfurt 3 1 Russian troops in south(ern) Caucasus Russian troops in south(ern) CONTAINED-AT Caucasus 2 1 Cities near active volcanoes (This topic could not be appropriately handled - the relation and where terms are returned empty) Japanese rice imports (This topic could not be appropriately handled - the relation and where terms are returned empty) Table 1: Example topics from the GeoCLEF evaluation campaigns and the corresponding < what,relation,where > triples.
For the same name, a country is more likely to be referenced than a city, and in turn a city more likely to be referenced than a street.
For instance the name Lisbon can correspond to many different concepts at a geographical ontology, and type Algorithm 1 Matching a place name with ontology concepts Require: O = A geographic ontology Require: GN = A string with the geographic name to be matched 1: L = An empty list 2: INDEX = The position in GN for the first occurrence of a comma, semi-colon or bracket character 3: if INDEX is defined then 4: GN1 = The substring of GN from position 0 to INDEX 5: GN2 = The substring of GN from INDEX +1 to length(GN) 6: L1 = Algorithm1(O,GN1) 7: L2 = Algorithm1(O,GN2) 8: for each C1 in L1 do 9: for each C2 in L2 do 10: if C1 is an ancestor of C2 at O then 11: L = The list L after adding element C2 12: else if C1 is a descendant of C2 at O then 13: L = The list L after adding element C1 14: end if 15: end for 16: end for 17: else 18: GN = The string GN after removing case and diacritics 19: if GN contains a geographic type qualifier then 20: T = The substring of GN containing the type qualifier 21: GN = The substring of GN with the type qualifier removed 22: L = The list of concepts from O with name GN and type T 23: else 24: L = The list of concepts from O with name GN 25: end if 26: end if 27: return The list L qualifiers can provide useful information for disambiguation.
A query like Diamond trade in Angola and South Africa is Algorithm 2 Get < what,relation,where > from a query string Require: O = A geographical ontology Require: Q = A non-empty string with the query 1: Q = The string Q after removing case and diacritics 2: TOKENS[0..N] = An array of strings with the individual words of Q 3: N = The size of the TOKENS array 4: for INDEX = 0 to N do 5: if INDEX = 0 then 6: WHAT = Concatenation of TOKENS[0..INDEX −1] 7: LASTWHAT = TOKENS[INDEX −1] 8: else 9: WHAT = An empty string 10: LASTWHAT = An empty string 11: end if 12: WHERE = Concatenation of TOKENS[INDEX..N] 13: RELATION = An empty string 14: for INDEX2 = INDEX to N −1 do 15: RELATION2 = Concatenation of TOKENS[INDEX..INDEX2] 16: if RELATION2 is a valid geographical relation then 17: WHERE = Concatenation of S[INDEX2 +1..N] 18: RELATION = RELATION2; 19: end if 20: end for 21: if RELATION = empty AND LASTWHAT in an exception then 22: TESTGEO = FALSE 23: else 24: TESTGEO = TRUE 25: end if 26: if TESTGEO AND Algorithm1(WHERE) <> EMPTY then 27: if WHERE ends with AND SURROUNDINGS then 28: RELATION = The string NEAR; 29: WHERE = The substring of WHERE with AND  SURROUNDINGS removed 30: end if 31: if WHAT ends with AND or similar) then 32: < WHAT,RELATION,WHERE2 >= Algorithm2(WHAT) 33: WHERE = Concatenation of WHERE with WHERE2 34: end if 35: if RELATION = An empty string then 36: if WHAT = An empty string then 37: RELATION = The string DEFINITION 38: else 39: RELATION = The string CONTAINED-AT 40: end if 41: end if 42: else 43: WHAT = The string Q 44: WHERE = An empty string 45: RELATION = An empty string 46: end if 47: end for 48: return < WHAT,RELATION,WHERE > therefore appropriately handled.
If a significant portion of the results are assigned to the same scope, than the query can be seen to be related to the corresponding geographic concept.
The output is therefore a list with the possible concepts being  referred to by the user.
Algorithm 1, plus the ranking procedure, can already handle GIR queries where the where term is given separately from the what and relation terms.
Ideally, the geographical reference provided by the user should be disambiguated into a single ontology concept.
If the entire query string constitutes a geographical reference, we return a triple with the what term set to empty, the where term equaling the query string, and the relation term set the DEFINITION (i.e.
The considered type qualifiers should also described at the ontologies (e.g.
Top places at the  ontology tend to be more general, and are therefore more likely to be referenced in search engine queries.
For the top N documents given at the results, we check the  geographic scopes that were assigned to them.
Next, the algorithm tests different possible splits of the query, building the what, relation and where terms through  concatenations of the individual tokens.
The relation term can be either fixed (e.g.
Figure 1 illustrates how we propose to handle geographic queries in these first two schemes.
The most specific location is a sub-region of the most general, and the algorithm returns the most specific one (i.e.
However, the fact that a query can be associated with a geographical context may not be directly observable in the query itself, but rather from the results returned.
We also consider the cases where a geographical type expression is used to qualify a given name (e.g.
for Paris, France the algorithm returns the  ontology concept associated with Paris, the capital city of France).
Otherwise, we  return a triple with the what term equaling the query string, and the relation and where terms set as empty.
In a final step, we propose to sort this list, so that if a single concept is required as output, we can use the one that is ranked higher.
We have a simple tokenizer that uses the space character as a word  delimiter, but we could also have a tokenization approach similar to the proposal of Wang et.
Places names that occur more frequently over Web documents are also more likely to be referenced in search engine queries.
Input to the system is a textual query string.
Finally, if the geographical  reference in the query is complemented with an expression similar to and its surroundings, the spatial relation (which is assumed to be CONTAINED-AT if none is provided) is changed to NEAR.
The algorithm also handles query strings where more than one geographical reference is provided, using and or an equivalent preposition, together with a recursive call to Algorithm 2.
Input to the system is provided through a query string  together with an unambiguous description of the geographical area of interest (e.g.
We propose to do this according to the pseudo-code listed at Algorithm 1.
The first two schemes depend on place name disambiguation.
3.2 Handling Single Query Strings Algorithm 2 provides the mechanism for separating a query string into a < what,relation,where > triple.
Subregions of highly populated places are better known, and also more likely to be referenced in search engine queries.
This ensures that a query like Denzel Washington is appropriately handled.
The algorithm starts by tokenizing the query string into  individual words, also taking care of removing case and diacritics.
3.3 From Search Results to Query Locality The procedures given so far are appropriate for handling queries where a place reference is explicitly mentioned.
A common component is the algorithm for disambiguating place references into corresponding ontology concepts, which is described next.
The sorting procedure reflects the likelihood of each concept being indeed the one referred to.
We propose to rank concepts according to the following heuristics: 1.
Places that have more sub-regions tend to be more general, and are therefore more likely to be mentioned in search engine queries.
The geographical type expression associated with the  ontology concept.
always assume the near relation), specified together with the where string, or provided separately from the users from a set of  possible choices.
a type expression or a second qualifying location).
each geographic concept should be associated to a type that is also defined at the ontology, such as country, district or city).
One of the provided locations should be more  general and the other more specific, in the sense that there must exist a part-of relationship among the associated concepts at the  ontology (either direct or transitive).
Short names are more likely to be mentioned in search engine queries.
Algorithm 1 is used to check whether a where term  constitutes a geographical reference or not.
While the what term can assume any form, in order to reflect any information need, the relation and where terms should be part of a controlled vocabulary.
Number of descendants at the ontology.
In particular, the relation term should refer to a well-known geographical relation that the underlying GIR  system can interpret (e.g.
a sketch in a map, spatial coordinates or a selection from a set of possible choices).
In the future, we plan on testing if this different tokenization scheme can improve results.
The algorithm considers the cases where a second (or even more than one) location is given to qualify a first (e.g.
Google counts) for the geographical names.
Three general strategies can be identified, and GIR systems often support more than one of the following schemes: Figure 1: Strategies for processing queries in Geographical Information Retrieval systems.
these queries should be answered with information about the given place  references).
It makes recursive calls to match each location, and relies on  hierarchical part-of relations to detect if two locations share a common hierarchy path.
Population counts from direct ancestors at the ontology.
Number of ancestors at the ontology.
Note that is also the responsibility of the underlying GIR system to interpret the actual meaning of the different spatial  relations.
String size for the geographical names.
This assumption could even be relaxed, for instance by checking if the documents belong to scopes that are hierarchically related. 
which relies on Web occurrence  statistics to avoid breaking collocations [17].
No  disambiguation is required, and therefore the techniques described in this paper do not have to be applied.
near, at, around, or south of), corresponding to the operators that are supported by the GIR system.
Highly populated places are better known, and therefore more likely to be referenced in queries.
This is described in the following Section.
This pre-processing step is a fundamental stage of GIR, and it is reasonable to assume that this kind of information would be available on any system.
For instance, queries like recommended hotels for SIGIR 2006 or SeaFair 2006 lodging can be seen to refer to the city of Seattle.
Although they do not contain an explicit place reference, we expect results to be about hotels in Seattle.
Occurrence frequency over Web documents (e.g.
al., we could also attempt to process the results on-line, in order to detect place references in the documents [17].
If the algorithm succeeds in finding valid relation and where terms, then the corresponding triple is returned.
city of Lisbon or state of New York).
However, this is not always possible, since the user may not provide all the required information (i.e.
However, a GIR system already requires the offline stage.
Population count.
Similarly to Wang et.
Paris, France).
