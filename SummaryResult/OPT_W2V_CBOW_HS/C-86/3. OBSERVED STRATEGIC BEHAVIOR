Its key differences were that (i) it was a sealed-bid auction and (ii) it allocated resources over a 148-node × 104-hour window with bid start times constrained to be within the next 72 hours (the reason for this will become apparent when we discuss strategy S3).
The problem here is that a user can game the system by observing other bids and simply requesting fewer hours.
Since the high value bid is likely to win due to the greedy nature of the auction clearing algorithm and since all other users at the time were all requesting 97 motes (based on the historical information and the fact that the SenSys "05 deadline was imminent requiring experiments at scale), no other bids could backfill the remaining slots; the user"s remaining bids would then fit those slots at a low price.
Because users are allowed to modify their bids and A1 was an open auction, iteratively refining one"s bid value in response to other users" bid values should, in theory, have no effect on who wins the auction; users with higher valuations-who may also be  underbiddingshould eventually outbid those with lower valuations after sufficient iteration.
Since 16 columns will roll into the resource window before 32 columns, a user bidding for 16 hours outbids a 32-hour bid independent of each bid"s value because resources for the 32-hour bid are not available when the auction clears.
In the limit, all users bid for 1-hour blocks, thereby eliminating the possibility of obtaining longer  resource allocations which may be critical to the underlying SensorNet experiment.
In the auction sandwich attack, a user exploits two pieces of  information: (i) historical information on previous winning bids to estimate the current workload and (ii) the greedy nature of the auction clearing algorithm.
have their first opportunity for an allocation when 32 new columns become available.
3.1 Auctions and virtual currency Our first auction mechanism, A1 was a first-price,  openbid (i.e., users can see all outstanding bids from competing users) combinatorial auction that cleared every hour based on a greedy algorithm.
During this time period, we  observed three different types of strategic behavior (S1-S3), the most recent of which (S3) resulted in significant gaming of the system.
A user bidding for, say, 32 hours thus needs to minimally wait 32 hours for 32 new 148-node × 1-hour columns of resources to become available.
While A2 mitigated or eliminated the known shortcomings of A1-in particular the vulnerability strategy S3 exploited that prompted the change in the first place-it was soon discovered that A2 remained vulnerable to another strategy, S4, which was predictably discovered and exploited by a motivated user community.
When the entire 148-node × 72-hour window is allocated, a pending 16-hour bid and a pending 32-hour bid will both Time Project Value Nodes Hours 04-02-2005 03:58:04 U2 1590 97 32 04-02-2005 05:05:45 U1 5 24 4 04-02-2005 05:28:23 U1 130 40 4 04-02-2005 06:12:12 U1 1 33 4 Table 1: Strategy S4 on 97 MICA2 motes.
In this particular case, a user employs a strategy of splitting a bid for 97 MICA2 motes across several bids, only one of which has a high value per node hour.
While bidding proxies that automatically adjust user bids in response to other bids are effective in single-good auctions, it is unclear how such proxies could be generally effective in a combinatorial auction without actually implementing the same clearing algorithm used by Mirage (which could be computationally expensive).
Second, should other users enter competing bids before the auction clears, users will need to refine their bids to allow the system to compute an allocation that maximizes aggregate utility.
At that point, both the 16-hour bid and the 32-hour bid will have an opportunity to obtain an allocation.
As mentioned, a key difference of A2 compared to A1 is that it allocates resources over a 104-hour window with bid start times constrained to be within the next 72 hours.
While underbidding in the absence of competition is not a problem per se, it does raise two 101 issues.
The primary purpose of this policy is to  reward users who refrain from using the system during times of peak demand and penalize those who use resources  aggressively during periods of scarcity.
Of course, if other users also begin bidding for 16 hours, this opportunity disappears but then moves to durations shorter than 16 hours.
In this section, we describe the two auction mechanisms A1 and A2, Mirage"s virtual currency policy, the four types of observed strategic behavior S1-S4, and their impact on aggregate utility delivered.
Consequently, the user  backfills on the remaining 57 nodes using two bids: a 24-node bid and a 33-node bid, both at low valuations. 
In each round of auction, the current set of bids was sorted by value per node hour and bids were greedily fit into the remaining portion of the current window of available resources.
Once funded, a user can then begin to bid and acquire testbed resources through Mirage.
What we did not anticipate, however, was what would happen when the entire window of resources becomes fully allocated.
In Mirage, we addressed the issue of time by  selling resources over a rolling window 72 hours into the future with users able to bid for blocks 1, 2, .
In expanding the window and expanding (while still  constraining) the range of start times, A2 eliminates strategy S3.
During the past four months of operation, Mirage has  employed two distinct auction mechanisms and observed four primary types of strategic behavior from users.
Usability overhead matters: users in Mirage bid once and perhaps modify their bid a second time.
With rampant gaming of the system occurring through S3, we responded by implementing and deploying auction A2.
Unlike auctions for  tangible goods, resource allocation in computer systems  fundamentally involves time, since sharing of resources implies that a resource cannot be assigned to a given user/process forever.
Here, user U1 uses three bids, the main one being a bid with value 130 (value per node hour 130/(4 · 40) = 0.813) which is used to outbid a bid with value 1590 (value per node hour 1590/(32 · 97) = 0.0512).
In such an auction, a user"s optimal strategy is always to bid truthfully the first time.
In summary, S1 and S2 both point toward the need for a strategyproof auction mechanism in Mirage.
Our virtual currency policy assigns two numbers to each user"s bank account: a baseline value and a number of shares.
In both auctions, winning bids from previous auctions were publicly visible for price feedback and the same  virtual currency policy was used.
3.2 Strategic behavior The following are descriptions of the four primary bidding strategies observed over the past four-months.
In this scenario, which was the norm near the recent SenSys "05 deadline, the entire 148-node ×  72hour window is allocated.
Thus, rational users will never underbid and iterative bidding is unnecessary.
In practice, we observed this type of gaming push winning bid durations down to 2 hours.
Consequently, when users would observe a lack of demand, some users would bid correspondingly low amounts rather than their true values.
For example, one user would frequently bid 1 or 2 when no other bids were present.
Like A1, our second auction, A2, was also based on a greedy clearing algorithm.
These rewards result in transient bursts of credit and are balanced by another mechanism, a savings tax, to prevent idle users from sitting on large amounts of excess credit forever (a use it or lose it policy).
The end result is that inefficiencies may arise since the auction may clear with bid values that are understated.
This second problem then leads to strategy S2.
Once the high valued 40-node bid has occupied its portion of the resource window, no other 97-node bids can be matched.
Bank accounts for external users were assigned baseline and shares value set to 1000, while bank accounts for internal users (U4 and U5) were assigned larger allocations with baseline and share values set to 2000.
We are  currently in the process of designing a mechanism to address the weakness in A2 that is abused by S4.
In each round of the auction, accounts for winning bids are debited and the proceeds are redistributed through a proportional profit-sharing policy based on bank account share values.
Such allocations are then determined by the usual greedy clearing algorithm.
First, if a seller was collecting revenue for profit, such bidding leads to suboptimal outcomes for the seller.
When created, each bank  account is initialized to its baseline value.
While A2 eliminated S3 and significantly reduced S1 and S2, it still retained a weakness of A1 that had yet to be discovered and exploited.
In response to the impact of S3, we deployed a second mechanism, A2, on March 29, 2005 (Day 111 in Figures 1 and 3).
In A1, all outstanding bids were publicly visible.
The problem is that users do not  behave this (rational) way.
However, this remains an open research problem for repeated combinatorial auctions.
S2: iterative bidding.
Of course, ideally we would develop a provably strategyproof mechanism.
S1: underbidding based on current demand.
The first auction mechanism, A1, was deployed from December 9, 2004 to March 28, 2005.
In our deployment, an administrator set the  virtual currency policy.
, or 32 hours in length.
S3: rolling window manipulation.
S4: auction sandwich attack.
An actual occurrence is shown in Table 1.
