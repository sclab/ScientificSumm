A single term in A means that the relation is applicable to all the queries containing that term.
Adding more terms into the condition will create many rarely applicable relations; • In most cases, an ambiguous word such as Java can be effectively disambiguated by one useful context word such as computer or hotel; • The addition of more terms will also lead to a higher space and time complexity for extracting and storing term relations.
We use the following pointwise mutual information as a measure of relatedness (MI > 0) [6]: )()( ),( log),( kj kj kj tPtP ttP ttMI = • The probability of a relation should be higher than a threshold (0.0001 in our case); Having a set of relations, the corresponding Knowledge model is defined as follows: )|()|()|( )|()|()|( 00 )( 0 )( QkQjkj Qtt i Qkjkj Qtt i K Q tPtPtttP ttPtttPtP kj kj θθ θθ ∑ ∑ ∈ ∈ = = (10) where (tj tk)∈Q means any combination of two terms in the query.
The solution we propose is to add more context terms into A, so that it is applicable only when all the terms in A appear in a query.
In general, a term relation can be represented as A→B.
The term added in the condition specifies a stricter context to apply the relation.
For example, instead of creating a context-independent relation Java→program, we will create {Java, computer}→program, which means that program is selected when both Java and computer appear in a query.
In order to reduce space requirement, we further apply the following filtering criteria: • The two terms in the condition should appear at least certain time together in the collection (10 in our case) and they should be related.
TERM RELATIONS FROM DOCUMENTS In this paper, we extract term relations from the document collection automatically.
Both A and B have been restricted to single terms in previous studies.
This is a direct extension of the translation model proposed in [3] to our context-dependent relations.
We call this type of relation context-dependent relation.
In principle, the addition is not restricted to one term.
Windows of fixed size (10 words in our case) are used to obtain co-occurrence counts of three terms, and the probability )|( kji tttP is determined as follows: ∑= lt kjlkjikji tttctttctttP ),,(),,()|( (9) where ),,( kji tttc is the count of co-occurrences.
However, we will make this restriction due to the following reasons: • User queries are usually very short.
As we explained earlier, this is the source of many wrong applications.
Here, we use a simple co-occurrence analysis.
The extraction of relations of type {tj,tk} → ti can be performed using mining algorithms for association rules [13].
The score according to the Knowledge model is then defined as follows: ∑ ∑∈ ∈ = Vt DiQkQjkj Qtt iK i kj tPtPtPtttPDQScore )|(log)|()|()|(),( 00 )( θθθ (11) Again, only the top 100 expansion terms are used. 
