Their adaptive middleware uses utility functions to choose the best context provider (given the QoC requirements of  applications and the QoC of alternative means of context  acquisition).
Judd and Steenkiste in [5] describe a generic interface to query context services  allowing clients to specify their quality requirements as bounds on accuracy, confidence, update time and sample interval.
The  framework supports inconsistency detection based on a semantic matching and inconsistency triggering model, and  inconsistency resolution with proactive actions to context sources.
Our approach can reduce the burden of the middleware, because we do not need the  middleware to provide a context selection mechanism.
In our approach, we let distributed context providers themselves decide who can provide  appropriate context information.
present a context service which accepts freshness and confidence meta-data from context sources, and passes this along to clients so that they can adjust their level of trust accordingly.
They also outline a  software infrastructure that supports the management and use of imperfect context information.
Most approaches to provide appropriate context utilize a centralized arbitrator.
[10] presents a framework for  realizing dynamic context consistency management.
They characterize various types and sources of imperfect context information and present a set of novel context modelling constructs.
Henricksen and Indulska propose an approach to modelling and using  imperfect information in [3].
In [4], Huebscher and McCann have proposed an adaptive middleware design for context-aware applications.
Also, it can guarantee context providers" interests. 
In our negotiation model, the calculation of utility function Uc was inspired by this approach.
It can avoid the serious consequences caused by a breakdown of the arbitrator.
In [6], Lei et al.
