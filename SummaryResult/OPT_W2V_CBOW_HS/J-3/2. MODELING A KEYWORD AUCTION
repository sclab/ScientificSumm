To find a bid distribution B that maximizes clicks subject to a budget, we simply draw a vertical line on the plot where the cost is equal to the budget, and find the highest point on this line in the convex hull.
However, because of the structure of the graph, if the advertiser sets bu to $1, then his effective bid is $1 on both x and y.
Suppose we would like to solve the budget optimization problem for a single query landscape.5 As we increase our bid from zero, our cost increases and our expected number of clicks increases, and so we simply submit the highest bid such that we remain within our budget.
We assume that the auction is a  generalized second price (GSP) auction [5, 7]: the advertisers are ranked in decreasing order of bid, and each advertiser is assigned a price equal to the amount bid by the advertiser below them in the ranking.4 In sponsored search auctions, this advertiser pays only if the user actually clicks on the ad.
We use the term spend to denote the total cost; similarly, we use the term traffic to denote the total number of clicks: spend(a)= X q∈Q costq(bq(a)); traffic(a)= X q∈Q clicksq(bq(a)) We also allow randomized strategies, where an advertiser gives a distribution A over bid vectors a ∈ R |K| + .
Each piecewise linear section of the curve represents the incremental number of clicks and cost incurred by moving one"s bid from one  particular value to another.
The advertiser can control their individual keyword bid vector a ∈ R |K| + specifying a bid ak for each keyword k ∈ K. (For now, we do not consider randomized bids, but we will introduce that shortly.)
2.1.2 Query Landscapes We can summarize the data contained in the functions cost(b) and clicks(b) as a collection of points in a plot of cost vs. clicks, which we refer to as a landscape.
Suppose that we bid b on some keyword that matches the user"s query, then our position is defined by the largest b[i] that is at most b, that is, pos(b) = arg max i (b[i] : b[i] ≤ b).
3 This type of strategy can also be interpreted as bidding one value (on all keywords) for part of the day, and a different value for the rest of the day.
Query y has two positions with ctrs αy [1] = αy [2] = 1.0, and bids by 1 = $ and by 2 = $1 To get any clicks from x, an advertiser must bid at least $1 on u.
(1) Since we only pay if the user clicks (and that happens with probability α[i]), our expected cost for winning position i 4 Google, Yahoo!
2.1.4 Multiple Queries: a Knapsack Problem As a warm-up, we will consider next the case when we have a set of queries, each which its own landscape.
Here we graph clicks as a function of cost.
(costq(b), clicksq(b)) can only take on one of a finite set of values Vq = {(cost[1], α[1]), .
2.2 Keyword Interaction In reality, search advertisers can bid on a large set of  keywords, each of them qualifying for a different (possibly  overlapping) set of queries, but most search engines do not  allow an advertiser to appear twice in the same search results page.7 Thus, if an advertiser has a bid on two different keywords that match the same query, this conflict must be resolved somehow.
Thus, given the point on the convex hull, it is easy to compute a distribution on two bids which led to this point.
We use costq(b) and clicksq(b) to denote the expected cost and clicks that result from having a bid b that qualifies for a query  auction q, and thus costq(b) = α[i] · b[i] where i = pos(b), (2) clicksq(b) = α[i] where i = pos(b).
One problem we see right away is that since there are only a finite set of points in this landscape, we may not be able to target arbitrary budgets efficiently.
For example, for a query with four slots, a landscape might look like Table 1. bid range cost per click cost clicks [$2.60,∞) $2.60 $1.30 .5 [$2.00,$2.60) $2.00 $0.90 .45 [$1.60,$2.00) $1.60 $0.40 .25 [$0.50,$1.60) $0.50 $0.10 .2 [$0,$0.50) $0 $0 0 Table 1: A landscape for a query It is convenient to represent this data graphically as in Figure 1 (ignore the dashed line for now).
Suppose you have two keywords K = {u, v} and two queries Q = {x, y} and edges E = {(u, x), (u, y), (v, y)}.
42 $0.50 $1.00 $1.50 .1 .2 .3 .4 .5 Clicks Cost Figure 1: A bid landscape.
If an advertiser is bidding on one keyword, subject to a budget U, then the optimal strategy is to pick a convex combination of (at most) two bids which are at the endpoints of the line on the convex hull at the highest point for cost U.
In this section we define the notion of a query landscape that describes the relationship between the advertiser"s bid and what will happen on this query as a result of this bid[9].
However, since each curve is concave, the pieces that come from a particular query curve are in increasing order of cost-per-click; thus from each landscape we have chosen for our knapsack a set of pieces that form a prefix of the curve.
In order to place an ad on this page, we must enter the auction that is carried out among all advertisers that have submitted a bid on a keyword that matches the user"s query.
The ctr is a measure of how likely it is that our ad will receive a click if placed in position i.
More precisely, for each piece connecting two consecutive bids b and b on the convex hull, we  create a knapsack item with value [clicks(b ) − clicks(b )] and size [cost(b ) − cost(b )].
, b[p]) denote the bids of the top p advertisers in this query auction.
Observe that in this graph, the cpc (cost(b)/clicks(b)) of each point is the reciprocal of the slope of the line from the origin to the point.
Suppose in the example from Table 1 and Figure 1 that we had a budget 5 Of course it is a bit unrealistic to imagine that an advertiser would have to worry about a budget if only one user query was being considered; however one could imagine multiple instances of the same query and the problem scales.
Find: a distribution A over bid vectors a ∈ R |K| + such that spend(A) ≤ U and traffic(A) is maximized.
Graphically, the possible values of (cost(B), clicks(B)) lie in the convex hull of the landscape points.
In practice, the budget is often an average daily budget, and thus we don"t worry if we exceed it one day, as long as we are meeting the budget in expectation.
The  resulting spend and traffic are given by spend(A)=Ea∼A[spend(a)]; traffic(A)=Ea∼A[traffic(a)] We can now state the problem in its full generality: Budget Optimization Input: a budget U, a keyword-query graph G = (K ∪ Q, E), and landscapes (costq(·), clicksq(·)) for each q ∈ Q.
In this reduction to knapsack we have ignored the fact that some of the pieces come from the same landscape and cannot be treated independently.
, b[p]) that correspond to the bids of other advertisers, we have: costq(b[i])/clicksq(b[i]) = b[i], i ∈ [p].
We use R+ to denote the nonnegative reals.
We will refer to such an auction as a query auction, to  emphasize that there is an auction for each query rather than for each keyword.
Further, either the advertiser or the search engine (possibly both), monitor the cost incurred over the day; hence, the advertiser"s bid can be changed to zero for part of the day, so that the budget is not overspent.6 Thus in the  remain6 See https://adwords.google.com/support/bin/answer.
41 An advertiser makes a single bid for a keyword that  remains in effect for a period of time, say one day.
We regard these pieces as items in an instance of fractional knapsack with value equal to the incremental number of clicks and size equal to the  incremental cost.
Since cost(b), clicks(b) and cost(b)/clicks(b) are non-decreasing, the slope of the line from the origin to successive points on the plot decreases.
We denote the highest (most favorable) position by 1 and lowest by p. Associated with each position i is a value α[i] that denotes the click-through rate (ctr) of the ad in position i.
Thus he must trade-off between getting the clicks from x and getting the bargain of a click for $ that would be possible otherwise. 
We want to bid on each query independently subject to our budget: the resulting optimization problem is a small generalization of the fractional knapsack problem, and was solved in [9].
Now we define cost(B) = Eb∼B[cost(b)] and clicks(B) = Eb∼B[clicks(b)].
The first step of the algorithm is to take the convex hull of each landscape, as in Figure 1, and remove any  landscape points not on the convex hull.
(3) The following observations about cost and clicks follow  immediately from the definitions and equations (1), (2) and (3).
Therefore, we think of our budget constraint as soft, that is, we only require that our expected cost be less than the budget.
2.1 Landscapes We begin by considering the case of a single keyword that matches a single user query.
If the query matches a keyword that has been bid on by an advertiser, then the advertiser is entered into an auction for the available ad slots on the results page.
Given any  bidding strategy, randomized or otherwise, the resulting cost is itself a random variable representing the expected cost.
Let B be a distribution on bids b ∈ R+.
We assume throughout this work that that α[i] ≤ α[j] if j < i, that is, higher positions receive at least as many clicks as lower positions.
This point will always be the convex combination of at most two original landscape points which themselves lie on the convex hull.
Given a particular bid vector a on the keywords, we use the resolution rule of taking the maximum to define the effective bid on query q as bq(a) = max k:(k,q)∈E ak.
We now formalize a model of keyword bidding and define an optimization problem that captures this goal.
and MSN all use some variant of the GSP auction.
Bidding more than $2.60 is not an option, since we would then incur a cost of $1.30 and overspend our budget.
43 number of clicks and pays some cost on each keyword.
In the Google auction, the advertisers" bids are multiplied by a quality score before they are ranked; our  results carry over to this case as well, which we omit from this paper for clarity.
Each q ∈ Q has an  associated landscape, as defined by costq(b) and clicksq(b).
der of this paper, we will formulate a budget constraint that only needs to be respected in expectation.
An advertiser bids on a keyword, which we can think of as a word or set of words.
For bids (b[1], .
We describe an auction from an advertiser"s point of view.
Thus if our budget constraint is a hard budget, we have to deal with the difficulties that arise if our strategy would be over budget.
For example, if an advertiser has a bid out on the keywords shoes and high-heel, then if a user issues the query high-heel shoes, it will match on two  different keywords.
Both costq(b) and clicksq(b) are non-decreasing  functions of b.
In the conclusion we point out that for the VCG auction, the bidding  optimization problem becomes quite easy.
2.1.1 Positions, bids and click-through rate The search results page for a query contains p possible positions in which our ad can appear.
By submitting a bid vector a, the advertiser receives some 7 See https://adwords.google.com/support/bin/answer.
When the context is clear, we drop the subscript q.
The advertiser could also bid different amounts on multiple keywords, each matching a (possibly overlapping) set of user queries.
2.1.3 Randomized strategies To rectify this problem and better utilize our available budget, we allow randomized bidding strategies.
Each user query might have a different set of  advertisers competing for clicks.
Also, cost-per-click (cpc) costq(b)/clicksq(b) is non-decreasing in b.
There is one subtlety in this formulation.
Each auction mechanism will result in a different sort of optimization problem.
Since the auction is a generalized second price auction, higher bids win higher positions; i.e.
A natural rule is to take the keyword with the highest bid, which we adopt here, but our results apply to other resolution rules.
We conclude this section with a small example to illustrate some feature of the budget optimization problem.
The search engine specifies, in advance, a rule for resolution based on the query the keyword and the bid.
Bidding between $2.00 and $2.60 uses only $0.90, and so we are under-spending.
The ultimate goal of an advertiser is to maximize traffic to their website, given a certain advertising budget.
We model the keyword interaction problem using an  undirected bipartite graph G = (K ∪ Q, E) where K is a set of keywords and Q is a set of queries.
For notational convenience, we assume that b[0] = ∞ and b[p] = α[p] = 0.
We then emulate the greedy  algorithm for knapsack, sorting by value/size (cost-per-click), and choosing greedily until the budget is exhausted.
3. costq(b)/clicksq(b) ≤ b.
What constitutes a match varies depending on the search engine.
Suppose query x has one position with ctr αx [1] = 1.0, and there is one bid bx 1 = $1.
The  keyword could match many different user queries throughout the day.
This definition will be central to the discussion as we continue to more general cases.
py?answer=14179, for example.
would be cost[i] = α[i] · b[i], where i = pos(b).
An edge (k, q) ∈ E means that keyword k matches query q.
py?answer=22183, for example.
This is represented in Figure 1 by the dashed line.
Let (b[1], .
For b ∈ R+, 1.
Users of the search engine submit queries.
Also, other auctions besides GSP have been considered; e.g., the Vickrey Clark Groves (VCG)  auction [14, 4, 7].
, (cost[p], α[p])}.
The ctr can be measured empirically using past history.
This condition is slightly weaker than concavity.
b[i] ≥ b[i + 1].
Observation 1.
Summarizing, Lemma 1.
of $1.00.
