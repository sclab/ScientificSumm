A transition is enabled in a CPN if and only if all the 2 A multi-set (or bag) is an extension to the notion of set, allowing the possibility of multiple appearances of the same element.
In order to answer this question, we first translate the snapshot of the normative structure to the corresponding CPN and then execute the finite occurence sequence of markings and steps, verifying the conflict-freedom of each marking as we go along.
The target transition of this arc, not only moves a token on to the next state of this CPN, but also places a token in the place  corresponding to the appropriate normative scene in the CPN model of the normative structure (via arc ‘2").
Thus, a marking of a CPN is a function which maps each place into a multi-set2 of tokens of the correct type.
Having mapped the normative structure to a CPN, we now add CPN models of the agents" interactions.
on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 639 variables in the expressions of its incoming arcs are bound to some value(s) (each one of these bindings is referred to as a binding element).
A state of a CPN is called a marking.
Summing up, CPNs provide us with all the necessary features to formally reason about normative structures given that an adequate mapping is provided.
Formally, a step is a non-empty and finite multi-set over the set of all binding elements.
A CPN is a tuple Σ, P, T, A, N, C, G, E, I where: (i) Σ is a finite set of non-empty types, also called colour sets; (ii) P is a finite set of places; (iii) T is a finite set of transitions; (iv) A is a finite set of arcs; (v) N is a node function defined from A into P × T ∪ T × P; (vi) C is a colour function from P into Σ; (vii) G is a guard  function from T into expressions; (viii) E is an arc expression function from A into expressions; (ix) I is an initialisation function from P into closed expressions; Notice that the informal explanation of the enabling and occurrence rules given above provides the foundations to understand the behaviour of a CPN.
5.2 Properties of Normative Structures Having defined the mapping from normative structures to Coloured Petri Nets, we now look at properties of CPNs that help us understand the complexity of conflict detection.
The set of all possible markings reachable for a net Net from a marking M is called its reachability set, and is denoted as R(Net, M).
The initialisation  function I is defined as I(p) = Δs (∀s ∈ S where p is obtained from s using the mapping; remember that s = ids, Δs ).
Given a marking Mi, this marking is  conflictfree if ¬∃p ∈ P. ∃np1, np2 ∈ Mi(p) such that np1.mode = Obl and np2.mode = Prh and np1.illoc and np2.illoc unify under a valid substitution.
This complex type is structured as follows (we use CPN-ML [4] syntax): color NPT = with Obl | Per | Prh | NoMod color IP = with inform | declare | offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content: string time : int color NP = record mode : NPT illoc : UTT Modelling illocutions as norms without modality (NoMod) is a formal trick we use to ensure that sub-nets can be  combined as explained below.
Given a marking Mi, a finite occurrence  sequence Si, Si+1, ..., Sn is called conflict-free, if and only if Mi[Si > Mi+1 .
Conflict-freedom of an occurrence sequence in the CPN that represents the normative structure can also be done in polynomial time since this sequence is  deterministic given a snapshot.
In accordance with Petri nets, the states of a CPN are represented by means of places.
The lower half of figure 3 shows part of a CPN model of an agent protocol where the arc denoted with ‘1" represents some utterance of an illocution by an agent.
This  reachability problem is known to be NP-complete for ordinary Petri Nets [22] and since CPNs are functionally identical, we cannot hope to verify conflict-resistance of a normative structure off-line in a reasonable amount of time.
We are  presenting a mapping f from one to the other, in order to provide semantics for the normative structure and prove properties about it by using well-known theoretical results from work on CPNs.
It consists of a number of tokens positioned on the individual places.
In our opinion, a true-concurrency semantics is easier to work with because it is the way we envisage the connection between the coordination level and the normative level of a multi-agent system to be.
The types of a CPN can be arbitrarily complex.
An incoming arc into a transition from a place indicates that the transition may remove tokens from the corresponding place while an outgoing arc indicates that the transition may add tokens.
Moreover, we say that marking M is directly reachable from marking M by the occurrence of step S, and we denote it by M[S > M .
A is a finite set of arcs and N is a node function, such that ∀a ∈ A ∃a ∈ Ain ∪Aout .
Transition ‘3" finally could propagate that token in form of an obligation, for example.
It corresponds to the reachability problem in a CPN: can a state be reached or a marking achieved, that contains a conflict?.
Putting all the elements above together we obtain a formal definition of CPN that shall be employed further ahead for mapping purposes.
Each token carries a data value which has the type of the corresponding place.
In addition to the arc expressions, it is possible to attach a boolean guard expression (with variables) to each transition.
However, the main question we would like to investigate, is whether or not a given normative structure is  conflictresistant, that is, whether or not the agents enacting the MAS are able to bring about conflicts through their actions.
The Sixth Intl.
S → P B → T Lin ∪ Lout → E The set of types is the singleton set containing the colour NP (i.e.
Let step S be enabled in a marking M. Then, S may occur, changing the marking M to M .
The mapping f makes use of correspondences between normative scenes and CPN places, normative  transitions and CPN transitions and finally, between arc labels and CPN arc expressions.
Checking conflict-freedom of a marking can be done in polynomial time by checking all places of the CPN for  conflicting tokens.
Such a snapshot of a normative structure corresponds to a marking in the mapped CPN.
We make use of the reachability set R to define a situation in which agents cannot cause conflicts.
Thus, from a given marking, many different occurrence sequences are possible depending on the agents" actions.
On the other hand, the functional programming languages used by CPNs provide the primitives for the definition of data types and the manipulation of their data values.
640 The Sixth Intl.
Actions in a CPN are represented by means of transitions.
Whether or not a normative structure is designed safely corresponds to checking the conflict-resistance of the  initial marking M0.
Mn[Sn > Mn+1 and Mk is conflict-free for all k such that i ≤ k ≤ n + 1.
The exact number of tokens and their data values are determined by the arc expressions, which are encoded using the programming language chosen for the CPN.
Given a net N, a marking M is conflict-resistant if and only if all markings in R(N,M) are conflict-free.
We are not making use of the guard function G. In future work, this function can be used to model constraints when we extend the  expressiveness of our norm language.
A finite occurrence sequence is a finite sequence of steps and markings: M1[S1 > M2 .
We then map NSs to CPNs and analyse their properties.
Last but not least, CPNs have a well-defined semantics which unambiguously defines the behaviour of each CPN.
But unlike Petri Nets, each place has an associated data type determining the kind of data which the place may contain.
One question we would like to answer is, whether at a given point in time, a given normative structure is conflict-free.
Furthermore, CPNs have a large number of formal analysis methods and tools by which properties of CPNs can be proved.
Each form of agent interaction (i.e.
In general, a place may contain two or more tokens with the same data value.
As soon as one includes the possibility of actions (or  utterances) from autonomous agents, one looses determinism.
Finally, the colour function C assigns the colour NP to  every place: C(p) = NP (∀p ∈ P).
The same is true for a Coloured Petri Net.
Another interesting question would be, whether a conflict will occur from such a snapshot of the system by  propagating the normative positions.
In accordance with ordinary Petri nets, the concurrent behaviour of a CPN is based on the notion of step.
If so, the transition may occur by removing tokens from its input places and adding tokens to its output places.
These  nondeterministic CPNs feed tokens into the CPN that models the normative structure.
In this section we introduce some background knowledge on CPNs assuming a basic understanding of ordinary Petri Nets.
This leads to the introduction of non-determinism into the combined CPN.
One often refers to the token values as token colours and one also refers to the data types as colour sets.
Now, verifying conflict-resistance of a marking becomes a very difficult task.
On the one hand, Petri nets provide the primitives for the description of the synchronisation of concurrent processes.
Mn[Sn > Mn+1 such that n ∈ N and Mi[Si > Mi+1 ∀i ∈ {1, .
Therefore, distributed, run-time mechanisms are needed to ensure that a normative structure maintains consistency.
N(a) = a .
Thus, we can readily translate expressions of a normative structure.
We present one such mechanism in the following section. 
As noticed in [16], CPNs have a semantics which builds upon true concurrency, instead of interleaving.
5.1 Mapping to Coloured Petri Nets Our normative structure is a labelled bi-partite graph.
Arcs are mapped almost directly.
CPNs combine the strength of Petri nets with the strength of functional programming languages.
each activity) can be modelled using CPNs along the lines of Cost et al.
For technical details we refer the reader to [16].
on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Constructing the combined CPN Def.
Joint Conf.
Joint Conf.
Σ = {NP}).
