We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).
81 • Every candidate receives equally many votes from the first 2n = n − 1 voters.
If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before c"s elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).
• For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the  candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for).
The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same.
Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).
)n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).
We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.
We observe that this fooling set has size (m !
We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n !
However, b is approved by 2n + 2 votes, for the following reason.
, m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) .
(For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)
, m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) .
In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.
Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each  candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.
First, let every voter indicate her most preferred candidate using log m bits.
So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.
• Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 .
In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).
Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).
If n/m = 1 (that is, n = m), then this  expression simplifies to log(n!).
This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).
, Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}.
We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).
The deterministic communication  complexity of any rank-based voting rule is O(nm log m).
To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)
)m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.
Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.
The nondeterministic communication  complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).
Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).
Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].
It follows that n !
Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).
Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).
If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.
Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.
l r l r l r a m"1 1 2 2 m" Figure 1: The schedule for the cup rule used in the proof of Theorem 17.
Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj  receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the  candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote  vector), and ties with everyone else.
Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.
Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol  requires O(nm) communication.
It follows that b"s score in the newly constructed vote vector is b"s score in the second vote vector (2n ), plus two.
• Let voters 2n + 6 = n − 1, 2n + 7 = n rank the  candidates rm lm rm −1 lm −1 .
, S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , .
When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after c"s  elimination.
• For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si.
(( n m )!
We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).
≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.
For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).
≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).
It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.
The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic  protocol that is O(nm); lower bound Ω(nm)).
First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.
Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).
equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)!
But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.
For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, .
Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise  elections.
While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.
Each candidate rj defeats its opponent lj in the first round.
Without loss of generality, suppose S1 i S2 i , and let rj be some  candidate in S1 i − S2 i .
However, if lL < k < lH , and we already know a voter"s lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most  preferred candidates (because they cannot be).
= n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!)
We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, .
However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than  relations will suffice.
For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.
We observe that this fooling set has size (2m )n = 2n m .
We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the  fooling set, for the following reason.
This is because only votes n − 3 and n − 2 prefer a to lk.
We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.
Given that m divides n , let us see how many vote vectors there are in the fooling set.
However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.
The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i).
(For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)
Then, b receives 2n /m + 2 votes in this newly constructed vote  vector, whereas a receives at most 2n /m+1 votes.
The deterministic communication  complexity of the plurality with runoff rule is O(n log m).
, Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si.
Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).
Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.
However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.
)n where m = (m − 2)/2 and n = (n − 2)/2.
We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per  candidate; and there are precisely n !
• Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) .
So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.
This bound is achieved by simply having  everyone communicate their entire ordering of the candidates  (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).
The nondeterministic communication  complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).
Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.
All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.
Candidate a wins with each one of these vote vectors  because of the extra vote for a from the last voter.
Approving or disapproving of a candidate requires only one bit of information, so every voter can simply  approve or disapprove of every candidate for a total  communication of nm bits.
• For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) .
, π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, .
The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.
, S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , .
(( n m )!
If m divides n, then log(n!
• For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si.
• Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 .
= n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.
It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj  defeats rj in the first round.
The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are  removed.)
We observe that log(n!)
It follows that a will defeat all the candidates that it faces.
We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two  candidates she prefers.
Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .
, m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).
We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).
We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of a"s pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).
We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, .
Given that m divides n , let us see how many vote vectors there are in the fooling set.
We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.
• Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes.
Let i be a number such that the two vote vectors  disagree on the candidate for which voters 2i − 1 and 2i vote.
We observe that this fooling set has size (m !
• Let voter 2n +1 = n rank the candidates a C −{a}.
, Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si.
Let each voter first announce her most preferred candidate (O(n log m) communication).
Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.
The deterministic communication  complexity of the STV rule is O(n(log m)2 ).
• The last voter (voter n) votes for a.
All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.
The nondeterministic communication  complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).
Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.
So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.
, π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, .
• For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) .
In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a  relation rather than a function [12].
, S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , .
7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.
First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.
(( n m )!
• For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si.
− m log((n /m )!
• Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 .
We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).
Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .
π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set).
We have log(n!)
Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).
, Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b.
We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.
Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.
Moreover, any lk wins its pairwise election against a.
All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.
• Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) .
We will exhibit a fooling set of size (m !
• Let voter 4n + 1 = n approve {a}.
In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.
, S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , .
So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.
After this, the matchups for the second round are known, so let all the voters communicate which  candidate they prefer in each matchup in the second round-etc.
The nondeterministic communication  complexity of the ranked pairs rule is Ω(nm log m) (even to  decide whether a given candidate a wins).
(( n m )!
Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.
The deterministic communication  complexity of the plurality rule is O(n log m).
Let the first vote vector correspond to the vector (π1 1, π1 2, .
• For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}).
)− m log((n /m)!
Thus, we need to look at the voters" top m +1 candidates, and a is ranked m +1th by all voters.
Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.
We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.
, m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si).
All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.
Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .
We will exhibit a fooling set of size (m !
83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.
Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.
So, we can assume that n/m ≥ 2.
, S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , .
So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.
After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.
Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.
)n , and that candidate a wins in each vector of votes in the  fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).
Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).
Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the  second vote vector.
Let the first vote vector correspond to the vector (π1 1, π1 2, .
Moreover, a defeats every rj in their pairwise election.
, π2 n ).
The nondeterministic communication  complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).
Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.
)m where m = m/2 and n = (n − 2)/4.
Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).
, m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.
All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.
In this newly constructed vote vector, a is still approved by 2n + 1 votes.
We will exhibit a fooling set of size n !
• Voter 4n + 2 = n ranks the candidates b C − {b}.
To find out whether a number k is smaller than l, we determine every voter"s k most preferred candidates.
So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.
• For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).
Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector.
The nondeterministic communication  complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).
Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.
)m where n = (n−1)/2.
, πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, .
Let the first vote vector correspond to the vector (S1 1 , S1 2 , .
, π2 n ).
We will exhibit a fooling set of size n !
All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.
When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc.
(If ck(i) = a then the vote is simply a C − {a}.)
So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.
This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).
Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .
Let the first vote vector correspond to the vector (S1 1 , S1 2 , .
• Voter 4n +1 = n−1 ranks the candidates a C−{a}.
, πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, .
All that remains to show is that for any two distinct  vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.
So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.
In this newly constructed vote vector, a is still ranked m + 1th by all votes.
Moreover, in every one of b"s pairwise elections, b is ranked higher than its opponent by at least 2n voters.
The nondeterministic communication  complexity of the maximin rule is O(nm).
Let a be the remaining candidate.
)m ways of doing this.
Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}.
Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.
The nondeterministic communication  complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).
Let the first vote vector correspond to the vector (S1 1 , S1 2 , .
All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote  according to one of these two vectors in such a way that a loses.
So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.
In the remaining rounds, we will keep track of each voter"s most preferred candidate among the remaining candidates, which will be enough to implement the rule.
)n ) = n log(m !)
Thus, at least one lj advances to the second round after defeating its opponent rj.
The deterministic communication  complexity of the approval rule is O(nm).
After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).
We observe that this requires the communication of 2n(m− 1) bits.
Let us consider the score of lj.
Let the first vote vector correspond to the vector (S1 1 , S1 2 , .
The nondeterministic communication  complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).
)n ) = n log(m !)
It follows that c has a higher Borda score than a in the newly constructed vote vector.
For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.
Let b be a candidate other than a.
Thus, computing one of the winners requires at least as much communication as  verifying whether a is among the winners.
(Such a stage requires the communication of n bits, one per voter.)
The nondeterministic communication  complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).
For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .
is Ω(m log m), so that log((m !
Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , .
However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.
Thus, lj has a higher Copeland score than a in the newly constructed vote vector.
For every vector (π1, π2, .
Then, decide on the permutation within each bucket (for which there are (n /m)!
The nondeterministic communication  complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).
This will prove the theorem because m !
The deterministic communication  complexity of the Bucklin rule is O(nm).
is Ω(m log m), so that log((m !
For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .
For every vector (π1, π2, .
Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + .
The nondeterministic communication  complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).
The deterministic communication  complexity of the Condorcet rule is O(nm).
Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.
)n where m = m−2 and n = (n−2)/4.
This will prove the theorem because m !
Theorem 1.
The deterministic communication  complexity of the cup rule is O(nm).
For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .
Therefore, log(n!)
≥ n(log m − 1)/2.
For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .
π0(1) a b.
Divide the candidates into m pairs: (c1, d1), (c2, d2), .
For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .
lπi(m ) rπi(m ).
≤ 2m bits.
We can count the number of permutations of n elements as follows.
Then, we give a lower bound on the nondeterministic  communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier  question).
Thus, log(n!)
Taking the  logarithm of this gives log(n !)
), so the result follows from Lemma 1.
), so the result follows from Lemma 1.
6 An intuitive proof of this is the following.
Taking the logarithm of this gives log(n !
, S2 n ).
− m log((n/m)!)
, S2 n ).
Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.
− m log((n/m)!)
, S2 n ).
, S2 n ).
5 One possible concern is that in the case where ties are  possible, it may require much communication to verify whether a specific candidate a is among the winners, but little  communication to produce one of the winners.
, S2 n ).
is Ω(nm log m).
is Ω(nm log m).
rπi(1) lπi(1) b a.
= m n/m i=1 log(i).
)−m log((n/m)!)
We first give a universal upper bound.
, m } → {1, 2, .
πi(m ).
, Sn ) consisting of n sets Si ⊆ {1, 2, .
The next lemma will be useful in a few of our proofs.
For every vector (S1, S2, .
For every vector (S1, S2, .
For every vector (S1, S2, .
For every vector (S1, S2, .
For every vector (S1, S2, .
Theorem 2.
For any subset S ⊆ {1, 2, .
πi(1) b a.
Without loss of generality, suppose c1 k(i) = a.
a"s Copeland score remains unchanged.
Lemma 1.
a"s Borda score remains unchanged.
, (cm , dm ) where c1 = a and d1 = b.
Consider the following communication protocol.
Theorem 3.
We omit this proof because of space constraint. 
r1 l1 a b.
We omit this proof because of space constraint.
Theorem 10.
Theorem 5.
Consider the following simple communication  protocol.
Theorem 4.
, lm } and R = {r1, r2, .
, lm } and R = {r1, r2, .
Theorem 6.
Theorem 20.
Theorem 8.
r1 l1 a.
choices per bucket).
We are now ready to present our results.
Theorem 11.
Theorem 7.
Theorem 19.
rm lm .
lm rm .
Theorem 9.
as c1 c2 .
Theorem 17.
Theorem 12.
Theorem 14.
Theorem 18.
Theorem 15.
Theorem 13.
Theorem 16.
