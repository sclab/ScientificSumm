That is, the social value function g will be compatible in this sense with the  singlecrossing conditions on the players" preferences.
A player"s valuation function will be single-crossing if the effect of an increment in the player"s type on the player"s valuation for 2 We will show that, w.l.o.g., we can focus on deterministic allocation schemes.
Throughout this paper, we assume that the valuation functions of the players are single-crossing, as defined below.
We define a k-action game to be a game in which the number of possible actions for each player is k, i.e., |B| = k. In k-action games, the social planner typically cannot always choose an alternative according to the social choice function c due to the informational constraints.
We say that the social-choice rule g( −→ θ , A) exhibits the single-crossing property if for every player i, g exhibits the single-crossing property with respect to i.
Assume that the valuation functions vi(θi, A) are single crossing and that the action space is  unrestricted.
64 The social planner has a social-choice function c : Θ → A, where the choice of alternatives is made in order to maximize a social-value function g( −→ θ ) : Θ × A → R. That is, c( −→ θ ) ∈ argmaxA∈A{g( −→ θ , A)} We assume that for every alternative A ∈ A, the function g(·, A) is continuous and differentiable in every type.
We say that a social-choice function h is implementable with a set of actions B if there exists a  mechanism (t, p) with a dominant-strategy equilibrium s1, ..., sn (where for each i, si : [θi, θi] −→ B) that always chooses an alternative according to h, i.e., t(s1(θ1), ..., sn(θn)) = h( −→ θ ).
We first describe a standard mechanism-design model for players with one-dimensional types.
A mechanism with an action set B is a pair (t, p) where: • t : Bn → A is the allocation rule.2 • p : Bn → Rn is the payment scheme (i.e., pi(b) is the payment to the ith player given a vector of actions b).
3 That is, for every type θi and every action bi, we have that vi ( θi, t(si(θi), b−i) )-pi(si(θi), b−i)¿vi ( θi, t(bi, b−i)  )pi(bi, b−i) two alternatives is always greater for one of these  alternatives.
A function h : Θ × A → R is single  crossing with respect to i if there is a weak order i on the alternatives, such that for any two alternatives Aj i Al we have that for every −→ θ ∈ Θ, ∂h( −→ θ , Aj ) ∂θi > ∂h( −→ θ , Al) ∂θi and if Aj ∼ Al (that is, Al i Aj and Aj i Al) then h(·, Aj) ≡ h(·, Al) (i.e., the functions are identical).
A strategy si is a threshold strategy based on a vector of threshold values x = (x0, x1, ..., xk), if for any action j it holds that si(θi) = j iff θi ∈ [xj , xj+1].
That is, for any b−i ∈ {0, ..., k− 1}n−1 if bi > bi then t(bi, b−i) i t(bi, b−i).
2.1 Dominant-Strategy Implementation Following is a standard definition of a mechanism.
We now define a  singlecrossing property on the social-value function g. This  property clearly ensures the monotonicity of the corresponding social choice rule, and we will later show that it is also useful for action-bounded environments.
A social-choice function is k-action  informationally optimal with respect to the social-value function g, if it achieves the maximal expected social value among all the k-action informationally achievable social-choice  functions.4 Earlier in this section, we defined the single-crossing  property for the players valuations.
The single-crossing condition on the players"  preferences actually defines an order on the alternatives.
We say that a strategy si is dominant for player i in  mechanism (t, p) if player i cannot increase his utility by reporting a different action than si(θi), regardless of the actions of the other players b−i.3 Definition 2.
We say that a social-choice function h : Θ → A is informationally achievable with a set of actions B if there exists a profile of strategies s1, ..., sn (where for each i, si : [θi, θi] −→ B), and an allocation rule t : Bn → A, such that t chooses the same alternative as h for any type profile, i.e., t(s1(θ1), ..., t(θn)) = h( −→ θ ).
A strategy for player i is  therefore a function si : [θi, θi] −→ B.
Each player has a privately known type θi ∈ [θi, θi] (where θi, θi ∈ R, θi < θi), and a type-dependent valuation function vi(θi, A) for each alternative A ∈ A.
In other words, player i with type θi is willing to pay an amount of vi(θi, A) for alternative A to be chosen.
Later on, we will use these orders for defining monotonicity of social-choice functions.
Note that the definition above requires that g will be  single crossing with respect to every player i, given her  individual order i on the alternatives.
If |B| = k, we say that h is k-action informationally achievable.
ec is informationally achievable with two actions: if both  players bid 0 when their value is greater than 1/2 and 1 otherwise, then the allocation rule choose alternative A iff both players report 1 derives exactly the same allocation for every profile of types.
Instead, we are interested in implementing a social-choice function that, with k actions, maximizes the expected social value: E−→ θ g −→ θ , t (s1(θ1), ..., sn(θn))  .
Each type θi is independently distributed according to a publicly known distribution Fi, with an always positive density function fi.
We now define a social-choice rule that maximizes the social value under the information-theoretic constraints that are implied by the limitations on the number of actions.
Finally, we call attention to a natural set of strategies - non-decreasing strategies, where each player reports a higher action as her type increases.
A deterministic mechanism is monotone if when player i raises his reported action, and fixing the actions of the other players, the mechanism never chooses an inferior alternative for i.
The definition of monotone social-choice functions also  requires an order on the actions.
The utility of player i of type θi from alternative A under the payment pi is ui = vi(θi, A) − pi.
We denote the set of all possible type profiles by Θ = ×n i=1[θi, θi].
When the action space is discrete, the order can be determined by the names of the actions, for example, 0, 1,...,k-1 for k-action mechanisms.
(We therefore describe this order with the standard relation on natural numbers <, >.)
2.2 Action-Bounded Mechanisms The set of actions B is usually implicit in the literature, and it is assumed to be isomorphic to the type space.
This order is implicit in most of the standard settings where, for example, it is  defined by the order on the real numbers (e.g., in direct  revelation mechanisms where each type is drawn from a real interval).
In contrast, it is easy to see that the function ˆc(θ1, θ2) = A iff θ1 + θ2 > 1/2 is not  informationally achievable with two actions.
A real vector x = (x0, x1, ..., xk) is a  vector of threshold values if x0 ≤ x1 ≤ ... ≤ xk.
Each player uses a strategy for determining the action he plays for any possible type.
A fundamental result in the mechanism-design literature states that under the single-crossing condition, the  monotonicity of the social-choice function is a sufficient and  necessary condition for dominant-strategy implementability (in single-parameter environments).
Then, in Subsection 2.2, we impose limitation on the action space.
Since the players" types are private information, in order to choose the optimal alternative, the social planner needs to get the players" types as an input.
For example, consider an environment with two alternatives A = {A, B}, and the following  socialchoice function: ec(θ1, θ2) = A iff {θ1 > 1/2 and θ2 > 1/2}.
The main goal of this paper is to optimize the expected  social value (in action-bounded mechanisms) while preserving a dominant-strategy equilibrium.
Without this  assumption, general sufficient condition for implementability are unknown (for a survey on this topic see [10]).
Equivalently, such strategies are threshold strategies - strategies where each player divides his type support into intervals, and simply reports the interval in which her type lies.
A strategy si is called a threshold strategy, if there exists a vector x of threshold values such that si is a threshold strategy based on x. 
Following is a classic result regarding the implementability of social-choice functions in single-parameter environments.
For example, if the value of player i for alternative A increases more rapidly than his value for alternative B, we can denote it by A i B.
A social-choice function c is dominant-strategy implementable if and only if c is monotone.
In this paper, we study environments where this assumption does not hold.
The players reveal information about their types by choosing an action, from an action set B.
We denote a profile of strategies by s = s1, ..., sn and the set of the strategies of all players except i by s−i.
The single-crossing  condition (also known as the Spence-Mirrlees condition)  appears, very often implicitly, in almost every paper on  mechanism design in one-dimensional domains.
The action space B is traditionally implicit, but we mention it explicitly since we later examine limitations on B.
Note, however, that this characterization does not hold when the action space is bounded.
The  general model studies environments with n players and a set A = {A1, A2, ..., Am} of m alternatives.
Definition 1.
Proposition 1.
Definition 3.
Definition 4.
Definition 5.
65 Note that this definition does not take into account  strategic considerations.
Definition 6.
Definition 7.
Definition 9.
Definition 8.
