In the case of the initiating node sending the index files, the indexing node will complete the transfer with the SEND COMPLETE command indicating to the initiating node that there are no more index files to be sent and the initiating node can then assemble those index files into the main index.
INCOMING FILE: Once the initiating node assembles a set of idle nodes to assist with the distributed indexing, it will divide the documents to be sent to the nodes.
Once the initiating node is finished sending the set of documents to be indexed, it will then send a SEND COMPLETE command indicating to the indexing node that there are no more files and the node can proceed with indexing the files.
After the indexing of the files completes the indexer node enters the state where the index files are sent back to the initiating node.
The set of idle nodes includes the node initiating the distributed indexing process, referred to as the local node.
The FileSender"s first job is to send the files that are to be indexed by the other idle node.
The FileSender will begin to receive the files that are to be saved within the index.
If the node is determined to be idle it will enter the state where it will receive files from the initiating node that it is responsible for indexing.
The initiating node will loop through the files that are to be sent to the other node; each file stream being preceded by the INCOMING FILE command with the appropriate parameters.
The files are stored in a temporary directory separate from the nodes local documents that it is responsible for maintaining an index of.
Each node will contain part of the full index, and be aware of what part of the index each other node has.
In addition, each node has a separate local index of its own documents.
The INDEX FILE command has two parameters: the first being the name of the index, and the second is the size of the file in bytes.
This set of nodes is iterated and each one is sent the IDLE QUERY command.
As with the INCOMING FILE command, the indexing node streams each index file after sending an INDEX FILE command.
3.1 Indexing Protocol The protocol we have designed for the distributed indexing is depicted in Figure 1.
SEND COMPLETE: When sending the sets of files for both the index and the files to be indexed, the node must notify the corresponding node when the process is complete.
INDEX FILE: Once the indexing node has completed the indexing process of the set of files, it must send the resultant index back to the initiating node.
If the IDLE command is received, the initiating node will add the responding node to a list of available distributed indexing helpers.
The NodeController is responsible for setting up connections with nodes in the idle state to distribute the indexing process.
A node will be able to contact each node that contains a unique portion of the index.
But as discussed later, in the current implementation, each node has a copy of the entire index.
It receives an INDEX FILE command with the name of the files and the size in bytes.
This file is then streamed into the temporary index directory on the FileSender node.
After the INCOMING FILE command has been sent, the initiating node will begin to stream the file to the other node.
The FileSender object is the initiating node equivalent of the indexer node.
Before initiating the indexing process it must be sent an IDLE QUERY message.
If a node is determined busy it returns to its listening state waiting for another IDLE QUERY from another initiating node.
Once all of the files are received by the initiating node, indicated by a SEND COMPLETE message, it starts an instance of the Lucene indexing engine.
If the node is using most of its CPU for other processes, the node will respond to the IDLE QUERY with a BUSY command.
Once the collection of idle nodes is obtained, the node updates the set of controllers and evenly divides the set of documents that are to be indexed.
Once the indexing is complete the resulting index is streamed back to the initiating node as well as compiled in the indexer nodes own local index.
Therefore, if a node is in the process of indexing many documents, it will break up the work over the nodes.
The indexer node will determine whether it is considered idle based on the current CPU usage.
To do this, it sends an INCOMING FILE message, which contains the name of the file as well as the size in bytes.
The index is stored on the drive within a temporary directory separate from the current index.
For each indexing node an instance of the FileSender object is created.
It sends each file using the INCOMING FILE command.
Each instance of the FileSender has its own unique section of temporary space to store the index that has been transferred back from the indexing node.
IDLE: As with the case of the BUSY response, the node receiving the IDLE QUERY will determine its eligibility for distributed indexing.
It initiates the communication between the initiating node and the node that will assist in the distributed indexing.
Once these files are sent back that index is then merged into the indexer nodes own full index of the existing files.
The files are streamed one at a time to the other node.
With that command it sends the name of the file being sent and the size in bytes.
The index is comprised of multiple files, which exist on the file system of the indexing node.
The FileSender is aware of the set of documents that node is responsible for.
To be considered a candidate for distributed indexing, the overall CPU usage must be at a minimum to all for dedicated indexing of the distributed documents.
Once all files have been sent the FileSender sends the SEND COMPLETE command.
IDLE QUERY: The IDLE QUERY is sent out from the initiating node to determine which other nodes may be able to help with the overall indexing process.
When the FileSender objects have completed the NodeController will take the resultant indexes from 175 each node and pass them to an instance of the IndexCompiler, which maintains the index and the list of FileSenders.
The NodeIndexer is responsible for receiving documents sent to it by the initiating node and then indexing them using the Lucene engine [7].
Once a FileSender object has been created for each node, the NodeController waits for each FileSender to complete.
The FileSender creates an instance of Lucene"s IndexWriter and prepares to create the index in a temporary directory on the file system.
For example, if there are 100 documents and 10 nodes (including the local node) then each node will have 10 documents to index.
The indexer node loops through all of the files created by Lucene"s IndexWriter and streams them to the initiating node.
The initiating node runs many instances of the FileSender node one for each other node it has determined to be idle.
Using JXTA [5], the node controller will obtain a set of nodes.
The nodes that respond with idle are then collected.
After the transfer of the index files has been completed the FileSender notifies the instance of the index compiler that it is ready to combine the index.
The Lucene index writer then indexes all of the transferred files.
Upon instantiation of the FileSender it is passed the node that it is responsible for contacting and the set of files that must be sent.
Once a node"s local index is updated with the new documents, the distributed index will then be updated.
This is the first command that sets off the indexing process.
It then enters the idle state where it will then listen for any other nodes that required distributing the indexing process.
There are no parameters sent with the command.
If this is the case, the node will respond with an IDLE command.
If the indexer nodes CPU usage is above 50% for a specified amount of time it is then considered to be busy and will respond to the IDLE QUERY command with BUSY.
In the case of a BUSY command being received, the responding node is ignored.
Apocrita uses a distributed index for all the documents that are available on the Intranet.
As outlined in the protocol section if the node is not being used and has a low overall CPU usage percentage it will return IDLE to the IDLE QUERY command.
When notifying the IndexCompiler it will also pass the location of the particular FileSenders directory location of that index. 
BUSY: Once a node received an IDL QUERY, it will determine whether it can be considered a candidate for distributed indexing.
This determination is based on the overall CPU usage of the node.
Once the IndexCompiler has completed it will return to the idle state and activate the directory scanner to monitor the locally owned set of documents for changes that may require reindexing.
The current distributed indexing system consists of three separate modules: NodeController, FileSender, and NodeIndexer.
The receiving node will respond with either a BUSY or IDLE command.
Indexing of the documents is distributed.
Apocrita distributed indexing protocol.
The responsibility of each module is discussed later in this section.
Figure 1.
