To a large extent, such systems operate proactively and independently of direct  human control driven by the perception of the environment and the ability to organize respective computations dynamically.
The paper describes an architectural framework and a middleware supporting a component-based system and an integrated view on events-based communication comprising the real world events and the events generated in the  system.
the interactions through the environment.
They are able to spontaneously disseminate information in response to events observed in the physical environment or to events received from other component via the network interface.
Looking to the basic building blocks of such systems we may find components which comprise mechanical  components, hardware and software and a network interface, thus these components have different characteristics compared to pure software components.
This is complemented by the notion of event channels which are abstractions of the  underlying network and allow to enforce quality attributes.
In a future networked physical world, a myriad of smart sensors and actuators assess and control aspects of their  environments and autonomously act in response to it.
The generic event layer hides the different communication channels including âˆ—This work was partially supported by the EC, through project IST-2000-26031 (CORTEX), and by the FCT, through the Large-Scale Informatic Systems  Laboratory (LaSIGE) and project POSI/1999/CHS/33996  (DEFEATS).
An appropriate middleware is presented which reflects these needs and  allows to specify events which have quality attributes to  express temporal constraints.
The challenging characteristics of these applications include sentience and autonomy of components, issues of  responsiveness and safety criticality, geographical dispersion, mobility and evolution.
The generic event architecture GEAR is  introduced which describes the event-based interaction between the components via a generic event layer.
They are established prior to interaction to reserve the needed computational and network resources for highly predictable event dissemination.
A crucial design decision is the choice of the appropriate abstractions and interaction mechanisms.
Larger autonomous components may be composed recursively from these  building blocks.
It starts by an outline of the component-based system construction.
Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications; C.3 [Special-Purpose and Application-Based Systems]: Real-Time and  embedded systems General Terms Design 
Examples range in telematics, traffic management, team robotics or home automation to name a few.
