We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.
This set of  conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).
The translated plan clauses, with the semantics of CAN augmented by our  waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 
The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.
Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).
The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining  alternatives, Δ \ P, if necessary.
We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.
An agent"s behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agent"s beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.
, ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.
We provide the semantics of an augmented agent language  containing the FAb construct by defining a source transformation,  similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.
This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is  considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.
These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.
The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved.
This is represented by the predicate sa(v ) being true.
Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agent"s plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.
• sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active.
However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.
We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.
We augment the CAN language with the following rules for the guard operator ‘:": B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new  context.
Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For  Clearance has no parameters.
First we  describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.
We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v )  becomes true.
The translation of the first plan clause, for SMS, is more  complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.
For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, .
The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, .
on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN.
Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN.
We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now  condition san(v ) as the success condition.
This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.
We also introduce the following predicates: • a(v) - the pap v is currently active.
The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.
Our use of the Goal construct is for its ability to drop the  execution of a program when conditions are met.
We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.
If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no  active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.
This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .
A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).
The task !CCR(v ) will be executed.
The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability.
It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \ {b}).
We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.
Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.
This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.
Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.
The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.
, Pn are themselves programs, act is a primitive  action that is not further specified, and +b and −b are operations to add and delete beliefs.
Let us call each instantiation of the construct at execution time a possible abort point (pap).
While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely  automated, according to the rules set out in Section 4.2.
The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.
The fourth rule GS executes a single step of the goal-program.
A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).
We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.
Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in  Section 3.
• san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.
A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.
While executing the program P, we know that we need to drop P and  invoke its abort-method if some ancestor of P has been told to abort.
Let v be a new variable distinct from any other in the agent"s plan library.
This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.
For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].
In this case, once the descendant paps" abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the  second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false).
In this case, P is now dropped, the a(v ) is removed, and the entire construct  succeeds or fails based on φs.
Let v and v be new variables distinct from any other in the agent"s plan library.
The one non-standard extension to CAN is a wait-until-condition construct.
4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinny"s Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent  systems.
We must take into consideration the possible existence of abort-methods in the aborted branch.
Similarly, with the Goal  construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods  applicable to the program.
We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.
7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure.
question, then the rule constructs a guarded alternative ψiθ : Piθ.
The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).
We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.
on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed.
To leave aside the  repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.
• ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v  ))the pap v is an ancestor of pap v .
on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.
nil is the basic (terminating) program.
We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).
The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the  parents and children of a particular pap.
Following a presentation of the operational  semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present.
When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, .
Hence, if the Goal construct fails, then the program either was aborted or it failed.
Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.
4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up  required when a given program respectively fails or is aborted.
We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.
The construct φ : P does not execute P until φ becomes true.
Goals are  persistent in CAN in that, when a plan fails, another applicable plan is attempted.
With the introduction of the ability to abort programs, we  modify the parallel construct to allow the failure of one branch to abort the other.
(a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children.
The second way for san(v ) to become true is if v or one of its ancestors is aborted.
In addition, a set of  auxiliary compound forms are used internally when assigning  semantics to constructs.
First let us consider the case of the FAb construct.
If the old plan body fails, or if the task is to be aborted, the Goal construct fails.
The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.
We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.
Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alice"s manager, respectively.
This variable is used to keep track of the context of execution.
This causes abort(v ) to become true, and, after the descendant paps"  abortmethods are executed, san(v ) becomes true.
, ψn : Pn} | nil 4 An omitted c is equivalent to true.
We provide the semantics for the task and plan failure and  aborting processes outlined above.
We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.
First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.
CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.
The Sixth Intl.
Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.
A key issue is that the FAb constructs may be nested, either  directly or indirectly.
The Sixth Intl.
A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.
This condition relies on the fact that as the children paps complete, they remove the relevant a facts.
?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.
• abort(v) - the pap v should be aborted (after aborting all of its descendants).
There are two ways this can occur.
S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more  singlestep transitions.
The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.
To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.
Let us introduce the primitive action prependID(v, v ) that  creates a new pap identifier and prepends it to list v giving list v .
Let v and v denote new variables.
In practical systems, tasks are typically translated into events that trigger the execution of some plans.
The waiting branch will trigger the abort of the program should either the success or failure condition be met.
The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.
Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).
Should the old plan body succeed, belief a(v ) is  retracted, causing the Goal to succeed.
Rule Sequence handles sequencing of programs in the usual way.
Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].
At the end, if either branch was aborted, then we must fail.
The above defines the user language.
To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.
We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.
The extensions also simplified the semantics in the earlier work.
This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].
Figure 1 gives some of the operational rules.
6 Typically an achievement goal.
4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.
, ψn : Pn ) = ψ1 : μv(P1), .
, cn : Pn ).
• nac(v) ≡ ¬∃v .
Joint Conf.
Joint Conf.
Joint Conf.
12 The Sixth Intl.
where P1, .
