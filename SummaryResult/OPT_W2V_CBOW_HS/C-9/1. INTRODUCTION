The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.
To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between  service instances across projects and nodes.
The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this  service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a  multidomain-spanning scalable service.
Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.
To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an  active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.
In a  longterm-service grid infrastructure, active replication has  various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service  unavailability.
Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.
The resource management focuses on the execution of  services that have a long, potentially infinite, operating time.
Current grid computing infrastructures don"t  provide sufficient support for the execution of distributed,  useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.
EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management  infrastructure, and offers system-level support for scalability and fault tolerance.
Such grid infrastructures are often  deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.
EDAS further supports flexible service models, including a fully centralized client/server structure, completely  peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].
Section 5 describes the framework for  decentralized adaptive services.
Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.
The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.
Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized  loadbalancing [4].
Nodes can dynamically join and leave the  infrastructure, and all management tasks, especially the resource management, are decentralized.
Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large  computing system.
It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.
Migration however is expensive as the whole state of a service has to be transfered.
The environment is built upon our AspectIX [3] middleware infrastructure, which  directly supports QoS-based, dynamic reconfiguration of  services.
a node gets overloaded) the service has to be migrated within the grid (e.g.
Therefore the resource management has to avoid migration if possible.
The following section describes the used features of  AspectIX followed by a brief overview of the core components and concepts of EDAS.
Additionally a non-replicated service is not accessible during migration.
In cases where rededication is not possible, the migration of the  demanding service is initiated.
Furthermore a service concept has to be  provided that evades overload in the first place, and secondly inhibits service unavailability if migration can"t be avoided.
Each project has a distributed execution scope called a service environment.
Theses services are organized in projects.
Each institution represents an administrative domain that can support a project with a fixed set of resources.
Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.
Such an environment possibly spans multiple institutions.
Finally a certain amount of node crashes can be tolerated.
Section 6 describes related work and finally Section 7 concludes the paper. 
to a more powerful and less loaded node).
If the distribution turns out to be wrong (e.g.
