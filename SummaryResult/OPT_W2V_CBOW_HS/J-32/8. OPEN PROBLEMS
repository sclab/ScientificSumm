However, it does not  preclude the existence of an algorithm that is based on a similar idea, but, instead of computing the entire breakpoint policy for each  vertex, uses a small number of additional passes through the graph to decide which (polynomial-sized) parts of each breakpoint  policy should be computed.
Hence, one can think of constructing B(Vk+1, Vk) as the  following process: turn B(Vk, Vk−1) by π/2, cut it along the (now horizontal) line vk = α, apply a fractional linear transform to the horizontal coordinate of both parts, and reconnect them using the image of the segment {α}×[0, 1] under f. This implies that the problem of bounding the size of the best response policy (or,  alternatively, the breakpoint policy), can be viewed as a generalization of the following computational geometry problem, which we  believe may be of independent interest: PROBLEM 1.
However, in our example (which is omitted from this version of the paper due to space constraints), there exists a polynomial-size path through the best response policy, i.e., it does not prove that the breakpoint policy is necessarily exponential in size.
Assuming for convenience that B(Vk, Tk) = [0, α]×{0} ∪ {α}×[0, 1] ∪ [α, 1]×{1}, and f is the indifference function for Vk, we observe that the best response policy for Vk consists of 5 components: ˆf(0), ˆf(1), and three components that correspond to [0, α]×{0}, {α}×[0, 1], and [α, 1]×{1}.
For this graph, the best response policy of a vertex Vk in the spine of the caterpillar is obtained by combining the best response  policy of its predecessor on the spine Vk−1 and its other child Tk; since the latter is a leaf, its best response policy is either trivial (i.e., [0, 1]2 , [0, 1]×{0}, or [0, 1]×{1}) or consists of two  horizontal segments and one vertical segment of the form {α}×[0, 1] that connects them.
If one can prove that this is always the case, it may be possible to adapt this proof to show that there can be an exponential gap between the sizes of best response policies and breakpoint policies. 
Another intriguing question is related to the fact that the graph for which we constructed an exponential-sized breakpoint policy has pathwidth 2, while our positive results are for a path, i.e., a graph of pathwidth 1.
It is not clear if for any bounded-degree graph of pathwidth 1 the running time of (the breakpoint  policybased version of) our algorithm will be polynomial.
Is it possible to start with the segment [0, 1] and  after n operations obtain a set that cannot be represented as a union of poly(n) line segments?
If yes, can it be the case that in this set, there is no path with a polynomial number of turns that connects the endpoints of the original segment?
It turns out that in general, the answer to the first question is positive, i.e., after n steps, it is possible to obtain a set that consists of Θ(cn ) segments for some c > 0.
In particular, it is instructive to consider a caterpillar graph, i.e., the graph that can be obtained from Tn by deleting the vertices S1, .
This implies that even for a caterpillar, the best response policy can be exponentially large.
Our construction shows that any two-pass algorithm that explicitly stores breakpoint  policies needs exponential time and space.
Given a collection of axis-parallel segments in R2 , consider the following operation: pick an axis-parallel line li (either vertical or horizontal), cut the plane along this line, and shift one of the resulting two parts by an arbitrary amount δi; as a result, some segments will be split into two parts.
The most important problem left open by this paper is whether it is possible to find a Nash equilibrium of a graphical game on a bounded-degree tree in polynomial time.
In particular, such an algorithm may be based on the approximation algorithm of [8], where the value of is chosen adaptively.
Reconnect these parts, i.e., for each segment of the form [a, b] × {c} that was  transformed into [a, t] × {c + δi} and [t, b] × {c}, introduce a segment {t}×[c, c+δi].
