We also evaluated the middleware platform using the  OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.
One consequence of the dimensioning problem is that  scalability may be seriously impacted in peer-to-peer  middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc  settings.
Moreover, the epidemic algorithms are able to  guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.
The details of this process are, however,  outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 
More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the  density of population and the buffer size, and using persistent and non-persistent messages with different priorities.
We tested our prototype on HP IPaq PDAs running Linux, interconnected with  WaveLan, and on a number of laptops with the same network interface.
This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.
What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.
The simulation results show that the EMMA"s  performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.
In general, it is evident that the delivery ratio is strongly related to the  correct dimensioning of the buffers to the maximum acceptable delay.
EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.
The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly  acceptable figure given the available memory of the current mobile devices on the market.
