a protocol module can interact with all other  protocol modules in the same stack, not only with the protocol modules directly above and below.
A stack is a set of protocol modules (of different protocols) that are located on the same machine.
A request by a protocol module Pi is an asynchronous call by Pi of another protocol module.
• Requests are issued by protocol modules.
Stack 1 S1 Q1 R1 P1 Network Figure 1: Example of a protocol stack In Figure 1, we show an example protocol stack.
• Notifications can be used by a protocol module to inform (possibly many) protocol modules in the same stack about the occurrence of a specific event.
A protocol is implemented as a set of identical protocol modules located on different machines.
Protocols and Protocol Modules.
For example, a request by Pi generates replies that concern only protocol modules Pj.
Below, we define the  different kinds of interaction between protocol modules.
Only protocol modules belonging to the same protocol as the module that has issued the request are concerned by the corresponding replies.
For instance, protocol module P1 interacts with the protocol module Q1 and conversely (See Fig.
We write Pi to denote the protocol module of a protocol P in stack i.
Protocol Module Interactions.
Protocol Stacks.
In this section, we describe notions that are common to all protocol frameworks.
We  represent protocol modules by capital letters indexed with a natural number, e.g.
A protocol is a  distributed algorithm that solves a specific problem in a  distributed system, e.g.
Arrows show module interactions.
A single request can generate several replies.
In the remainder of this paper, we use the terms machine and stack interchangeably.
Notifications may also be the results of a request. 
• Replies are the results of a request.
Note that, despite its name, a stack is not strictly layered, 691 i.e.
a TCP protocol solves the reliable channel problem.
Modules are  represented as white boxes.
We use this notation throughout the paper.
P1, Q1, R1 and S1.
