When a protocol module triggers an event e  specifying channel c, all handlers bound to e that are part of a protocol that subscribes to c are executed (in the order  prescribed by the definition of channel c). 
a protocol module that triggers an event is not aware of the module(s) that handle the event.
An event is a special object for indirect  communication between protocol modules in the same stack.
Handlers of the same protocol module may share data.
Note that the network is represented as a special protocol module that handles the send event (to send a message to another machine) and triggers the deliver event (upon receipt of a message from another machine).
A handler h is also able to cancel the execution of an event trigger: all handlers that should be executed after h according to the priority are not executed.
Stack 1 P1 Q1 R1 S1 Network f e gg deliver send h Figure 2: Example of an event-based protocol stack In Figure 2, we show an example of an event-based stack.
Each handler is dedicated to handling of a specific event.
Channels allow to build routes of events in protocol stacks.
The fact that a protocol module can trigger an event is represented by an arrow starting from the module.
In the former case, the thread that triggers an event e is blocked until all protocol modules that handle e have terminated handling of event e. In the latter case, the thread that triggers the event is not blocked.
Events  enable one-to-many communication within a protocol stack.
In event-based protocol frameworks, a protocol module consists of a set of handlers.
Upon triggering some event e, all handlers bound to e are executed.
Each protocol module has to subscribe to one or many  channels.
To mark that some handler is bound to event e, we use an arrow pointing to the handler (the label on the arrow represents the event e).
Below, we present the features that influence  composition and implementation of protocol modules.
All events are triggered by specifying a channel they belong to.
Handlers can be  dynamically bound to events.
For example, the protocol module P1 triggers event e and handles event f (see Fig.
We also explain how protocol modules are structured in event-based frameworks.
With events, the communication is  indirect, i.e.
In Cactus [5, 2], the programmer can give a priority  number to a handler upon binding it to an event.
Triggering an event can be done either synchronously or asynchronously.
A white trapezoid inside a module box represents a handler defined by the protocol module.
In this section, we define the notion of an event in  protocol frameworks.
Handlers can also be unbound dynamically.
When an event is triggered, all handlers are executed following the order of priority.
Protocol Modules.
Events may transport some information, e.g.
Some protocol frameworks have unique features.
FRAMEWORK DESIGN Most existing protocol frameworks are event-based.
Appia [1, 16] and Eva [3] introduce the notion of channels.
If no handler is bound, the  behavior is usually unspecified.
Events are represented by small letters, e.g.
a network message or some other data.
Specific Features.
e, f, ...
Examples are Cactus [5, 2], Appia [1, 16] and Ensemble [12, 17].
