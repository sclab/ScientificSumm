In this paper, we propose a new approach for  building modular protocols, that is based on a service  abstraction.
Section 4 describes our new approach, which is based on service abstraction.
allow for a fairly straightforward protocol composition, clear  implementation, and better support of dynamic replacement of distributed protocols.
Protocol frameworks, such Cactus [5, 2], Appia [1, 16], Ensemble [12, 17], Eva [3], SDL [8] and Neko[6, 20], are  programming tools for developing modular network protocols.
We show that protocol frameworks based on services have several advantages, e.g.
Most protocol frameworks are based on events (all  frameworks cited above are based on this abstraction).
This approach facilitates code reuse and customization of distributed protocols in order to fit the needs of different applications.
To validate our claims, we have  implemented SAMOA - an experimental protocol framework that is purely based on the service-based approach to module composition and implementation.
The description of our experimental implementation is presented in Section 6.
Protocol frameworks such as Appia and Eva extend the event-based approach with channels.
They allow complex protocols to be implemented by  decomposing them into several modules cooperating together.
The paper is organized as follows.
Moreover, protocol modules can be plugged in to the system dynamically.
For instance, the composition of modules may require connectors to route events, which introduces burden for a protocol composer [4].
Section 5 discusses the advantages of a service-based protocol framework compared to an event-based protocol framework.
Section 2 defines  general notions.
All these features of protocol frameworks make them an interesting enabling technology for implementing adaptable systems [14] - an important class of applications.
However, the use of events raises some problems [4, 13].
The framework allowed us to compare the service- and event-based implementations of an adaptive group communication middleware.
We compare this new approach with the common, event-based approach.
Events are used for asynchronous communication between different modules on the same machine.
Section 3 presents the main characteristics of event-based frameworks, and features that are distinct for each framework.
However, in our opinion, this  solution is not satisfactory since composition of complex  protocol stacks becomes more difficult.
Finally, we conclude in Section 7. 
