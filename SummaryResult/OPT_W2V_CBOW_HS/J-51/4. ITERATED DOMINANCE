Specifically, to find out whether player i"s strategy σ∗ is dominated by a strategy that places positive probability on only k pure strategies, we can simply check, for every subset of k of player i"s pure strategies, whether there is a strategy that places positive probability only on these k strategies and dominates σ∗ , using Proposition 1.
We show that the strategy is  dominated by a pure strategy if and only if there is a solution to the satisfiability instance.
The problem is in NP because given a sequence of strategies to be eliminated, we can check in polynomial time whether this is a valid sequence of eliminations (for any strategy to be eliminated, we can check, for every subset of three other strategies, whether there is a strategy placing positive probability on only these three strategies that  dominates the strategy to be eliminated, using Proposition 1).
Let the pure strategy to be dominated be the one that plays 0 for every type.
However, Claim 1 shows that we cannot go ahead and eliminate multiple such  strategies for one player, unless at least one other player  simultaneously keeps up in the eliminated strategies: every time a σi(q) is eliminated such that σi+1(q) and σi+2(q) have not yet been eliminated, we need to eliminate one of the latter two strategies before any σi(q ) with q > q can be eliminated-that is, we need to alternate between players.
Then, for every Si that is in the cover, let the dominating strategy σ place exactly 1 k probability on the corresponding pure strategy σSi .
Then, if the column player plays σs, the row player (when playing σ) will always receive utility 0-as opposed to the utility of 1 the row player would receive for playing σ∗ , contradicting the fact that σ dominates σ∗ (whether this dominance is weak or strict).
For each c ∈ C, the strategy tc can only be eliminated by one of the strategies tc,l (with the same c), because these are the only other strategies that get the column player a utility of 1 against s1 c, and s1 c is uneliminable.
In contrast, iterated weak dominance is known to be  pathdependent.6 For example, in the following game, using  iterated weak dominance we can eliminate M first, and then D, or R first, and then U. L M R U 1, 1 0, 0 1, 0 D 1, 1 1, 0 0, 0 Therefore, while the procedure of removing weakly  dominated strategies until no more weakly dominated strategies remain can certainly be executed in polynomial time, which strategies survive in the end depends on the order in which we remove the dominated strategies.
(We have already shown in Section 4 that iterated weak  dominance is hard even when k = 1, that is, only dominance by pure strategies is allowed.)
Additionally, the row player has the  following 2 strategies: s1 0 and s2 0, where s2 0 = σ∗ r (that is, it is the strategy we seek to eliminate).
If we restrict the dominating strategies to place positive probability on at most three pure strategies, it becomes NP-complete to decide whether a given strategy can be eliminated using iterated strict dominance.
In a Bayesian game, it is NP-complete to decide whether a given pure strategy σr : Θr → Ar is  dominated by some other pure strategy (both for strict and weak dominance), even when the row player"s distribution over types is uniform.
(s2 is the strategy that we are seeking to eliminate.)
(This is possible  because at any stage, any weak dominance for the row player in the original instance is still a weak dominance in the new instance, because the two strategies" utilities for the row player are the same when the column player plays one of the new strategies; and the same is true for the column player.)
Finally, there is the  distinguished pure strategy σ∗ for the row player.
There is no other pure strategy remaining that gets a significant utility against more than one of the strategies t1 v, t2 v, t3 v, t4 v, but s−v (respectively, s+v) gets significant utility against all 4, and therefore cannot be dominated by a mixed strategy placing positive probability on at most 3 strategies.
Each strategy tc can only be eliminated by a strategy that places most of its weight on the corresponding strategies tl c with l ∈ c, because they are the only other strategies that perform well against sc, which cannot be eliminated before tc.
It is well-known that iterated strict dominance is path-independent [6,  19]that is, if we remove dominated strategies until no more dominated strategies remain, in the end the remaining  strategies for each player will be the same, regardless of the  order in which strategies are removed.
However, the following theorem shows that this is not the case, by giving an  example where an exponential number of iterations (that is, alternations between the players in eliminating strategies) is required.
σ2 r and σ3 r are equivalent from the row player"s perspective (and thus cannot eliminate each other), and  cannot eliminate any other strategy because they always  perform poorer against σ3 c .
First, this will reduce the number of bits required to specify the dominating  strategy (and thus the proof of dominance can be communicated quicker): if the dominating mixed strategy places positive probability on only k strategies, then it can be specified  using k real numbers for the probabilities, plus k log m (where m is the number of strategies for the player under  consideration) bits to indicate which strategies are used.
Because the strategies for player k that play ck for type θ1 k, or ak for some type θj k with j > 1, have already been eliminated, all that remains to check is that σi performs better than σi(q) whenever both of the other two players play strategies of the following form: play bk for type θ1 k, and play one of bk or ck otherwise.
A strategy σr can be made uneliminable, even when 0 and 1 are the only allowed utilities, by adding  another strategy σr and another opponent strategy σc, so that: 1. σr and σr are the only strategies that give the row player a utility of 1 against σc.
So, set v to true if s2 +v is eliminated, and to false otherwise Because by the above, for every clause c, one of the s2 l with l ∈ c must be eliminated, it follows that this is a satisfying assignment to the satisfiability instance.
The following lemma shows a special case of normal form games in which allowing for weak dominance by mixed  strategies (in addition to weak dominance by pure strategies) does 6 There is, however, a restriction of weak dominance called nice weak dominance which is path-independent [15, 16].
For every variable v that is set to true in the  satisfying assignment, eliminate s+v with the mixed strategy σr that places probability 1/3 on s−v, probability 1/3 on s1 v, and probability 1/3 on s2 v. (The expected utility of  playing σr against t1 v or t2 v is 14/3 > 4; against t3 v or t4 v, it is 4/3 > 1; and against anything else it is 2 /3 > 0.
Now, suppose that there is an elimination path that  eliminates s2.
Now, if we let n(s) be the number of subsets in the cover containing s (we observe that that n(s) ≥ 1), then for every strategy σs for the column player, the row player"s expected utility for playing σ when the column player is playing σs is u(σ, σs) = n(s) k (k + 1) ≥ k+1 k > 1 = u(σ∗ , σs).
For every variable v ∈ V , the row player has strategies s+v, s−v, s1 v, s2 v, s3 v, s4 v, and the column player has strategies t1 v, t2 v, t3 v, t4 v. For every clause c ∈ C, the row player has a strategy sc, and the column player has a strategy tc, as well as, for every literal l occurring in c, an additional strategy tl c. The row player has two additional strategies s1 and s2.
The only other pure strategies that could dominate σi(q) are strategies that play ai for type θ1 i , and bi or ci for all other types.
We will show that, after that, we must eliminate the strategies σi(q) with high q first, slowly working down to those with lower q.
We will show that none of the new strategies (σ1 r , σ2 r , σ3 r , σ1 c , σ2 c , σ3 c ) can either eliminate another strategy, or be eliminated before σ∗ r is eliminated.
Next, for every variable v that is set to false in the assignment, eliminate s2 −v using s1 −v (which is possible because t1 has been eliminated, and because tv has not been eliminated (yet)).
Then, against any action ac by the column player, there is at least one type θv such that either +v ∈ c and σd r (θv) = t, or −v ∈ c and σd r (θv) = f. Thus, the row player"s expected utility against action ac is at least |V | |V | − |V |−1 |V | = 1 |V | > 0.
For any probability q which can be expressed as t2(2−2 + 2−(n+1) ) + n+1 j=3 tj2−j (with all tj ∈ {0, 1}), let σi(q) denote the (unique) strategy of the given form for player i which places a total probability of q on ci.
A Bayesian game is given by a set of  players {1, 2, .
The row player"s utilities are as follows: ur(σSi , σs) = t + 1 if s ∈ Si; ur(σSi , σs) = 0 if s /∈ Si; ur(σ∗ , σs) = 1 for all s ∈ S.  Finally, we let k = t. We now proceed to show that the two instances are equivalent.
That is, there must be at least one variable v such that  setting v to σd r (θv) satifies c. But then, setting each v to σd r (θv) must satisfy all the clauses.
For example, if for some type θr ∈ Θr we have, for all ac ∈ Ac, that u(θr, a1 r, ac) > u(θr, a2 r, ac), then any pure strategy for the row player which plays action a2 r for type θr is dominated (by the strategy that plays  action a1 r for type θr instead)-and there are exponentially many (|Ar||Θr|−1 ) such strategies.
This is because in order for s1 +v to eliminate s2 +v, tv needs to have been eliminated and t1, not (so tv must be eliminated before t1); but in order for s1 −v to eliminate s2 −v, t1 needs to have been eliminated and tv, not (so t1 must be eliminated before tv).
In a Bayesian game, each player first receives privately held preference information (the player"s type) from a  distribution, which determines the utility that that player receives for every outcome of (that is, vector of actions played in) the game.
To show that the problem is NP-hard, we reduce an  arbitrary satisfiability instance (given by a nonempty set of clauses C over a nonempty set of variables V , with  corresponding literals L = {+v : v ∈ V } ∪ {−v : v ∈ V }) to the following two-player game.
Let the row player"s utility function be as follows: • ur(θv, 0, ac) = 0 for all v ∈ V and c ∈ C; • ur(θv, b, ac) = |V | for all v ∈ V , c ∈ C, and b ∈ {t, f} such that setting v to b satisfies c; • ur(θv, b, ac) = −1 for all v ∈ V , c ∈ C, and b ∈ {t, f} such that setting v to b does not satisfy c. 7 In general, a player can also receive a signal about the other players" preferences, but we will not concern ourselves with that here.
• uc(σ3 r , σc) = 1 for all σc /∈ {σ1 c , σ2 c , σ3 c }; • uc(σ∗ r , σj c) = 1 for all j ∈ {2, 3} (σ∗ r is the strategy to be eliminated in the original instance); • uc(σi r, σ1 c ) = 1 for all i ∈ {1, 2}; • ur(σ1 r , σ2 c ) = 1; • ur(σ2 r , σ3 c ) = 1; • and the column player"s utility is 0 in all other cases involving a new strategy.
The utility function for the column player is given as follows: • uc(s, tv) = 0 for all v ∈ V and s ∈ S1; • uc(s, t1) = 0 for all s ∈ S1; • uc(s2 l , tc) = 1 for all c ∈ C and l ∈ L where l ∈ c (literal l occurs in clause c); • uc(s2 l2 , tc,l1 ) = 1 for all c ∈ C and l1, l2 ∈ L, l1 = l2 where l2 ∈ c; • uc(s1 c, tc) = 1 for all c ∈ C; • uc(s2 c, tc) = 0 for all c ∈ C; • uc(sb c, tc,l) = 1 for all c ∈ C, l ∈ L, and b ∈ {1, 2}; • uc(s2, tc) = uc(s2, tc,l) = 0 otherwise for all c ∈ C and l ∈ L; and the column player"s utility is 0 in every other case.
We claim that T is a cover.
For strict dominance, again  assuming without loss of generality that all the utilities in the game are positive, use the following linear program (in which pσr r (θr, ar) is the probability that σr, the strategy to be dominated, places on ar for type θr): minimize θr∈Θr ar∈Ar pr(ar) such that for any ac ∈ Ac, θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pr(θr, ar) ≥ θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pσr r (θr, ar); for any θr ∈ Θr, ar∈Ar pr(θr, ar) ≤ 1.
The utility function for the row player is given as follows: • ur(s1 +v, tv) = 0 for all v ∈ V ; • ur(s2 +v, tv) = 1 for all v ∈ V ; • ur(s1 −v, tv) = 1 for all v ∈ V ; • ur(s2 −v, tv) = 0 for all v ∈ V ; • ur(s1 +v, t1) = 1 for all v ∈ V ; • ur(s2 +v, t1) = 0 for all v ∈ V ; • ur(s1 −v, t1) = 0 for all v ∈ V ; • ur(s2 −v, t1) = 1 for all v ∈ V ; • ur(sb +v, t+v) = 1 for all v ∈ V and b ∈ {1, 2}; • ur(sb −v, t−v) = 1 for all v ∈ V and b ∈ {1, 2}; • ur(sl, t) = 0 otherwise for all l ∈ L and t ∈ S2; • ur(s1 0, tc) = 0 for all c ∈ C; • ur(s2 0, tc) = 1 for all c ∈ C; • ur(sb 0, t1 0) = 1 for all b ∈ {1, 2}; • ur(s1 0, t2 0) = 1; • ur(s2 0, t2 0) = 0; • ur(sb 0, t) = 0 otherwise for all b ∈ {1, 2} and t ∈ S2; • ur(sb c, t) = 0 otherwise for all c ∈ C and b ∈ {1, 2}; and the row player"s utility is 0 in every other case.
The utility function for the column player is given as  follows: • uc(si v, ti v) = 1 for all v ∈ V and i ∈ {1, 2, 3, 4}; • uc(s, ti v) = 0 for all v ∈ V , i ∈ {1, 2, 3, 4}, and s = si v; • uc(sc, tc) = 1 for all c ∈ C; • uc(sl, tc) = 1 for all c ∈ C and l ∈ L occurring in c; • uc(s, tc) = 0 for all c ∈ C and s /∈ {sc} ∪ {sl : l ∈ c}; • uc(sc, tl c) = 1 + for all c ∈ C; • uc(sl , tl c) = 1 + for all c ∈ C and l = l occurring in c; • uc(s, tl c) = for all c ∈ C and s /∈ {sc} ∪ {sl : l ∈ c, l = l }; • uc(s2, t1) = 1; • uc(s, t1) = 0 for all s = s2.
The utility function for the row player is given as follows (where is some sufficiently small number): • ur(s+v, tj v) = 4 if j ∈ {1, 2}, for all v ∈ V ; • ur(s+v, tj v) = 1 if j ∈ {3, 4}, for all v ∈ V ; • ur(s−v, tj v) = 1 if j ∈ {1, 2}, for all v ∈ V ; • ur(s−v, tj v) = 4 if j ∈ {3, 4}, for all v ∈ V ; • ur(s+v, t) = ur(s−v, t) = 0 for all v ∈ V and t /∈ {t1 v, t2 v, t3 v, t4 v}; • ur(si v, ti v) = 13 for all v ∈ V and i ∈ {1, 2, 3, 4}; • ur(si v, t) = for all v ∈ V , i ∈ {1, 2, 3, 4}, and t = ti v; • ur(sc, tc) = 2 for all c ∈ C; • ur(sc, t) = 0 for all c ∈ C and t = tc; • ur(s1, t1) = 1 + ; • ur(s1, t) = for all t = t1; • ur(s2, t1) = 1; • ur(s2, tc) = 1 for all c ∈ C; • ur(s2, t) = 0 for all t /∈ {t1} ∪ {tc : c ∈ C}.
Consider the following game: 7, 1 0, 0 0, 0 0, 0 7, 1 0, 0 3, 0 3, 0 0, 0 0, 0 0, 0 3, 1 1, 0 1, 0 1, 0 Let (i, j) denote the outcome in which the row player plays the ith row and the column player plays the jth column.
For weak dominance, use the following linear program: maximize ac∈Ac ( θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pr(θr, ar)− θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pσr r (θr, ar)) such that for any ac ∈ Ac, θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pr(θr, ar) ≥ θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pσr r (θr, ar); for any θr ∈ Θr, ar∈Ar pr(θr, ar) = 1.
• ui(θ1 i ; ai, ci+1, ci+2) = −1; • ui(θ1 i ; ai, si+1, si+2) = 0 for si+1 = ci+1 or si+2 = ci+2; • ui(θ1 i ; bi, si+1, si+2) = − for si+1 = ai+1 and si+2 = ai+2; • ui(θ1 i ; bi, si+1, si+2) = −∞ for si+1 = ai+1 or si+2 = ai+2; • ui(θ1 i ; ci, si+1, si+2) = −∞ for all si+1, si+2; • ui(θj i ; ai, si+1, si+2) = −∞ for all si+1, si+2 when j > 1; • ui(θj i ; bi, si+1, si+2) = − for all si+1, si+2 when j > 1; • ui(θj i ; ci, si+1, ci+2) = δ − − 1/2 for all si+1 when j > 1; • ui(θj i ; ci, si+1, si+2) = δ− for all si+1 and si+2 = ci+2 when j > 1.
We are given the row player"s utilities of a game in normal form, a distinguished strategy σ∗ for the row player, a specification of whether the dominance should be strict or weak, and a number k. We are asked whether there exists a mixed  strategy σ for the row player that places positive probability on at most k pure strategies, and dominates σ∗ in the required sense.
We now show that this is true by exhausting all possibilities for the first elimination before σ∗ r is eliminated that involves a new  strategy.
From Claim 2, it follows that all strategies of the form σi(q) will eventually be eliminated.
However, if we eliminate row 3 first, it becomes impossible to dominate row 5 without randomizing over at least 3 pure strategies.
Finally, σ1 c is the unique best response against σ1 r among the column player"s remaining strategies, so let it eliminate all the other remaining  strategies for the column player.
We will investigate two questions for iterated weak dominance: whether a given strategy is eliminated in some path, and whether there is a path to a unique solution (one pure strategy left per player).
Then, let σ1 r eliminate all the other  remaining strategies for the row player.
Second, the proof of dominance will be cleaner: for a dominating mixed strategy, it is typically (always in the case of strict dominance) possible to spread some of the probability onto any unused pure strategy and still have a dominating  strategy, but this obscures which pure strategies are the ones that are key in making the mixed strategy dominating.
Because of this, to see whether a given strategy can be eliminated by iterated strict dominance, all that needs to be done is to  repeatedly remove strategies that are strictly dominated, until no more dominated strategies remain.
It is therefore  conceivable that we need only polynomially many eliminations of collections of a player"s strategies.
It follows that for each v ∈ V , at most one of the strategies s+v, s−v is eliminated, in such a way that for every clause c, for one of the literals l occurring in it, sl must be eliminated.
Thus, there must be a sequence of eliminations ending in the elimination of σ∗ r , which does not involve any of the new strategies, and is therefore a valid sequence of  eliminations in the original game (because all original strategies perform the same against each new strategy).
(This is a valid dominance  because s1 performs better than s2 against any strategy other than those in {tc : c ∈ C}, which we eliminated in step 3.)
If σ gets a utility of 1 against some opponent strategy (or vector of opponent strategies if there are more than 2 players), then all the pure strategies that σ∗ places positive probability on must also get a utility of 1 against that opponent strategy (or else the expected utility would be smaller than 1).
Similarly, for every variable v that is set to false in the satisfying assignment, eliminate s−v with the mixed strategy σr that places probability 1/3 on s+v, probability 1/3 on s3 v, and probability 1/3 on s4 v. (The expected utility of playing σr against t1 v or t2 v is 4/3 > 1; against t3 v or t4 v, it is 14/3 > 4; and against anything else it is 2 /3 > 0.
Then, perform the same sequence of eliminations to eliminate σ∗ r in the new IWD-UNIQUE-SOLUTION instance.
Suppose that all the utilities in a game are in {0, 1}.
Proof: Consider the strategy for player i that plays ai for type θ1 i , and bi for all other types (call this strategy σi); we claim σi dominates σi(q).
Thus, when q = 0, it is best to set p as high as possible (and we note that σi+1(0) and σi+2(0) have not been eliminated), but when q > 0, it is best to set p as low as possible because δ < q /2.
For every clause c which has the variable corresponding to one of its positive literals l = +v set to true in the assignment, eliminate tc using tc,l (which is possible because s2 l has been eliminated, and s2 c has not been eliminated (yet)).
Then, for every variable v that is set to true in the  assignment, eliminate s2 +v using s1 +v (which is possible because tv has been eliminated, and because t1 has not been eliminated (yet)).
σ1 c cannot eliminate any other strategy, because it always performs poorer against either σ∗ r or σ3 r .
Thus, against any ac by the column player, there must at least be some type θv for which ur(θv, σd r (θv), ac) > 0.
We add three additional strategies σ1 r , σ2 r , σ3 r for the row player, and three additional strategies σ1 c , σ2 c , σ3 c for the column player.
Let us take such a strategy and suppose that it plays c with probability p. Against σi+1(q ), σi+2(q ) (which have not yet been eliminated), the utility of playing this  strategy is −(q )2 /2 − /2 + p · δ − p · q /2.
(Besides not proving the result for  dominance by mixed strategies, the original result was weaker  because it required utilities {0, 1, 2, 3, 4, 5, 6, 7, 8} rather than just {0, 1} (and because of this, our Lemma 1 cannot be applied to it to get the result for mixed strategies).)
A pure strategy in a Bayesian game is a mapping from types to actions, σi : Θi → Ai, where σi(θi) denotes the action that player i plays for type θi.
Let the additional utilities be as follows: • ur(σr, σj c) = 1 for all σr /∈ {σ1 r , σ2 r , σ3 r } and j ∈ {2, 3}; • ur(σi r, σc) = 1 for all i ∈ {1, 2, 3} and σc /∈ {σ2 c , σ3 c }; • ur(σi r, σ2 c ) = 1 for all i ∈ {2, 3}; • ur(σ1 r , σ3 c ) = 1; • and the row player"s utility is 0 in all other cases  involving a new strategy.
To show that the problem is NP-hard, we reduce an  arbitrary satisfiability instance (given by a nonempty set of clauses C over a nonempty set of variables V , with  corresponding literals L = {+v : v ∈ V } ∪ {−v : v ∈ V }) to the following IWD-STRATEGY-ELIMINATION instance.
to the following MINIMUM-DOMINATING-SET instance.
After receiving this type, the player plays an action based on it.7 Definition 5.
IWD-UNIQUE-SOLUTION is NP-complete, even with 2 players, and with 0 and 1 being the only  utilities occurring in the matrix-whether or not dominance by mixed strategies is allowed.
Consider the (at most k) pure strategies of the form σSi on which the dominating mixed strategy σ places positive probability, and let T be the collection of the corresponding subsets Si.
Given a game in normal form and a  distinguished strategy σ∗ , IWD-STRATEGY-ELIMINATION asks whether there is some path of iterated weak dominance that eliminates σ∗ .
For every variable v that is set to true in the assignment, eliminate tv (which gives the column player utility 0 everywhere).
We first observe that only s1 0 can eliminate s2 0 = σ∗ r , because it is the only other strategy that gets the row player a utility of 1 against t1 0, and t1 0 is uneliminable.
But, s1 performs significantly worse than s2 against any strategy tc with c ∈ C, so it follows that all these strategies must be eliminated first.
Given a game in normal form,  IWDUNIQUE-SOLUTION asks whether there is some path of iterated weak dominance that leads to a unique solution (one strategy left per player).
(ITERATED) DOMINANCE USING MIXED STRATEGIES WITH SMALL SUPPORTS When showing that a strategy is dominated by a mixed strategy, there are several reasons to prefer exhibiting a 92 dominating strategy that places positive probability on as few pure strategies as possible.
But then setting all the literals l such that sl is eliminated to true constitutes a solution to the satisfiability instance.
Because the utility function is the same for any type θj i with j > 1, these strategies are effectively defined by the total probability that they place on ci,8 which is t2 i (2−2 + 2−(n+1) ) + n+1 j=3 tj i 2−j where tj i = 1 if player i 8 Note that the strategies are still pure strategies; the  probability placed on an action by a strategy here is simply the sum of the probabilities of the types for which the strategy chooses that action.
96 It follows that an efficient algorithm for iterated  dominance (strict or weak) by pure strategies in Bayesian games, if it exists, must somehow be able to perform (at least part of) many iterations in a single step of the algorithm (because if each step only performed a single iteration, we would need exponentially many steps).
Hence the dominance is valid.)
For every clause c which has the variable corresponding to one of its negative literals l = −v set to false in the assignment, eliminate tc using tc,l 91 (which is possible because s2 l has been eliminated, and s2 c has not been eliminated (yet)).
First, if either of the other players k plays ak for θ1 k, then σi performs better than σi(q) (which receives −∞ in some cases).
Claim 2: If for all q > q, σi+1(q ) and σi+2(q ) have been eliminated, then σi(q) can be eliminated.
For every clause c ∈ C, the column player has a corresponding strategy tc, and additionally, for every literal l ∈ L that occurs in c, a strategy tc,l.
Any vector of pure strategies in a Bayesian game defines an (expected) utility for each player, and therefore we can translate a Bayesian game into a normal form game.
Then, let σd r be given by: σd r (θv) = t if v is set to true in the solution to the satisfiability instance, and σd r (θv) = f otherwise.
σ1 r cannot  eliminate any other strategy, because it always performs poorer against σ2 c .
IWD-STRATEGY-ELIMINATION is  NPcomplete, even with 2 players, and with 0 and 1 being the only utilities occurring in the matrix-whether or not  dominance by mixed strategies is allowed.
None of the σi r can be eliminated by a σr /∈ {σ1 r , σ2 r , σ3 r }, because the σi r perform better against σ1 c .
The problem is in NP because we can  nondeterministically choose a set of at most k strategies to give positive probability, and decide whether we can dominate σ∗ with these k strategies as described in Proposition 1.
The problem is in NP because given a sequence of strategies to be eliminated, we can easily check whether this is a valid sequence of eliminations (even when  dominance by mixed strategies is allowed, using Proposition 1).
Moreover, at least one of the pure strategies that σ∗ places positive probability on must get a utility of 1 against an opponent strategy that σ gets 0 against (or else the inequality would never be strict).
As a result, if strategy s+v (respectively, s−v) is  eliminated, then its opposite strategy s−v (respectively, s+v) can no longer be eliminated, for the following reason.
The strategy that eventually dominates s2 must place most of its probability on s1, because s1 is the only other strategy that performs well against t1, which cannot be eliminated before s2.
For every subset Si, there is a pure strategy σSi for the row player.
Hence the dominance is valid.)
Hence, there is an elimination path that eliminates s2.
This requires only O(|Σi|k ) such checks.
We will be interested in eliminating strategies of the  following form: play bi for type θ1 i , and play one of bi or ci otherwise.
Claim 1: If σi+1(q ) and σi+2(q ) have not yet been  eliminated, and q < q , then σi(q) cannot yet be eliminated.
(ITERATED) DOMINANCE IN BAYESIAN GAMES So far, we have focused on normal form games that are flatly represented (that is, every matrix entry is given  ex94 plicitly).
Of course, if iterated strict  dominance were path-independent under this restriction,  computational easiness would follow as it did in Section 4.
σ3 c cannot  eliminate any other strategy, because it always performs poorer against σ1 r or σ3 r .
By Lemma 1, we can assume that all the dominances are by pure strategies.
Because q > q, we have −(q )2 /2 < −q · q /2, and because δ and are small, it follows that σi(q) receives a higher utility.
In the next section, we return to the setting where there is no restriction on the number of pure strategies on which a dominating mixed strategy can place positive probability.
On the other hand, if we require that the dominating strategy only places positive probability on a very small number of pure strategies, then it once again becomes easy to check whether a strategy is dominated.
Finally, for every clause c ∈ C, the row player has corresponding strategies s1 c  (uneliminable) and s2 c. Let the column player"s pure strategy set be given as follows.
If we restrict the dominating strategies to place positive probability on at most two pure strategies, iterated strict dominance becomes path-dependent.
For every element s ∈ S, there is a pure strategy σs for the column player.
None of the σj c can be eliminated by a σc /∈ {σ1 c , σ2 c , σ3 c }, because the σj c always perform  better against either σ1 r or σ2 r .
However, because s2 0 performs better than s1 0 against the tc strategies, it follows that all of the tc strategies must be eliminated.
plays ci for type θj i , and 0 otherwise.
This makes it impossible to eliminate any of these three strategies.
We next show that for every v ∈ V only one of s2 +v, s2 −v can be eliminated.
Let the row player"s type set be Θr = {θv : v ∈ V }, with a distribution πr that is uniform.
By Lemma 1, we can assume that all the dominances are by pure strategies.
Na¨ıvely, one might argue that iterated dominance in Bayesian 95 games always requires an exponential number of steps when a significant fraction of the game"s pure strategies can be eliminated, because there are exponentially many pure  strategies.
The problem is in NP because it is easy to verify whether a candidate dominating strategy is indeed a  dominating strategy.
Only s1 l can eliminate s2 l , because it is the only other strategy that gets the row player a utility of 1 against tl, and tl is uneliminable.
In this normal form game, the notions of dominance and iterated dominance are defined as before.
, n}; and, for each player i, a (finite) set of actions Ai, a (finite) type space Θi with a probability  distribution πi over it, and a utility function ui : Θi × A1 × A2 × .
Thus, whether q > q or q < q , σi(q) will always do strictly better than σi(q ) against some remaining opponent  strategies.
σ2 c cannot eliminate any other strategy, because it always performs poorer against σ2 r or σ3 r .
[11] argue that iterated dominance appears to be an inherently sequential problem (in light of their result that iterated very weak dominance is P-complete, that is, apparently not  efficiently parallelizable), suggesting that aggregating many iterations may be difficult. 
Because (1, 1), (2, 2), and (4, 3) are all Nash equilibria, none of the column player"s pure strategies will ever be eliminated, and neither will rows 1, 2, and 4.
In this proof, we will denote row player strategies by s, and column player strategies by t, to improve legibility.
(This is a valid dominance  because tl c performs better than tc against any strategy other than sl, and we eliminated sl in step 1 or in step 2.)
(In this instance, we will specify that certain strategies are  uneliminable.
For every c ∈ C, eliminate tc with any tl c for which l was set to true in the satisfying assignment.
This dominating strategy must play t or f for at least one type.
Then every pure strategy that is weakly dominated by a mixed strategy is also weakly dominated by a pure strategy.
In fact, it turns out that checking whether a  strategy is dominated by a pure strategy is hard in Bayesian games.
Let each player i ∈ {1, 2, 3} have n + 1 types θ1 i , θ2 i , .
Any strategy that plays ci for type θ1 i or ai for some type θj i with j > 1 can immediately be eliminated.
This probability is different for any two different strategies of the given form, and we have exponentially many different strategies of the given form.
(It performs better against σ2 r .)
On the other hand, the utility of playing σi(q) is − + q · δ − q · qi+2/2.
3. σc is the only strategy that gives the column player a utility of 1 against σr, but otherwise σc always gives the column player utility 0.
Now eliminate t1 (which gives the column player utility 0 everywhere).
Then, consider the following sequence of eliminations in our game: 1.
But, each strategy tl c performs significantly worse than tc against sl, so it follows that for every clause c, for one of the literals l occurring in it, sl must be eliminated first.
Let all the strategies for each player from the original instance  remain part of the new instance, and let the utilities resulting from the players playing a pair of these strategies be the same.
Now, suppose there is a dominating pure strategy σd r .
A natural question to ask next is whether iterated strict dominance remains computationally easy when dominating strategies are required to place positive probability on at most k pure strategies, where k is a small constant.
This program will return an objective value greater than 0 if and only if σr is weakly dominated, by reasoning similar to that done in Proposition 1.
But, in order for some tc,l to eliminate tc, s2 l must be eliminated first.
To show that the problem is NP-hard, we reduce an arbitrary satisfiability instance (given by a set of clauses C using variables from V ) to the following Bayesian game.
Let the row player"s pure strategy set be given as follows.
Now,  strategies of the form tj v will never be eliminated because they are the unique best responses to the corresponding strategies sj v (which are, in turn, the best responses to the corresponding tj v).
Then, consider the  following sequence of eliminations in our game: 1.
So, σd r is a dominating strategy.
Even in symmetric 3-player Bayesian games, iterated dominance by pure strategies can require an  exponential number of iterations (both for strict and weak  dominance), even with only three actions per player.
Thus, we can eliminate s2 0 = σ∗ r using s1 0.
(In the below, i + 1 and i + 2 are shorthand for i + 1(mod 3) and i + 2(mod 3) when used as player indices.
Because there are exponentially many strategies of the form σi(q), it follows that iterated elimination will require  exponentially many iterations to complete.
For every variable v ∈ V , the column player has corresponding strategies t+v, t−v (both uneliminable).
[11] slightly  improve on (speed up) the straightforward implementation of this procedure by keeping track of, for each ordered pair of strategies for a player, the number of opponent strategies that prevent the first strategy from dominating the second.
However, the normal form representation of the game is exponentially larger than the Bayesian representation, because each player i has |Ai||Θi| distinct pure strategies.
Against σi+1(q ), σi+2(q ), the utility of  playing σi(p) is − + p · δ − p · q /2.
Letting qk denote the probability with which player k plays ck, the expected utility of playing σi is −qi+1 · qi+2/2 − /2.
In a Bayesian game, it can be decided in polynomial time whether a given (possibly mixed) strategy σr is dominated by some other mixed strategy, using linear programming (both for strict and weak dominance).
It follows that there is a solution to the IWD-STRATEGY-ELIMINATION instance.
So σ strictly (and thus also weakly) dominates σ∗ , and there exists a solution to the MINIMUM-DOMINATING-SET instance.
We will prove the hardness results in this setting, so that they will hold whether or not dominance by mixed strategies is allowed.
Finally, the column player has one additional strategy t1.
For suppose there is some s ∈ S that is not in any of the subsets in T .
Therefore, no strategy dominates σi(q), proving the claim.
Once σ∗ r is eliminated, let σ1 c eliminate σ2 c .
A slightly weaker version of the part of Theorem 2  concerning dominance by pure strategies only is the main result of Gilboa et al.
Because we can check in polynomial time whether any given strategy is dominated (whether or not dominance by mixed strategies is allowed, as described in Section 3), this whole procedure takes only polynomial time.
Let the row player"s action set be Ar = {t, f, 0} and let the column player"s action set be Ac = {ac : c ∈ C}.
Because the assignment  satisfied the formula, all the tc have now been eliminated.
For every variable v ∈ V , the column player has a corresponding strategy tv.
Proof: First, we show that no strategy σi(q ) can  eliminate σi(q).
However, this is not a very strong argument because oftentimes we can eliminate exponentially many pure  strategies in one step.
However, it turns out that we can modify the linear  programs from Proposition 1 to obtain a polynomial time  algorithm for checking whether a strategy is dominated by a mixed strategy in Bayesian games.
On the other hand, playing σi(q) gives − + q · δ − q · q /2.
Let the distribution over each player"s types be given by p(θj i ) = 2−j (with the exception that p(θ2 i ) = 2−2 +2−(n+1) ).
For every variable v ∈ V , the row player has corresponding strategies s1 +v, s2 +v, s1 −v, s2 −v.
It follows that this pure strategy weakly dominates σ.
It follows that there exists a solution to the SET-COVER instance.
We now observe that randomizing uniformly over rows 1 and 2 dominates row 3, and randomizing uniformly over rows 3 and 4 dominates row 5.
Again, the problem is in NP because we can  nondeterministically choose the sequence of eliminations and verify whether it is correct.
Unfortunately, this problem is NP-complete.
Thus, any algorithm for Bayesian games that relies on expanding the game to its normal form will require exponential time.
(It always performs better against either σ1 c or σ3 c .)
Let each player i have 3 actions ai, bi, ci, and let the utility function of each player be defined as  follows.
Hereby the runtime for an m × n game is reduced from O((m + n)4 ) to O((m + n)3 ).
Suppose pure strategy σ is weakly dominated by mixed strategy σ∗ .
First, suppose there is a solution to the satisfiability  instance: that is, a truth-value assignment to the variables in V such that all clauses are satisfied.
2. σr and σr always give the row player the same utility.
Fourth, the level of risk  neutrality required for the argument to work is reduced, at least in the extreme case where dominance by a single pure strategy can be exhibited (no risk neutrality is required here).
To show NP-hardness, we reduce an arbitrary SET-COVER  instance (given a set S, subsets S1, S2, .
Assuming that π(θr) > 0 for all θr ∈ Θr, this program will return an objective value smaller than |Θr| if and only if σr is strictly dominated, by reasoning similar to that done in Proposition 1.
Finally, eliminate s2 with s1.
MINIMUM-DOMINATING-SET is  NPcomplete, both for strict and for weak dominance.
Third, because (by the previous) the argument for eliminating the dominated strategy is simpler and easier to understand, it is more likely to be accepted.
We are now ready to prove the main results of this section.
Finally, the column player has three additional strategies: t1 0 (uneliminable), t2 0, and t1.
Hence, no strategy σi(q ) can eliminate σi(q).
First, suppose that there is a solution to the satisfiability instance.
, an) denotes player i"s utility when i"s type is θi and each player j plays action aj).
In the case of iterated dominance by pure strategies with two players, Knuth et al.
We now turn to iterated dominance in Bayesian games.
It follows that σi dominates σi(q).
(Actually, they only study very weak dominance (for which no strict inequalities are required), but the approach is easily extended.)
We now move on to iterated dominance.
Bayesian games, besides being of interest in their own right, can be thought of as a useful structured  representation of normal form games, and we will study them in this section.
We note that among these strategies, there are none left that place probability greater than q on ck.
, θn+1 i .
Indeed, iterated strict dominance turns out to be hard even when k = 3.
Now suppose there is a solution to the  IWD-STRATEGYELIMINATION instance.
First, suppose there is a solution to the satisfiability  instance.
Lemma 1.
First suppose there exists a solution to the original  IWDSTRATEGY-ELIMINATION instance.
Using Theorem 1, it is now (relatively) easy to show that IWD-UNIQUE-SOLUTION is also NP-complete under the same restrictions.
However, for many games, the flat representation is too large to write down explicitly, and instead, some  representation that exploits the structure of the game needs to be used.
Finally, δ and should be chosen to be very small (even compared to 2−(n+1) ), and should be more than twice as large as δ.)
× An → R (where ui(θi, a1, a2, .
First suppose there exists a solution to the SET-COVER instance.
We proceed to show that the two instances are equivalent.
Now suppose there exists a solution to the  MINIMUMDOMINATING-SET instance.
Now suppose there exists a solution to the  IWD-UNIQUESOLUTION instance.
We now show that the two instances are equivalent.
We now show that the two instances are equivalent.
For an overview of path-independence results, see Apt [1].
Theorem 1.
Without loss of generality, we can assume that there are exactly k subsets in the cover.
Thus, if k is a constant, this  constitutes a polynomial-time algorithm.
This motivates the following problem.
Thus, there exists a solution to the  IWDSTRATEGY-ELIMINATION instance.
Thus, there exists a solution to the IWD-UNIQUE-SOLUTION instance.
Theorem 2.
So a satisfying assignment  exists.
We will not explicitly specify the additional strategies to make the proof more legible.)
Observation 1.
To show NP-hardness, we reduce an arbitrary IWD-STRATEGY-ELIMINATION instance to the following IWD-UNIQUE-SOLUTION instance.
Specifically, our easiness  results for normal form games do not directly transfer to this setting.
, Sr, and a number t, can all of S be covered by at most t of the subsets?)
Because qi+1 ≤ q, the difference between these two expressions is at least /2 − δ, which is positive.
We will show that both of these problems are  computationally hard.
Also, −∞ can be replaced by a sufficiently negative  number.
Theorem 3.
However, it turns out that this is not the case.
(We emphasize that this is not a result about computational complexity.)
We can modify the linear programs presented in Proposition 1 as follows.
Theorem 5.
Theorem 4.
90 not help.
Theorem 6.
Theorem 7.
Definition 3.
93 Proof.
Definition 4 (MINIMUM-DOMINATING-SET).
Interestingly, Knuth et al.
