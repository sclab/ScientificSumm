Our evaluation in Section 5 showed that Ganesh, when compared to Native, can deliver a substantial throughput  improvement at lower bandwidths.
It is only at higher bandwidths that  latency, measured by the average response time for a client request, and throughput, measured by the number of client requests that can be serviced per second, overheads would be visible.
The only exception to the above results was seen in the filter variant of the BBOARD benchmark where Ganesh at 1600 test clients added 0.85 seconds to the average response time.
Looking at the Authoring mix of the original BBOARD  benchmark, there are no visible gains from Ganesh at 100 Mb/s.
Even for the AUCTION  benchmark, the difference between Native and Ganesh"s response time at 100 Mb/s was never greater than 0.02 seconds.
While the  average response time is higher for Ganesh, the absolute difference is in between 0.01 and 0.04 seconds and would be imperceptible to the end-user.
Thus, even for much faster networks where the WAN link is not the bottleneck, Ganesh always delivers throughput equivalent to Native.
The Browsing mix shows an even smaller difference in average response times.
To  answer this question, we concentrate on its performance at the higher bandwidths.
Ganesh, however, still tracks Native in terms of throughput.
While some extra latency is added by the proxy-based design, it is usually imperceptible. 
The results from the filter variant of the BBOARD benchmarks are similar.
In this section, we address the third question raised in Section 4: Is the overhead of Ganesh"s proxy-based design acceptable?
