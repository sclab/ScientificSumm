Consider the connectivity game on a layer graph G, with a single source vertex s and target vertex t. The Banzhaf index of the edge e is the number of subsets of edges that allow a path between s and t, but do not allow such a path when e is removed (divided by a constant).
We define Pv as the number of subsets E ⊂ Predv that contain a path from s to v. Similarly, let Vi ∈ V be the subset of all the vertices in the same layer Li.
PSi counts the number of edge subsets in PredVi that connect exactly the  vertices in Si.
We say E ∈ PredV connects exactly the vertices in Si ⊂ Vi if all the vertices in Si are reachable from s using the edges in E but no other vertices in Vi are reachable from s using E , so Vi(E ) = Si.
The algorithm considers every subset of possible vertices in the current layer, and every possible subset of expanding edges to the next layer, and updates the value of the appropriate subset in the next layer.
A c-bounded layer graph is a layer graph where the number of vertices in each layer is bounded by some constant number c. Although there is no limit on the number of layers in a bounded layer graph, the structure of such graphs makes it possible to  calculate the Banzhaf index of edges in connectivity games on such graphs.
We denote by Dests(Si, E) the set of vertices in layer Li+1 that are connected to some vertex in Si by an edge in E: Dests(Si, E) = {v ∈ Vi+1|there exists some w ∈ Si and some e ∈ E that e = (w, v)}.
We can calculate P{t} = P{t}(G) for G using the algorithm to count the number of subsets of edges that allow a path from s to t. We can then remove e from G to obtain the graph G =< V, E \ {e} >, and calculate P{t} = P{t}(G ).
The edges run only between consecutive layers.
Algorithm 1 1: procedure CONNECTING-EXACTLY-SUBSETS(G, v) 2: P{s} ← 1 Initialization 3: for all other subsets of vertices S do Initialization 4: PS ← 0 5: end for 6: for i ← 0 to n − 1 do Iterate through layers 7: for all vertex subsets Si in Li do 8: for all edge subsets E between Li, Li+1 do 9: D ← Dests(Si, E) subset in Li+1 10: PD ← PD + PSi 11: end for 12: end for 13: end for 14: end procedure A c-bounded layer graph contains at most c vertices in each layer, so for each layer there are at most 2c different subsets of vertices in that layer.
Let Predv ⊂ E be the subset of edges that occur before v. Consider a subset of these edges, E ⊂ Predv.
Consider a subset of these edges, E ⊂ PredV .
According to Lemma 1, if we iterate over the different Si"s in layer Li, the PSi "s count different subsets of edges, and thus every  expansion using the edges in E is also different.
Let Vi(E ) be the subset of vertices in Vi that are reachable from s using only the edges in E : Vi(E ) = {v ∈ Vi|E contains a path from s to v}.
Consider such a subset E counted in PSi .
E ∪ E is a subset of edges in PredVi+1 that connects exactly to Dest(Si, E).
We define PV as the number of subsets E ⊂ PredV that connect exactly the vertices in V : PV = |{E ⊂ PredV |Vi(E ) = V }|.
Let E , E ⊂ PredVi be two sets of edge subsets, so that E connects exactly the vertices in S1 and E connects exactly the vertices in S2: Vi(E ) = S1 and Vi(E ) = S2.
The algorithm provided below is indeed polynomial in the number of vertices given that the network is a c-bounded layer graph.
A layer graph is a graph G =< V, E >, with source vertex s and target vertex t, where the vertices of the graph are partitioned into n + 1 layers, L0 = {s}, L1, ..., Ln = {t}.
We say an edge e occurs before v if it connects two vertices in v"s layer or a previous layer: e = (u, w) connects vertex u ∈ Lj to vertex w ∈ Lj+1 and j + 1 ≤ i.
For each layer Li and every subset of edges in that layer Si ⊂ Vi, it calculates PSi .
IN BOUNDED LAYER GRAPH  CONNECTIVITY GAMES We here present a polynomial algorithm to calculate the Banzhaf index of an edge in a connectivity game, where the network is a bounded layer graph.
It does so using the values calculated in the previous layer.
Let Ei ⊂ E be the set of edges between the vertices in layer Li and layer Li+1.
Let PredVi ⊂ E be the subset of edges that occur before Vi (all the vertices in Vi are in the same layer, so any edge that occurs before some v ∈ Vi occurs before any other vertex w ∈ Vi).
Let V ⊂ Vi be a subset of the vertices in layer Li.
Thus, this algorithm allows us to calculate the Banzhaf index on an edge in the connectivity games on bounded layer graphs.
Let Si ⊂ Vi be a subset of vertices in Li and E ⊂ Ei be some subset of the edges between layer Li and layer Li+1.
If E = E then both sets of edges allow the same paths from s, so Vi(E ) = Vi(E ).
The Sixth Intl.
If the graph contains k layers, the running time of the algorithm is bounded by k·2c ·2(c2 ) .
Let v be a vertex in layer Li.
The difference P{t}(G) − P{t}(G ) is the number of subsets of edges that contain a path from s to t but no longer contain such a path when e is removed.
Let Si ⊂ Vi be a subset of vertices in layer Li.
There are also at most c2 edges between 2 consecutive layers, and thus at most 2(c2 ) edge subsets between two layers.
Since c is a constant, this is a polynomial algorithm.
Let E ⊂ Ei be some subset of these edges.
Bounded layer graphs may occur in networks when the nodes are located in several ordered segments, where nodes can be connected only between  consecutive segments.
Then E and E do not contain the same edges: E = E .
This positive result indicates that for some restricted domains of network flow games, it is possible to calculate the Banzhaf index in a reasonable amount of time.
Let S1, S2 ⊂ Vi where S1 = S2 be two different subsets of vertices in the same layer.
It iterates through the layers, and updates the data for the next layer given the data for the current layer.
E may contain a path from s to v, or it may not.
However, there is a constant factor to the running time, which is exponential in c. Therefore, this method is only tractable for graphs where the bound c is small.
The Banzhaf index for e is P{t}(G)−P{t}(G ) 2|E|−1 .
Algorithm 1 calculates Pt.
LEMMA 1.
DEFINITION 3.
DEFINITION 4.
on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 339 
Joint Conf.
