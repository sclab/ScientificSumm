Theorem 4.4 Suppose algorithm A satisfies the conditions in Algorithm 1 and returns a makespan of at most c·OPT(p) for every p. Then, the algorithm A constructed above is a 2c-approximation, cycle-monotone fractional algorithm.
Algorithm 1 Let A be any algorithm that on any input p outputs a possibly fractional assignment x such that xij > 0 implies that pij ≤ T, where T is the makespan of x.
Second, we obtain our randomized mechanism by (a) first moving to a fractional domain, and  constructing a fractional truthful mechanism that is allowed to return fractional assignments; then (b) using a rounding procedure to express the fractional schedule as a convex combination of integer schedules.
We first show that any algorithm that returns a fractional assignment having certain properties satisfies cycle monotonicity.
Then A satisfies cycle-monotonicity.
We will show that for every such maximal segment k , k +1, .
If pk ij is the same for all k (either always Lj or always Hj), then the above inequality clearly holds.
We take each job j assigned to a high machine and assign it to an extent 1/m on all machines; for each job j assigned to a low machine, say i, we assign 1/m-fraction of it to the other machines where it is low, and assign its remaining fraction (which is at least 1/m) to i.
Thus, there is some k∗ such that for k ≤ k < k∗ , we have pk ij = Hj, and for k∗ ≤ k ≤ k , we have pk ij = Lj.
It seems unlikely that for an arbitrary approximation algorithm given only as a black box, one would be able to come up with payments in order to prove truthfulness; but cycle-monotonicity allows us to prove  precisely this.
We also have that if pij = Hj then xF ij = P i :pi j =Hj xi j/m ≤ 1/m.
Now the left hand side of the above inequality for this segment is simply xk ij (Lj −Hj)+xk∗ ij (Hj −Lj) ≥ 0, since xk ij ≤ 1 m ≤ xk∗ ij as pk ij = Hj and pk∗ ij = Lj.
Also observe that the load on any machine has at most increased by 1 m · (load on other machines) ≤ makespan, and hence the makespan has at most doubled.
First, note that xF is a valid assignment: for every job j, P i xF ij = P i xij + P i,i =i:pij =pi j =Lj (xi j − xij)/m = P i xij = 1.
The total load on any machine i under xF is at mostP j:pij =Hj P i :pi j =Hj Hj· xi j m + P j:pij =Lj Lj ` xij+ P i =i xi j m ´ , which is at most P j pijxij + P i =i P j pi jxi j/m ≤ 2c · OPT(p).
Taking A in Algorithm 1 to be the algorithm that returns an LP-optimum assignment satisfying the required  conditions (see [18, 25]), we obtain a 3-approximation mechanism.
This conversion works even when the approximation algorithm returns only a fractional schedule (satisfying certain properties) of makespan at most c · OPT(p) for every instance p. We prove truthfulness by showing that the fractional algorithm satisfies cycle  monotonicity (3).
Lemma 4.3 Let A be an algorithm that for any input p, outputs a (fractional) assignment x such that, if pij = Hj then xij ≤ 1/m, and if pij = Lj then xij ≥ 1/m.
Then there exist payments P such that the  mechanism M = (A, P ) is truthful in expectation.
We take k = k and then keep including indices in this segment till we reach a k such that pk ij = Lj and pk+1 ij = Hj.
We set k = k, and then start a new maximal segment with index k + 1.
We need to prove (3), that is, PK k=1 P j xk+1 ij ` pk ij − pk+1 ij ´ ≥ 0 for every p1 i , .
Moreover, if xF ij > 0 on input p, then pij ≤ c · OPT(p).
For every i, j, 1. if pij = Hj, set xF ij = P i :pi j =Hj xi j/m; 2. if pij = Lj, set xF ij = xij + P i =i:pi j =Lj (xi j −xij)/m+ P i :pi j =Hj xi j/m.
Let OPT(p) denote the optimal makespan (over integer schedules) for instance p. As our first step, we take a  capproximation algorithm and convert it to a 2c-approximation fractional truthful mechanism.
Lemma 4.1 (Lavi and Swamy [16]) Let M = (x, P) be a fractional truthful mechanism.
Property 1 will be used to obtain truthfulness in  expectation, and property 2 will allow us to prove an approximation guarantee.
[14]) Given a fractional  assignment x and a processing time vector p, there exists a randomized rounding procedure that yields a (random)  assignment X such that, 1. for any i, j, E ˆ Xij ˜ = xij.
This follows because there must be some k such that pk ij = Hj > pk−1 ij = Lj.
So now focus on a maximal segment k , k + 1, .
We will show that for every job j, PK k=1 xk+1 ij ` pk ij − pk+1 ij ´ ≥ 0.
If pij = Hj, then for some i (possibly i) with pi j = Hj we have xi j > 0, so by assumption, pi j = Hj = pij ≤ c · OPT(p).
If pij = Lj, then xF ij = xij(1 − /m) + P i =i xi j/m where = |{i = i : pi j = Lj}| ≤ m − 1; so xF ij ≥ P i xi j/m ≥ 1/m.
To convert this fractional truthful mechanism into a randomized truthful mechanism we need a randomized rounding procedure satisfying the  requirements of Lemma 4.1.
Our algorithm, which we call A , returns the following assignment xF .
Let A be a randomized rounding algorithm that given a fractional assignment x, outputs a random assignment X such that E ˆ Xij ˜ = xij for all i, j.
Notice that the alternative-set of our fractional mechanism is finite (although the set of all fractional  assignments is infinite): its cardinality is at most that of the  inputdomain, which is at most 2mn in the two-value case.
We now describe how to use a c-approximation algorithm to obtain an algorithm satisfying the property in Lemma 4.3.
For simplicity, first suppose that the approximation  algorithm returns an integral schedule.
, pK i , where index k = K + 1 is taken to be k = 1.
This is one of the few results that shows how to export  approximation algorithms for a multidimensional problem into truthful mechanisms when the algorithm is given as a black box.
, k ,P k −1≤k<k xk+1 ij ` pk ij − pk+1 ij ´ ≥ 0.
Finally, if xF ij > 0 and pij = Lj, then pij ≤ OPT(p).
(In particular, note that any algorithm that returns an integral assignment has these properties.)
Their results hold for  social-welfaremaximization problems and rely on using VCG to obtain a fractional truthful mechanism.
, K, into maximal segments, where a maximal segment is a maximal set of consecutive indices k , k + 1, .
, k − 1, k (where K + 1 ≡ 1) such that pk ij = Hj ≥ pk +1 ij ≥ · · · ≥ pk ij = Lj.
The resulting assignment clearly satisfies the desired  properties.
2. for any i, P j Xijpij < P j xijpij + max{j:xij ∈(0,1)} pij with probability 1.
VCG however does not apply to makespan minimization, and in our case even the existence of a near-optimal fractional truthful mechanism is not known.
Note that k = k and k + 1 = k − 1.
The computation of payments will depend on the actual  approximation algorithm used.
Theorem 4.5 The procedure in Algorithm 1 converts any c-approximation fractional algorithm into a 3c-approximation, truthful-in-expectation mechanism.
Corollary 4.6 There is a truthful-in-expectation mechanism with approximation ratio 3 for the Lj-Hj setting. 
First, as outlined above, we prove truthfulness using cycle monotonicity.
This spreading out can also be done if the initial schedule is fractional.
We show the power of randomization, by providing a general  technique that converts any c-approximation algorithm into a 3c-approximation, truthful-in-expectation mechanism.
Thus, by Lemma 4.3, A satisfies cycle monotonicity.
RANDOMIZED MECHANISMS In this section, we consider the case of job-dependent Lj, Hj values (with Lj ≤ Hj), which generalizes the  classical restricted-machines model (where Hj = ∞).
, k − 1, k .
Adding this for each segment yields the desired inequality.
Section 3 does however give an explicit procedure to compute payments ensuring  truthfulness, though perhaps not in polynomial-time.
This builds upon a theme introduced by Lavi and Swamy [16], namely that of using fractional mechanisms to obtain truthful-in-expectation mechanisms.
Fix a player i, and the vector of processing times of the other players p−i.
Furthermore, if M is individually rational then M is individually rational for every realization of coin tosses.
Initialize xF ij = 0 for all i, j.
Theorem 4.4 combined with Lemmas 4.1 and 4.2, gives a 3c-approximation, truthful-in-expectation mechanism.
We now have a subset of indices and we can continue recursively.
1 It is not clear if Theorem 3.2, and hence, this statement, hold if A is not finite.
The idea is to simply spread this schedule.
We should point out however that one cannot simply plug in the results of [16].
Thus, we can apply Corollary 3.4 here.
Otherwise we can 256 divide the indices 1, .
So all indices are included in some maximal segment.
We now describe the algorithm precisely.
Our construction and proof are simple, and based on two ideas.
We use the following result adapted from [16].
Fortunately, such a procedure is already provided by Kumar, Marathe, Parthasarathy, and Srinivasan [14].
Lemma 4.2 (Kumar et al.
