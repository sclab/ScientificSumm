We have also shown through some examples and experimental data that DCPOP can achieve greater performance for some problem  instances by extending the allowable input set to include cross-edged pseudotrees.
We have shown that the performance penalty is minimal to generate multiple heuristics, and that we can choose the best generated pseudotree in linear space-time complexity.
Given the importance of a good pseudotree for performance, future work will include new  heuristics to find better pseudotrees.
We presented a complete, distributed algorithm that solves  general DCOP instances using cross-edged pseudotree arrangements.
We placed particular emphasis on the role that edge-traversal heuristics play in the generation of pseudotrees.
We have shown that DCPOP fully extends DPOP by performing the same operations given the same input.
Our algorithm extends the DPOP algorithm by adding additional utility propagation messages, and introducing the concept of branch merging during the utility propagation phase.
Future work will also include  adapting existing DPOP extensions [5, 7] that support different problem domains for use with DCPOP. 
Our algorithm also allows value assignments to occur at higher level merge points for lower level nodes.
