Some of these issues include: • We envision Spectrum being able to manage content on  systems ranging from large CDNs down to smaller appliances such as TiVO [8].
In order for these smaller systems to  support Spectrum they will require networking and an external API.
• Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the content"s actual name, or how the names and URLs should be presented to the user.
We also believe the Spectrum  architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment.
When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture.
Finally, the  modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.
Adapting Spectrum to meet legal requirements will likely require more technical work. 
Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.
Specifically, the system allows different policies to be applied to the same content without replication.
While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written.
• In this paper we"ve focused on content management for  continuous media objects.
There are a number of open issues that will require future work.
• Any project that helps allow multimedia content to be  easily shared over the Internet will have legal hurdles to  overcome before it can achieve widespread acceptance.
In this paper we presented the design and implementation of the Spectrum content management architecture.
Spectrum allows  storage policies to be applied to large volumes of content to facilitate efficient storage.
