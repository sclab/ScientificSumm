In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.
We depict  below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.
Finally, in line 7 it checks if the time of the action is within the norm temporal influence.
We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.
In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.
The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles.
It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same  unifier σ.
I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the  ) with their  corresponding governor agents.
The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norm"s influence.
In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.
As such, it has the unique identifier of the external agent.
We define in Figure 5 how governor agents work - we use a logic program for this purpose.
The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.
The governor agent represents the external agent within the VO.
2), is within the influence of an annotated prohibition ω, its second parameter.
Predicate filter norms/4 collects the norms which apply to agent Id (the governor agent"s external agent).
Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the  ) to reflect the dynamics of the VO enactment.
The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 
5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.
The  governor agent keeps an account of all roles the external agent is  currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.
The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.
It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.
This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.
Governor agents are necessary because we cannot anticipate or  legislate over the design or behaviour of external agents.
We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ .
We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].
The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.
We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def.
We now describe how our norm-regulated VOs give rise to  normaware agent societies.
The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.
The verification of non-unification of σ with any element of Σc deserves an explanation.
The definition, as a logic  program, is shown in Figure 6.
