In section 6 we explain how our machinery can be used to detect and solve indirect  conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.
In section 3 we formally define norm conflicts, and explain how they are  detected and resolved.
VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.
In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.
In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.
This allows for a fine-grained  solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.
In section 5 we describe how our curtailed norms are used in norm-aware agent societies.
The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].
Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by  various parties who may not entirely trust each other [3, 24].
We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.
For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.
VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that  communicate to achieve individual and global goals [16].
We make use of  firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents" actions that norms may affect).
We solve the conflict by  annotating norms with sets of values their variables cannot have, thus curtailing their influence.
In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.
However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is  simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).
Virtual organizations (VOs) facilitate coordinated resource  sharing and problem solving involving various parties geographically remote [9].
In the next section we  provide a minimalistic definition for norm-regulated VOs.
This paper is organized as follows.
In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work.
644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 
