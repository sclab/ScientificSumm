Protocols are normally viewed external to agents and are
essentially a set of commitments externally imposed on 
participating agents. We take an internal view of protocols,
i.e. from the view of participating agents by putting the
specification of commitments locally at the respective agents
according to their roles.
Such an approach enables agents to manage their own
protocol commitments. Indeed, agents no longer accept and
follow a given set of commitments but can reason about
which commitments of theirs to offer and which 
commitments of others to take, while considering the current needs
and the environment. Protocols arise as commitments are
then linked together via agents" reasoning based on proof
search during the interaction. Also, ongoing changes in the
environment are taken as input into the generation of 
protocols by agent reasoning. This is the reverse of other 
approaches which try to make the specification flexible to 
accommodate changes in the environment. Hence, it is a step
closer to enabling emergent protocols, which makes 
protocols more dynamic and flexible to the context.
In a nutshell, services are what agents are capable of 
providing to other agents. Commitments can then be seen to
arise from combinations of services, i.e. an agent"s 
capabiliA unit of consumable resources is modeled as a 
proposition in linear logic. Numeric figures can be used to 
abbreviate a multiplicative conjunction of the same instances. For
example, 2 dollar = dollar ⊗ dollar. Moreover, such 3
A
is a shorthand for A.
In order to address the dynamic manipulation of resources,
we also include information about the location and 
ownership in the encoding of resources to address the relocation
and changes in possession of resources during agent 
interaction. That resource A is located at agent α and owned
by agent β is expressed via a shorthand notation as A@αβ ,
which is treated as a logic proposition in our framework.
This notation can be later extended to a more complex logic
construct to reason about changes in location and 
ownership.
In our running example, a cricket bat cricket b being 
located at and owned by agent Mer is denoted as cricket b@M .M
After a successful sale to the agent customer Cus, the cricket
bat will be relocated to and owned by agent Cus. The 
formula cricket b@CC will replace the formula cricket b@MM
to reflect the changes.
Our treatment of unlimited resources is to model it as a
number σ of copies of the resource"s formula such that the
number σ is chosen to be extremely large, relative to the
context. For instance, to indicate that the merchant Mer
can issue an unlimited number of sale quotes at any time,
we use σ sale quote@M .M
Declaration of actions is also modeled in a similar manner
as of resources.
The capabilities of agents refer to producing, consuming,
relocating and changing ownership of resources. Capabilities
are represented by describing the state before and after 
performing them. The general representation form is Γ Δ, in
which Γ describes the conditions before and Δ describes the
conditions after. The linear implication in linear logic 
indeed ensures that the conditions before will be transformed
into the conditions after. Moreover, some capabilities can
be applied at any number of times in the interaction context
and their formulas are also preceded by the number σ.
To take an example, we consider the capability of agent
Mer of selling a cricket bat for 10 dollars. The conditions
before are 10 dollars and a payment method from agent
Cus: 10$@CC ⊗ pay m@C . Given these, by applying theC
capability, Mer will gain 10 dollars (10$@MM ) and 
com⊥
) so that CusM
mit to providing a cricket bat (cricket b@M
will get a cricket bat (cricket b@CC ). Together, the 
capability is encoded as 10$@C ⊗ pay m@C 10$@MC C
⊗ cricket b@C
M ⊗
ties. Hence, our approach shifts specifying a set of protocol
commitments to specifying sets of pre-commitments as 
capabilities for each agent. Commitments are then can be
⊥
M
cricket b@M .C
3.2 Modeling commitmentsreasoned about and manipulated by the same logic 
mechanism as is used for the agents" actions, resources and goals,
which greatly simplifies the system.
Our framework uses TLL as a means of specifying 
interaction protocols. We encode various concepts such as resource,
capability and commitment in TLL. The symmetry between
a formula and its negation in TLL is explored as a way to
model resources and commitments. We then discuss the 
central role of pre-commitments, and how they are specified at
each participating agent. It then remains for agents to 
reason about pre-commitments to form protocol commitments,
We discuss the modeling of various types of commitments,
their fulfillments and enforcement mechanisms.
Due to duality in linear logic, positive formulas can be
regarded as formulas in supply and negative formulas can
be regarded as formulas in demand. Hence, we take an 
approach of modeling non-conditional or base commitments as
negative formulas. In particular, by turning a formula into
its negative form, a base commitment to derive the resources
or carry out the actions associated with the formula is 
created. In the above example, a commitment of agent Mer to
⊥
M
.which are subsequently discharged. provide a cricket bat (cricket b@MM ) is cricket b@M
A base commitment is fulfilled (discharged) whenever the
3.1 Modeling resources and capabilities committing agent successfully brings about the respective
126 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)
resources or carries out the actions as required by the 
commitment. In TLL modeling, this means that the 
corresponding positive formula is derived. Resolution of 
commitments can then be naturally carried out by inference in
TLL. For example, cricket b@M will fulfil the commit-M
ment cricket b@M⊥
and both formulas are automaticallyM
removed as cricket b@MM ⊗ cricket b@M⊥
.M
⊥
Under a further assumption that agents are expected to
resolve all formulas in demand (removing negative 
formulas), this creates a driving pressure on agents to resolve base
commitments. This pressure then becomes a natural and 
internal enforcement mechanism for base commitments.
A commitment with conditions (or conditional 
commitment) can be modeled by connecting the conditions to base
commitments via a linear implication. A general form is
Γ Δ where Γ is the condition part and Δ includes base
commitments. If the condition Γ is derived, by consuming
Γ, the linear implication will ensure that Δ results, which
means the base commitments in Δ become effective. If the
conditions can not be achieved, the linear implication can
not be applied and hence commitment part in the 
conditional commitment is still inactive.
In our approach, conditional commitments are specified
in their potential form as pre-commitments of participating
agents. Pre-commitments are negotiated among agents via
proposals and upon being accepted, will form conditional
commitments among the engaged agents. Conditional 
commitments are interpreted as that the condition Γ is required
of the proposed agent and the commitment part Δ is the
responsibility of the owner (proposing) agent. Indeed, such
interpretation and the encoding of realize the notion of
a conditional commitment that owner agent is willing to
commit to deriving Δ given the proposed agent satisfies the
conditions Γ.
Conditional commitments, pre-commitments and 
capabilities all have similar encodings. However, their differences lie
in the phases of commitment that they are in. Capabilities
are used internally by the owner agent and do not involve
any commitment. Pre-commitments can be regarded as
capabilities intended for forming conditional commitments.
Upon being accepted, pre-commitments will turn into 
conditional commitments and bring the two engaged agents into a
commitment phase. As an example, consider that Mer has a
capability of selling cricket bats: (10$@CC ⊗pay m@CC )
(10$@M ⊗ cricket b@M⊥
⊗ cricket b@CC ). When MerM M
proposes its capability to Cus, the capability acts as a 
precommitment. When the proposal gets accepted, that 
precommitment will turn into a conditional commitment in
which Mer commits to fulfilling the base commitment
cricket b@M⊥
(which leads to having cricket b@CC ) uponM
the condition that Cus derives 10$@CC ⊗pay m@C (whichC
leads to having 10$@MM ).
Breakable commitments which are in place to provide agents
with the desired flexibility to remove itself from its 
commitments (cancel commitments) are also modeled naturally in
our framework. A base commitment Com⊥
is turned into
a breakable base commitment (cond ⊕ Com)⊥
. The extra
token cond reflects the agent"s internal deliberation about
when the commitment to derive Com is broken. Once cond
is produced, due to the logic deduction cond ⊗ (cond ⊕
Com)⊥
⊥, the commitment (cond ⊕ Com)⊥
is removed,
and hence breaking the commitment of deriving Com. 
Moreover, a breakable conditional commitment is modeled as
A (1 B), instead of A B. When the condition A
is provided, the linear implication brings about (1 B) and
it is now up to the owner agent"s internal choice whether 1
or B is resulted. If the agent chooses 1, which practically
means nothing is derived, then the conditional commitment
is deliberately broken.
3.3 Protocol Construction
Given the modeling of various interaction concepts like 
resource, action, capability, and commitment, we will discuss
how protocols can be specified.
In our framework, each agent is encoded with the 
resources, actions, capabilities, pre-commitments, any 
pending commitments that it has. Pre-commitments, which stem
from services the agents are capable of providing, are 
designated to be fair exchanges. In a pre-commitment, all the
requirements of the other party are put in the condition part
and all the effects to be provided by the owner agent are put
on the commitment part to make up a trade-off. Such a 
design allows agents to freely propose pre-commitments to any
interested parties.
An example of pre-commitments is that of an agent 
Merchant regarding a sale of a cricket bat: [10$@CC ⊗pay m@C
10 $@MM ⊗ cricket b@CC ⊗cricket b@M⊥
M
]. The 
condition is the requirement that the customer agent provides
10 dollars, which is assumed to be the price of a cricket
bat, via a payment method. The exchange is the cricket bat
for the customer ( cricket b@CC ) and hence is fair to the
merchant.
Protocols are specified in terms of sets of pre-commitments
at participating agents. Given some initial interaction 
commitments, a protocol emerges as agents are reasoning about
which pre-commitments to offer and accept in order to fulfill
these commitments.
Given a such a protocol specification, we then discuss how
interaction might take place. An interaction can start with a
request or a proposal. When an agent can not achieve some
commitments by itself, it can make a request of them or 
propose a relevant pre-commitment to an appropriate agent to
fulfill them. The choice of which pre-commitments depends
on if such pre-commitments can produce the formulas to
fulfill the agent"s pending commitments.
When an agent receives a request, it searches for 
precommitments that can together produce the required 
formulas of the requests. Those pre-commitments found will
be used as proposals to the requesting agents. Otherwise, a
failure notice will be returned.
When a proposal is received, the recipient agent also 
performs a search with the inclusion of the proposal for a proof
of those formulas that can resolve its commitments. If the
search result is positive, the proposal is accepted and 
becomes a commitment. The recipient then attempts to fulfill
conditions of the commitments. Otherwise, the proposal is
refused and no commitment is formed.
Throughout the interaction, proof search has played a
vital role in protocol construction. Proof search reveals
that some commitments can not be resolved locally or some
pre-commitments can be used to resolve pending 
commitments, which prompts the agent to make a request or 
proposal respectively. Proof search also determines which 
precommitments are relevant to fulfillment of a request, which
helps agents to decide which pre-commitments to propose to
answer the request. Moreover, whether a received proposal
C
The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 127
is relevant to any pending commitments or not is also 
determined by a search for proof of these commitments with
an inclusion of the proposal. Conditions of proposals can
be resolved by proof search as it links them with the agents"
current resources and capabilities as well as any relevant 
precommitments. Therefore, it can be seen that proof search
performed by participating agents can link up their 
respective pre-commitments and turn them into commitments as
appropriate, which give rise to protocol formation. We will
demonstrate this via our running example in section 4.
3.4 Interactive Messages
Agents interact by sending messages. We address agent
interaction in a simple model which contains messages of
type requests, proposals, acceptance, refusal and failure 
notice.
We denote Source to Destination: prior to each message
to indicate the source and destination of the message. For
example Cust to Mer: denotes that the message is sent
from agent Cust to agent Mer.
Request messages start with the key word REQUEST:
REQUEST + formula. Formulas in request messages
are of commitments.
Proposal messages are preceded with PROPOSE. 
Formulas are of capabilities. For example, α to β: PROPOSE
Γ Δ is a proposal from agent α to agent β.
There are messages that agents use to response to a 
proposal. Agents can indicate an acceptance: ACCEPT, or
a refusal: REFUSE. To notice a failure in fulfilling a 
request or proposal, agents reply with that request or proposal
message appended with FAIL.
3.5 Generating Interactions
As we have seen, temporal linear logic provides an elegant
means for encoding the various concepts of agent 
interaction in a commitment based specification framework. 
Appropriate interaction is generated as agents negotiate their
specified pre-commitments to fulfill their goals. The 
association among pre-commitments at participating agents and
the monitoring of commitments to ensure that all are 
discharged are performed by proof search. In the next section,
we will demonstrate how specification and generation of 
interactions in our framework might work.
