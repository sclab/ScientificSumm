The tasks and plans of an agent may not successfully reach 
completion, either by the choice of the agent to abort them (perhaps at
the request of another agent to do so), or by unbidden factors that
lead to failure. In this paper we have presented a procedure-based
approach that incorporates aborting tasks and plans into the 
deliberation cycle of a BDI-style agent, thus providing a unified approach
to failure and abort. Our primary contribution is an analysis of the
requirements on the operation of the agent for aborting tasks and
plans, and a corresponding operational semantics for aborting in
the abstract agent language CAN.
We are planning to implement an instance of our approach in the
SPARK agent system [9]; in particular, the work of this paper will
be the basis for SPARK"s abort handling mechanism. We are also
developing an analysis tool for our extended version of CAN as a
basis for experimentation.
An intelligent agent will not only gracefully handle unsuccessful
tasks and plans, but also will deliberate over its cognitive attitudes
to decide its next course of action. We have assumed the default 
behaviour of a BDI-style agent, according to its nature: for instance,
to retry alternatives to a failed plan until one succeeds or until no
alternative plans remain (in which case to fail the task). Future
work is to place our approach in service of more dynamic agent
reasoning, such as the introspection that an agent capable of 
reasoning over task interaction effects and resource requirements can
accomplish [19, 12].
Related to this is determining the cost of aborting a task or plan,
and using this as an input to the deliberation process. This would
in particular influence the commitment the agent has towards a 
particular task: the higher the cost, the greater the commitment.
Our assumption that abort-methods do not fail, as discussed above,
is a pragmatic one. However, this is an issue worthy of further 
exploration, either to develop weaker assumptions that are also 
practical, or to analyze conditions under which our assumption is 
realistic. A further item of interest is extending our approach to failure
and abort to maintenance goals [1]. For such goals a different 
operational semantics for abort is necessary than for achievement goals,
to match the difference in semantics of the goals themselves.
Acknowledgements
We thank Lin Padgham and the anonymous reviewers for their comments.
The first author acknowledges the support of the Australian Research 
Council and Agent Oriented Software under grant LP0453486. The work of the
two authors at SRI International was supported by the Defense Advanced
Research Projects Agency (DARPA) under Contract No. NBCHD030010.
Any opinions, findings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessarily reflect the view
of DARPA or the Department of Interior-National Business Center.
