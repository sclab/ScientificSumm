At the end of the last section, we identified several drawbacks that
persist in an environment with E2Ev, ROPv, and PRc. In this
section, we will show how all of these drawbacks can be overcome.
To do this, we will require our third and final category of monitor:
A contractible monitor is simply a verifiable monitor that generates
proofs that can serve as input to a contract. Thus, contractible is
jointly a property of the monitor and the institutions that must verify
its proofs. Contractibility requires that a court,
1. Can verify the monitor"s proofs.
2. Can understand what the proofs and contracts represent to
the extent required to police illegal activity.
3. Can enforce payments among contracting parties.
Understanding the agreements between companies has traditionally
been a matter of reading contracts on paper. This may prove to be a
harder task in a future network setting. Contracts may plausibly be
negotiated by machine, be numerous, even per-flow, and be further
complicated by the many dimensions of quality.
When a monitor (together with institutional infrastructure) meets
these criteria, we will label it with a subscript c, for contractible.
The reader may recall that this is how we labeled the packets
received monitor, PRc, which allows ISPs to form contracts with
per-packet payments. Similarly, E2Ec and ROPc are contractible
versions of the monitors we are now familiar with.
At the end of the previous section, we argued for some desirable
properties that we"d like our solution to have. Briefly, we would
like to enforce optimal data paths with an equilibrium concept that
doesn"t rely on re-routing for punishment, is coalition proof, and
doesn"t punish innocent nodes when a coalition cheats. We will call
such an equilibrium a fixed-route coalition-proof 
protect-theinnocent equilibrium.
As the next claim shows, ROPc allows us to create a system of
linear (price, quality) contracts under just such an equilibrium.
Claim 3. With ROPc, for any feasible and consistent assignment of
rest of path qualities to nodes, and any corresponding payment
schedule that yields non-negative payoffs, these qualities can be
maintained with bilateral contracts in a fixed-route coalition-proof
protect-the-innocent equilibrium.
Proof: Fix any data path consistent with the given rest of path
qualities. Select some monetary punishment, P, large enough to
prevent any cheating for time t0 (the discounted total payment from
the source will work). Let each node on the path enter into a
contract with its parent, which fixes an arbitrary payment schedule
so long as the rest of path quality is as prescribed. When the parent
node, which has ROPc, submits a proof that the rest of path quality
is less than expected, the contract awards her an instantaneous
transfer, P, from the downstream node. Such proofs can be
submitted every 0t for the previous interval.
Suppose now that a coalition, C, decides to cheat. The source
measures a decrease in quality, and according to her contract, is
awarded P from the first hop. This means that there is a net outflow
of P from the ISPs as a whole. Suppose that node i is not in C. In
order for the parent node to claim P from i, it must submit proof that
the quality of the path starting at i is not as prescribed. This means
190
that there is a cheater after i. Hence, i would also have detected a
change in quality, so i can claim P from the next node on the path.
Thus, innocent nodes are not punished. The sequence of payments
must end by the destination, so the net outflow of P must come from
the nodes in C. This establishes all necessary conditions of the
equilibrium.
Essentially, ROPc allows for an implementation of (price, quality)
contracts. Building upon this result, we can construct competition
games in which nodes offer various qualities to each other at
specified prices, and can credibly commit to meet these
performance targets, even allowing for coalitions and a desire to
damage other ISPs.
Example 1. Define a Stackelberg price-quality competition game
as follows: Extend the partial order of nodes induced by the graph
to any complete ordering, such that downstream nodes appear
before their parents. In this order, each node selects a contract to
offer to its parents, consisting of a rest of path quality, and a linear
price. In the routing game, each node selects a next hop at every
time, consistent with its advertised rest of path quality. The
Stackelberg price-quality competition game can be implemented in
our model with ROPc monitors, by using the strategy in the proof,
above. It has the following useful property:
Claim 4. The Stackelberg price-quality competition game yields
optimal routes in SPE.
The proof is given in the appendix. This property is favorable from
an innovation perspective, since firms that invest in high quality will
tend to fall on the optimal path, gaining positive payoff. In general,
however, investments may be over or under rewarded. Extra
conditions may be given under which innovation decisions approach
perfect efficiency for large innovations. We omit the full analysis
here.
Example 2. Alternately, we can imagine that players report their
private information to a central authority, which then assigns all
contracts. For example, contracts could be computed to implement
the cost-minimizing VCG mechanism proposed by Feigenbaum, et
al. in [7]. With ROPc monitors, we can adapt this mechanism to
maximize welfare. For node, i, on the optimal path, L, the net
payment must equal, essentially, its contribution to the welfare of S,
D, and the other nodes. If L" is an optimal path in the graph with i
removed, the profit flow to i is,
( ) ( )
∈≠∈
+−−
',
'
Lj
j
ijLj
jLL ccququ , (6)
where Lq and 'Lq are the qualities of the two paths. Here, (price,
quality) contracts ensure that nodes report their qualities honestly.
The incentive structure of the VCG mechanism is what motivates
nodes to report their costs accurately.
A nice feature of this game is that individual innovation decisions
are efficient, meaning that a node will invest in an innovation
whenever the investment cost is less than the increased welfare of
the optimal data path. Unfortunately, the source may end up paying
more than the utility of the path.
Notice that with just E2Ec, a weaker version of Claim 3 holds.
Bilateral (price, quality) contracts can be maintained in an
equilibrium that is fixed-route and coalition-proof, but not 
protectthe-innocent. This is done by writing contracts to punish everyone
on the path when the end to end quality drops. If the path length is
n, the first hop pays nP to the source, the second hop pays ( )Pn 1−
to the first, and so forth. This ensures that every node is punished
sufficiently to make cheating unprofitable. For the reasons we gave
previously, we believe that this solution concept is less than ideal,
since it allows for malicious nodes to deliberately trigger
punishments for potential competitors.
Up to this point, we have adopted fixed-route coalition-proof
protect-the-innocent equilibrium as our desired solution concept,
and shown that ROPc monitors are sufficient to create some
competition games that are desirable in terms of service diversity
and innovation. As the next claim will show, rest of path
monitoring is also necessary to construct such games under our
solution concept.
Before we proceed, what does it mean for a game to be desirable
from the perspective of service diversity and innovation? We will
use a very weak assumption, essentially, that the game is not fully
commoditized for any node. The claim will hold for this entire class
of games.
Definition: A competition game is nowhere-commoditized if for
each node, i, not adjacent to D, there is some assignment of qualities
and marginal costs to nodes, such that the optimal data path includes
i, and i has a positive temptation to cheat.
In the case of linear contracts, it is sufficient to require that ∞<CI ,
and that every node make positive profit under some assignment of
qualities and marginal costs.
Strictly speaking, ROPc monitors are not the only way to construct
these desirable games. To prove the next claim, we must broaden
our notion of rest of path monitoring to include the similar ROPc"
monitor, which attests to the quality starting at its own node,
through the end of the path. Compare the two monitors below:
ROPc: gives a node proof that the path quality from the next node
to the destination is not correct.
ROPc": gives a node proof that the path quality from that node to
the destination is correct.
We present a simplified version of this claim, by including an
assumption that only one node on the path can cheat at a time
(though conspirators can still exchange side payments). We will
discuss the full version after the proof.
Claim 5. Assume a set of monitors, and a nowhere-commoditized
bilateral contract competition game that always maintains the
optimal quality in fixed-route coalition-proof protect-the-innocent
equilibrium, with only one node allowed to cheat at a time. Then
for each node, i, not adjacent to D, either i has an ROPc monitor, or
i"s children each have an ROPc" monitor.
Proof: First, because of the fixed-route assumption, punishments
must be purely monetary.
Next, when cheating occurs, if the payment does not go to the
source or destination, it may go to another coalition member,
rendering it ineffective. Thus, the source must accept some
monetary compensation, net of its normal flow payment, when
cheating occurs. Since the source only contracts with the first hop,
it must accept this money from the first hop. The source"s contract
must therefore distinguish when the path quality is normal from
when it is lowered by cheating. To do so, it can either accept proofs
191
from the source, that the quality is lower than required, or it can
accept proofs from the first hop, that the quality is correct. These
nodes will not rationally offer the opposing type of proof.
By definition, any monitor that gives the source proof that the path
quality is wrong is an ROPc monitor. Any monitor that gives the
first hop proof that the quality is correct is a ROPc" monitor. Thus,
at least one of these monitors must exist.
By the protect-the-innocent assumption, if cheating occurs, but the
first hop is not a cheater, she must be able to claim the same size
reward from the next ISP on the path, and thus pass on the
punishment. The first hop"s contract with the second must then
distinguish when cheating occurs after the first hop. By argument
similar to that for the source, either the first hop has a ROPc
monitor, or the second has a ROPc" monitor. This argument can be
iterated along the entire path to the penultimate node before D.
Since the marginal costs and qualities can be arranged to make any
path the optimal path, these statements must hold for all nodes and
their children, which completes the proof.
The two possibilities for monitor correspond to which node has the
burden of proof. In one case, the prior node must prove the
suboptimal quality to claim its reward. In the other, the subsequent
node must prove that the quality was correct to avoid penalty.
Because the two monitors are similar, it seems likely that they
require comparable costs to implement. If submitting the proofs is
costly, it seems natural that nodes would prefer to use the ROPc
monitor, placing the burden of proof on the upstream node.
Finally, we note that it is straightforward to derive the full version of
the claim, which allows for multiple cheaters. The only
complication is that cheaters can exchange side payments, which
makes any money transfers between them redundant. Because of
this, we have to further generalize our rest of path monitors, so they
are less constrained in the case that there are cheaters on either side.
5.1 Implementing Monitors
Claim 5 should not be interpreted as a statement that each node must
compute the rest of path quality locally, without input from other
nodes. Other monitors, besides ROPc and ROPc" can still be used,
loosely speaking, as building blocks. For instance, network
tomography is concerned with measuring properties of the network
interior with tools located at the edge. Using such techniques, our
source might learn both individual node qualities and the data path.
This is represented by the following two monitors:
SHOPc
i
: (source-based hop quality) A monitor that gives the
source proof of what the quality of node i is.
SPATHc: (source-based path) A monitor that gives the source
proof of what the data path is at any time, at least as far as it
matches the equilibrium path.
With these monitors, a punishment mechanism can be designed to
fulfill the conditions of Claim 5. It involves the source sharing the
proofs it generates with nodes further down the path, which use
them to determine bilateral payments. Ultimately however, the
proof of Claim 5 shows us that each node i"s bilateral contracts
require proof of the rest of path quality. This means that node i (or
possibly its children) will have to combine the proofs that they
receive to generate a proof of the rest of path quality. Thus, the
combined process is itself a rest of path monitor.
What we have done, all in all, is constructed a rest of path monitor
using SPATHc and SHOPc
i
as building blocks. Our new monitor
includes both the component monitors and whatever distributed
algorithmic mechanism exists to make sure nodes share their proofs
correctly.
This mechanism can potentially involve external institutions. For a
concrete example, suppose that when node i suspects it is getting
poor rest of path quality from its successor, it takes the downstream
node to court. During the discovery process, the court subpoenas
proofs of the path and of node qualities from the source (ultimately,
there must be some threat to ensure the source complies). Finally,
for the court to issue a judgment, one party or the other must
compile a proof of what the rest of path quality was. Hence, the
entire discovery process acts as a rest of path monitor, albeit a rather
costly monitor in this case.
Of course, mechanisms can be designed to combine these monitors
at much lower cost. Typically, such mechanisms would call for
automatic sharing of proofs, with court intervention only as a last
resort. We defer these interesting mechanisms to future work.
As an aside, intuition might dictate that SHOPc
i
generates more
information than ROPc; after all, inferring individual node qualities
seems a much harder problem. Yet, without path information,
SHOPc
i
is not sufficient for our first-best innovation result. The
proof of this demonstrates a useful technique:
Claim 6. With monitors E2E, ROP, SHOPc
i
and PRc, and a
nowhere-commoditized bilateral contract competition game, the
optimal quality cannot be maintained for all assignments of quality
and marginal cost, in fixed-route coalition-proof 
protect-theinnocent equilibrium.
Proof: Because nodes cannot verify the data path, they cannot form
a proof of what the rest of path quality is. Hence, ROPc monitors do
not exist, and therefore the requirements of Claim 5 cannot hold.
