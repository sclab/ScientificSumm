Our pervasive editing and management system is based on the
above-mentioned database-based TeNDaX approach, where
document data is stored natively in the database and supports
pervasive collaborative text editing and document management.
We define the pervasive document editing and management system,
as a system, where documents can easily be accessed and
manipulated everywhere (within the network), anytime
(independently of the number of users working on the same
document) and with any device (desktop, notebook, PDA, mobile
phone etc.).
DB 3
RTSC 4
RTSC 1
RTSC 2
RTSC 3
AS 1
AS 3
DB 1
DB 2
AS 2
AS 4
DB 4
A
B
C
D
E
F
G
Figure 1. TeNDaX Application Architecture
In contrast to documents stored locally on the hard drive or on a file
server, our system automatically serves the user with the up-to-date
version of a document and changes done on the document are stored
persistently in the database and immediately propagated to all
clients who are working on the same document. Additionally, meta
data gathered during the whole document creation process enables
sophisticated document management. With the TeXt SQL API as
abstract interface, this approach can be used by any tool and for any
device.
The system is built on the following components (see Figure 1): An
editor in Java implements the presentation layer (A-G in Figure 1).
The aim of this layer is the integration in a well-known 
wordprocessing application such as OpenOffice.
The business logic layer represents the interface between the
database and the word-processing application. It consists of the
following three components: The application server (marked as AS
1-4 in Figure 1) enables text editing within the database
environment and takes care of awareness, security, document
management etc., all within a collaborative, real-time and multi-user
environment. The real-time server component (marked as RTSC 
14 in Figure 1) is responsible for the propagation of information, i.e.
updates between all of the connected editors.
The storage engine (data layer) primarily stores the content of
documents as well as all related meta data within the database
Databases can be distributed in a peer-to-peer network (DB 1-4 in
Figure 1)..
In the following, we will briefly present the database schema, the
editor and the real-time server component as well as the concept of
dynamic folders, which enables sophisticated document
management on the basis of meta data.
2.1 Application Architecture
A database-based real-time collaborative editor allows the same
document to be opened and edited simultaneously on the same
computer or over a network of several computers and mobile
devices. All concurrency issues, as well as message propagation, are
solved within this approach, while multiple instances of the same
document are being opened [3]. Each insert or delete action is a
database transaction and as such, is immediately stored persistently
in the database and propagated to all clients working on the same
document.
2.1.1 Database Schema
As it was mentioned earlier that text is stored in a native way. Each
character of a text document is stored as a single object in the
database [3]. When storing text in such a native form, the
performance of the employed database system is of crucial
importance. The concept and performance issues of such a text
database are described in [3], collaborative layouting in [2],
dynamic collaborative business processes within documents in [5],
the text editing creation time meta data model in [6] and the relation
to XML databases in [7].
Figure 2 depicts the core database schema. By connecting a client to
the database, a Session instance is created. One important attribute
of the Session is the DocumentSession. This attribute refers to
DocumentSession instances, which administrates all opened
documents. For each opened document, a DocumentSession
instance is created. The DocumentSession is important for the 
realtime server component, which, in case of a
42
is beforeis after
Char
(ID)
has
TextElement
(ID)
starts
with
is used
by
InternalFile
(ID)
is in includes
created
at
has
inserted
by
inserted
is active
ir
ir
CharacterValue
(Unicode)
has
List
(ID)
starts
starts
with
ends ends with
FileSize
has
User
(ID)
last read by
last written by
created
at
created by
Style
DTD
(ID)
is used
by
uses
uses
is used
by
Authors
arehas
Description
Password
Picture
UserColors
UserListSecurity
has
has
has
has
has
has
FileNode
(ID)
references/isreferencedby
is dynamic DynStructure
NodeDetails
has
has is NodeType
is parent
of
has
parent
has
Role
(ID)
created
at
created
created
by
Name
has
Description
is user
Name
has
has
main role
FileNodeAccessMatrix
(ID)
has
is
AccessMatrix
read option
grand option
write option
contains
has
access
Times
opened … times with … by
contains/ispartof
ir
ir
is...andincludes
Lineage
(ID)
references
is after
is before
CopyPaste
(ID)
references
is in
is copy
of
is a copy
from
hasCopyPaste
(ID)
is activeLength has
Str (Stream)
has
inserted by / inserted
RegularChar
StartChar EndChar
File
ExternalFile
is from
URL
Type
(extension)
is of
Title
has
DocumentSession
(ID)
is opened
by
has
opened
has
opened
Session
(ID)
isconnectedwith
launched by
VersionNumber
uses
has
read option
grand option
write option
ends with
is used
by
is in has
is unique
DTD (Stream)
has
has
Name
Column
(ID)
has set on
On/off
isvisible…for
false
LanguageProfile
(ID)
has
contains
Name
Profile
Marking
(ID)
has
parent
internal
is copy
from
hasRank
is onPosition
starts
with
ends with
is logical style
is itemized
is italic
is enumerated
is underline
is
is part of
Alignment
Size has
Font has
hasColor
is bold
has
uses
ElementName
StylesheetName
isused
by
Process
(ID)
is running by OS
is web session
MainRoles
Roles has
has
Timestamp
(Date, Time)
created
at
Timestamp
(Date, Time)
Timestamp
(Date, Time)
Timestamp
(Date, Time)
Timestamp
(Date, Time)created
at
Type
has
Port
IP
has
has
MessagePropagator
(ID)
Picture
(Stream)
Name
Picture
(ID)
has
contains
LayoutBlock WorkflowBlockLogicalBlock
contains
BlockDataType
has
property
BlockData is of
WorkflowInstance
(ID)
isin
TaskInstance
(ID)
has
parent
Timestamp
(Date, Time)
Timestamp
(Date, Time)
Timestamp
(Date, Time)
Timestamp
(Date, Time)
last modified at
completed at
started at
created
at
is on
has
Name
created by
has
attached
Comment
Typeis of
Timestamp
(Date, Time)
Timestamp
(Date, Time)
Timestamp
(Date, Time)
created
at
started at
<< last modified at
is
Category
Editors
has
Status
has
Timestamp
(Date, Time)
<< status last modified
Timestamp
(Date, Time)
is due at
DueType
has
Timezone
has
Notes
has
SecurityLevel
hasset
Timestamp
(Date, Time)
<< is completed at
isfollowedby
Task
(Code)
Description
has
Indent
references
hasbeenopenedat...by
Timestamp
RedoHistory
is before
is after
references
hasCharCounter
is inhas
has
Offset
ActionID
(Code)
Timestamp
(Date, Time)
invoked
at
invoked
by
Version
(ID)
isbuild
from
has
created
byarchived
has
Comment
Timestamp
(Date, Time)
<<createdat
UndoHistory
(ID)
starts
ends
has
Name
created
by
Name
has
is before
is after
<< references
CharCounter
has
is in
created
at
Timestamp
is active
created
by
is used
by
Offset
has
created
at
Timestamp
Index
(ID)
lastmodifiedby
Lexicon
(ID)
isof
Frequency
is
occurring
is stop word
Term
is
is in
ends with
starts
with
<< original starts with
WordNumber
SentenceNumber
ParagraphNumber
Citatons
has
is in
is
is in
istemporary
is in
has
Structure
has
ElementPath
createdat
Timestamp
<< describes
SpiderBuild
(ID)
is updated
is deleted
Timestamp
(Date, Time)
<<lastupdatedat
has validated structure
<<neededtoindex
Time
(ms)
IndexUpdate
nextupdatein
hasindexed
isrunningbyOS
lastupdate
enabled
Timestamp
Time
(s)
Documents
StopCharacter
Description
Character
Value
(ASCII)
is sentence stop
is paragraph stop
Name
has
is
is
OptionsSettings
show information show warningsshow exceptions
do lineage recording
do internal lineage recording
ask for unknown source
show intra document
lineage information
are set
for
X
X
X
VirtualBorder
(ID)
isonhas
{1, 2}
{1, 2}
ir
ir
UserMode
(Code)
UserMode
(Code)
Figure 2. TeNDaX Database Schema (Object Role Modeling Diagram)
change on a document done by a client, is responsible for sending
update information to all the clients working on the same
document. The DocumentId in the class DocumentSession points
to a FileNode instance, and corresponds to the ID of the opened
document. Instances of the class FileNode either represent a
folder node or a document node. The folder node corresponds to a
folder of a file system and the document node to that of a file.
Instances of the class Char represent the characters of a
document. The value of a character is stored in the attribute
CharacterValue. The sequence is defined by the attributes After
and Before of the class Char. Particular instances of Char mark
the beginning and the end of a document. The methods
InsertChars and RemoveChars are used to add and delete
characters.
2.1.2 Editor
As seen above, each document is natively stored in the database.
Our editor does not have a replica of one part of the native text
database in the sense of database replicas. Instead, it has a so-called
image as its replica. Even if several authors edit the same text at the
same time, they work on one unique document at all times. The
system guarantees this unique view.
Editing a document involves a number of steps: first, getting the
required information out of the image, secondly, invoking the
corresponding methods within the database, thirdly, changing the
image, and fourthly, informing all other clients about the changes.
2.1.3 Real-Time Server Component
The real-time server component is responsible for the real-time
propagation of any changes on a document done within an editor to
all the editors who are working or have opened the same document.
When an editor connects to the application server, which in turn
connects to the database, the database also establishes a connection
to the real-time server component (if there isn"t already a
connection). The database system informs the real-time server
component about each new editor session (session), which the 
realtime server component administrates in his SessionManager. Then,
the editor as well connects to the real-time server component. The
real-time server component adds the editor socket to the client"s
data structure in the SessionManager and is then ready to
communicate.
Each time a change on a document from an editor is persistently
stored in the database, the database sends a message to the real-time
server component, which in turns, sends the changes to all the
43
editors working on the same document. Therefore, a special
communication protocol is used: the update protocol.
Update Protocol
The real-time server component uses the update protocol to
communicate with the database and the editors. Messages are sent
from the database to the real-time server component, which sends
the messages to the affected editors. The update protocol consists of
different message types. Messages consist of two packages:
package one contains information for the real-time server
component whereas package two is passed to the editors and
contains the update information, as depicted in Figure 3.
|| RTSC || Parameter | … | Parameter|| || Editor Data ||
Protocol between database system and
real-time server component
Protocol between real -time server
component and editors
Figure 3. Update Protocol
In the following, two message types are presented:
||u|sessionId,...,sessionId||||editor data||
u: update message, sessionId: Id of the client session
With this message type the real-time server component sends the
editor data package to all editors specified in the sessionId list.
||ud|fileId||||editor data||
ud: update document message, fileId: Id of the file
With this message type, the real-time server component sends the
editor data to all editors who have opened the document with the
indicated file-Id.
Class Model
Figure 4 depicts the class model as well as the environment of the
real-time server component. The environment consists mainly of the
editor and the database, but any other client application that could
make use of the real-time server component can connect.
ConnectionListener: This class is responsible for the connection to
the clients, i.e. to the database and the editors. Depending on the
connection type (database or editor) the connection is passed to an
EditorWorker instance or DatabaseMessageWorker instance
respectively.
EditorWorker: This class manages the connections of type ‘editor".
The connection (a socket and its input and output stream) is stored
in the SessionManager.
SessionManager: This class is similar to an ‘in-memory database":
all editor session information, e.g. the editor sockets, which editor
has opened which document etc. are stored within this data
structure.
DatabaseMessageWorker: This class is responsible for the
connections of type ‘database". At run-time, only one connection
exists for each database. Update messages from the database are
sent to the DatabaseMessageWorker and, with the help of
additional information from the SessionManager, sent to the
corresponding clients.
ServiceClass: This class offers a set of methods for reading, writing
and logging messages.
tdb.mp.editor tdb.mp.database
tdb.mp.mgmt
EditorWorker
DatabaseMessageWorker
SessionManager
MessageHandler
ConnectionListener
ServiceClass
MessageQueue
tdb.mp.listener tdb.mp.service
junit.tests
1
*
1
*
1 *
1
*
1*
1
*
Editors Datenbanksystem 1
2
1
*
1
*
1
*
TCP/IP
Figure 4. Real-Time Server Component Class Diagram
2.1.4 Dynamic Folders
As mentioned above, every editing action invoked by a user is
immediately transferred to the database. At the same time, more
information about the current transaction is gathered.
As all information is stored in the database, one character can hold a
multitude of information, which can later be used for the retrieval of
documents. Meta data is collected at character level, from document
structure (layout, workflow, template, semantics, security,
workflow and notes), on the level of a document section and on the
level of the whole document [6].
All of the above-mentioned meta data is crucial information for
creating content and knowledge out of word processing documents.
This meta data can be used to create an alternative storage system
for documents. In any case, it is not an easy task to change users"
familiarity to the well known hierarchical file system. This is also
the main reason why we do not completely disregard the classical
file system, but rather enhance it. Folders which correspond to the
classical hierarchical file system will be called static folders.
Folders where the documents are organized according to meta data,
will be called dynamic folders. As all information is stored in the
database, the file system, too, is based on the database.
The dynamic folders build up sub-trees, which are guided by the
meta data selected by the user. Thus, the first step in using a
dynamic folder is the definition of how it should be built. For each
level of a dynamic folder, exactly one meta data item is used to. The
following example illustrates the steps which have to be taken in
order to define a dynamic folder, and the meta data which should be
used.
As a first step, the meta data which will be used for the dynamic
folder must be chosen (see Table 1): The sequence of the meta data
influences the structure of the folder. Furthermore, for each meta
data used, restrictions and granularity must be defined by the user;
if no restrictions are defined, all accessible documents are listed.
The granularity therefore influences the number of sub-folders
which will be created for the partitioning of the documents.
44
As the user enters the tree structure of the dynamic folder, he can
navigate through the branches to arrive at the document(s) he is
looking for. The directory names indicate which meta data
determines the content of the sub-folder in question. At each level,
the documents, which have so far been found to match the meta
data, can be inspected.
Table 1. Defining dynamic folders (example)
Level Meta data Restrictions Granularity
1 Creator Only show documents
which have been created
by the users Leone or
Hodel or Gall
One folder per
creator
2 Current
location
Only show documents
which where read at my
current location
One folder per
task status
3 Authors Only show documents
where at least 40% was
written by user ‘Leone"
Each 20% one
folder
ad-hoc changes of granularity and restrictions are possible in order
to maximize search comfort for the user. It is possible to predefine
dynamic folders for frequent use, e.g. a location-based folder, as
well as to create and modify dynamic folders on an ad-hoc basis.
Furthermore, the content of such dynamic folders can change from
one second to another, depending on the changes made by other
users at that moment.