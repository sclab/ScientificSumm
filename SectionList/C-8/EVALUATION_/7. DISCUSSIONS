7.1 The theory of operation context
The notion of operation context was first proposed in the
GOT algorithm [23] and used in conjunction with the 
theory of causality in follow-up GOTO and ANYUNDO 
algorithms [22, 21]. In prior work, the context of an operation O
was defined as a sequence of transformed operations which
can be executed to bring the document from its initial state
to the state on which O is defined. This definition is directly
coupled to the sequential history buffering strategy, which
saves executed operations in their execution forms and 
orders. There was no explicit representation of an operation
context. Context relationships among operations are 
derived from the causality relationships plus the history buffer
position relationships among operations [23, 21].
In this paper, the concept of operation context is defined
as a set of original operations corresponding to the 
document state on which this operation is defined. This new
concept of operation context is independent of the 
underlying operation buffering strategy and is explicitly represented
as an operation set. Based on the set representation of 
operation context, essential OT conditions (CC1 - CC6) have
been precisely and concisely captured. Moreover, the 
context vector has been devised to efficiently represent both
normal and inverse operations in a context. The context
vector is more general than the state vector and potentially
applicable to other distributed computing systems as well.
Based on the theory of causality, prior OT algorithms
have used state vectors to capture causal-dependency 
relationships among original normal operations and to 
represent document states in terms of original normal 
operations. However, causal-dependency relationships are not
defined for inverse or transformed operations, and state 
vectors cannot represent document states with original inverse
operations. The theory of causality is unable to capture 
essential OT conditions (CC1 - CC6) for all types of operation
- original and transformed, normal and inverse operations.
7.2 COT versus GOTO-ANYUNDO
Both COT and GOTO-ANYUNDO are capable of doing
and undoing any operations at anytime. The main 
difference is that COT achieves this capability without using ET
functions (thus eliminating the RP requirement for IT 
functions), and without requiring IT functions to preserve CP2,
IP2 and IP3. The avoidance of RP, CP2, IP2, and IP3 has
significantly simplified the design of transformation 
functions and the OT system as a whole.
COT is simpler than GOTO-ANYUNDO (and prior OT
algorithms based on the causality theory) because of the use
of a single theory of operation context for capturing all 
OTrelated conditions (CC1-CC6), the uniformity of 
contextbased conditions for treating all types of operation, and the
conciseness of these context-based conditions.
The COT-based system is more efficient than the 
GOTOANYUNDO-based system in solving IP2 and IP3. In 
GOTOANYUNDO, the do-part (a normal operation) and the 
undopart (an inverse operation) need to be coupled for the 
purpose of preserving IP2 [21]. An eager coupling strategy
was adopted: an inverse operation is coupled with its 
corresponding normal operation immediately after its execution.
Under this scheme, inverse operations are not explicitly 
represented in the history buffer. When a normal operation
is to be executed, however, it may need to be transformed
against only the undo-part of a do-undo-pair. To cope with
this problem, an extra DeCouple-GOTO-ReCouple scheme
has to be used to decouple a do-undo-pair before 
invoking GOTO and then recouple them afterwards [21]. 
However, the implementation of this decouple-recouple scheme
revealed it was rather intricate and causing many repeated
transformations.
In the COT algorithm, COT-DO and COT-UNDO are
seamlessly integrated. Inverse operations are explicitly 
represented in the operation context, and a lazy coupling 
strategy is adopted: the coupling of a do-undo-pair occurs not 
immediately after executing each inverse, but only when both
the do-part and the undo-part appear in the same 
transformation process at some late stage. These strategies help to
avoid overhead transformations caused by the eager coupling
scheme and the decouple-recouple scheme.
In the GOTO-ANYUNDO-based system, the solution to
IP3 is encapsulated in an IP3-preserving IT function, called
IP3P-IT [21]. Inside this function, an extended ET function
has to be used, which may invoke the expensive GOTO 
algorithm to ensure RP with the corresponding IT function.
In contrast, the COT solution to IP3 is encapsulated in the
high-level procedure make IP3safe Inverse(O, CD), which is
more efficient since (1) it avoids converting O to O back and
forth multiple times for each Ox ? NCD (if IP3P-IT(O, Ox)
were used instead); and (2) the transform() procedure is
much cheaper than GOTO.
7.3 OT buffering strategies
Another distinctive feature of the COT algorithm is the
separation of the algorithm from the underlying operation
buffering strategy. This has not only resulted in a cleaner
and simpler logical structure to the algorithm itself, but also
allowed a range of performance optimizations at the 
operation buffering level.
We have devised and implemented a buffering structure in
which not only original operations but also transformed 
versions can be saved; and all transformed operations from the
same original operation are organized in the same version
group. When an original operation is required at the COT
algorithm level, the corresponding version group is searched
for a version that matches the context requirement. If such
a version already exists, it is used to represent the 
original operation in the transformation process, thus saving the
overhead to transform the original operation into this 
version. Under this buffering structure, various heuristics can
be used to selectively save transformed versions to maximize
their reuse and minimize their space usage. By 
experimentation, we have identified some useful heuristics that are
286
effective in saving transformations for a number of common
patterns of operation sequence.
COT is not the first OT algorithm that buffers and uses
original operations for transformation. Several prior OT
algorithms, including CCU [2], adOPTed [19], and 
GOTOANYUNDO [21], have also buffered original operations. COT
is unique in its way of buffering and using original, as well
as transformed, operations.
7.4 OT correctness
OT correctness is a central topic of discussion in OT 
research. In this section, we provide our observations and
opinions on some important OT correctness issues.
OT is a complex system with multiple interrelated 
components. A system-oriented approach is needed for addressing
OT issues. An experimental method, called 
puzzle-detectionresolution, has commonly been used in exploring and 
refining OT solutions. Puzzles are subtle but representative
scenarios in which certain OT properties/conditions may be
violated and the system may produce incorrect results. The
ability to solve all known puzzles is a necessary condition
and an important indicator of the soundness of an OT 
system. In research literature, simple puzzle scenarios are 
often used to illustrate the key reasons why an OT system
works or fails. In real OT system design, however, a real
implementation and comprehensive testing cases based on
complex puzzle scenarios are crucial in validating a design.
Theoretical methods have also been used to formally 
verify OT correctness with respect to some identified 
transformation properties/conditions. Formal verification can be
effective if the correctness issues have been well-understood
and the verification criteria and boundary conditions have
been well-defined. In this regard, experimental methods
like puzzle-detection-resolution can play an important role
in gaining the necessary insights into the real correctness
issues, and establishing suitable criteria and conditions for
formal verification.
A systematic approach is needed in conducting both 
experimental and theoretic OT research. Many OT 
components and issues are intimately related, and a solution to
one issue, if examined in isolation, is unlikely to be 
correct or complete. For example, a solution that works well
for consistency maintenance (do), may fail when both do
and undo problems are considered; and an undo solution
(e.g. preserving IP2) may violate the solution to 
consistency maintenance [21]. A complete OT solution to both do
and undo problems is significantly more difficult to design
than a partial solution to only one of them.
On the other hand, a difficult issue in one OT component
may be resolved easily, or avoided altogether, if this issue
is addressed from a different OT component. For example,
it is known that devising and proving transformation 
functions capable of preserving properties CP2, IP2, and IP3
are difficult. However, these difficulties can be avoided by
devising control algorithms (like COT) capable of breaking
the pre-conditions for requiring these properties; it is also
easier to prove a control algorithm is capable of breaking
the pre-conditions for these properties, than to prove 
transformation functions are capable of preserving them.
Different OT systems may have different divisions of 
responsibility among their components and hence different
correctness requirements for these components. Caution
must be taken in interpreting correctness results. For 
example, CP1 and CP2 were proven to be necessary and 
sufficient for adOPTed-based systems to converge [19, 13], but
this result cannot be generalized to all OT systems. In fact,
CP1 and CP2 are neither sufficient nor necessary for many
OT systems. They are insufficient because an OT system
may need to preserve additional properties/conditions, such
as IP2, IP3, and those summarized in [21]. They are 
unnecessary if the pre-conditions for requiring them have been
broken. For example, neither CP1 nor CP2 is required in the
REDUCE system based on the GOT algorithm for ensuring
convergence [23]. CP2 is also not required by OT systems
based on COT or some prior OT algorithms [26, 20, 12].
One OT correctness issue, which is often discussed in 
relation to the CP2-violation problem, is the false-tie problem:
when two (or more) insert operations with the same position
are IT-transformed with each other, the position tie may be
false if it was not original but caused by previous 
transformations. An OT system may fail to produce correct results
if the normal tie-breaking rule (e.g. based on site 
identifiers) is used to break false-ties. This problem was long
discovered in early OT work and a concrete scenario related
to this problem was illustrated in Fig. 6 of [23]. It is beyond
the scope of this paper to discuss solutions to this problem,
but it is worth pointing out that the false-tie problem is
different from the CP2-violation problem: a false-tie may
occur without violating CP2. In our view, the false-tie
problem is an issue at the transformation function level and
its solution could and should be localized at this level as
well. For alternative views and approaches to this problem,
the reader is referred to [8, 11, 5].
The COT algorithm has been implemented and validated
by a comprehensive testing suite covering all known OT
puzzle scenarios. In this paper, informal analysis and 
simple puzzle scenarios have been used to show the 
correctness of COT with respect to various transformation 
properties/conditions. Formal verification of COT correctness
with respect to these properties/conditions, and 
quantitative analysis of the time and space complexity of COT, shall
be reported in a journal version of this paper.