The theory of causality is central to distributed 
computing and to the design of all existing OT algorithms. 
Following Lamport [9], causal-dependency/-independency 
relations among editing operations can be defined in terms of
their generation and execution sequences [4, 23].
Definition 1. Causal-dependency relation →
Given two operations Oa and Ob, generated at sites i and
j, Ob is causal-dependent on Oa, denoted by Oa → Ob, iff:
(1) i = j and the generation of Oa happened before the 
generation of Ob; or (2) i = j and the execution of Oa at site j
happened before the generation of Ob; or (3) there exists an
operation Ox, such that Oa → Ox and Ox → Ob. 2
Definition 2. Causal-independency relation  
Given two operations Oa and Ob, Oa and Ob are 
causalindependent or concurrent, denoted by Oa Ob, iff neither
Oa → Ob, nor Ob → Oa. 2
Just as Vector Logical Clocks are used for capturing 
casuality in distributed systems [17], State Vectors have been
used for capturing causal relationships among operations
and for representing document states in OT systems [4, 19,
23].
To illustrate causal relations among operations, consider
a real-time group editing session with two sites in Figure 1.
There are three editing operations in this scenario (the undo
command Undo(O2) and its relation with other operations
shall be explained later): O1 generated at site 0, and O2 and
O3 generated at site 1. According to Definitions 1 and 2,
we have O2 → O3 because the generation of O2 happened
before the generation of O3; O1 O2 and O1 O3 because
for each pair, neither operation"s execution happened before
the other operation"s generation.
In the following discussion, we shall use the term 
ITtransform to mean the use of the IT (Inclusion 
Transformation) function: IT(Oa, Ob), which transforms operation
Oa against operation Ob in such a way that the impact of Ob
is effectively included in Oa [23]. This term is introduced to
differentiate this special transformation function from other
steps involved in a transformation process.
Figure 1: A real-time group editing scenario.
The scenario in Figure 1 (without the undo command) has
often been used to illustrate the dOPT-puzzle. Under the
dOPT algorithm [4], when O2 arrives at site 0, it will be 
ITtransformed against O1 since O2 O1; this is correct because
O2 and O1 are defined on the same (initial) document state.
When O3 arrives at site 0, it will also be IT-transformed
against O1 since O3 O1; but this is incorrect because O3 is
defined on the document state that contains the effect of O2,
whereas O1 is defined on the initial document state. In this
case, the parameters of O3 and O1 are not comparable and
hence may not be IT-transformed correctly. The solution to
this puzzle is first to IT-transform O1 against O2 to produce
O1, which is defined on the document state including the
effect of O2 (the same state on which O3 is defined), and
then to IT-transform O3 against O1 [22].
From Definitions 1 and 2, it is clear that the 
causaldependency relation is only defined for original operations
(e.g. O1, O2 and O3) directly generated by users, but not for
transformed operations (e.g. O1). Furthermore, the 
concurrency relation does not capture the essential condition for
correct IT-transformation: the two input operations must
be defined on the same document state [23].
Another major limitation of causality is its unsuitability
for capturing OT conditions for inverse operations. The
Undo(O2) command in Figure 1 is interpreted as an inverse
operation O2. The correct undo effect for O2 is to eliminate
the effect of O2 but retain the effects of other operations
(i.e. O1 and O3) [21]. To achieve this effect, O2 needs to
be treated as an operation defined on the document state
including the effect of O2 but not O1 and O3, so that O2
can be transformed against O1 and O3 before its execution.
However, according to Lamport"s happen-before relation [9],
Undo(O2) is causally dependent on O1, O2, and O3. If O2
was to inherit the causal relation of Undo(O2), then it would
be effectively treated as an operation defined on the 
document state with the effects of all three operations O1, O2,
and O3, which would prohibit O2 from being transformed
against any operation, thus failing to achieve the correct
undo effect. Moreover, after executing an inverse 
operation like O2, the document state can no longer be properly
represented by the state vector, which is only capable of
representing original normal editing operations.