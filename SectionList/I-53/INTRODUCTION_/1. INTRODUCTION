Coalition formation, a key form of interaction in multi-agent 
systems, is the process of joining together two or more agents so as
to achieve goals that individuals on their own cannot, or to achieve
them more efficiently [1, 11, 14, 13]. Often, in such situations,
there is more than one possible coalition and a player"s payoff 
depends on which one it joins. Given this, a key problem is to ensure
that none of the parties in a coalition has any incentive to break
away from it and join another coalition (i.e., the coalitions should
be stable). However, in many cases there may be more than one
solution (i.e., a stable coalition). In such cases, it becomes difficult
to select a single solution from among the possible ones, especially
if the parties are self-interested (i.e., they have different preferences
over stable coalitions).
In this context, cooperative game theory deals with the 
problem of coalition formation and offers a number of solution 
concepts that possess desirable properties like stability, fair division
of joint gains, and uniqueness [16, 14]. Cooperative game theory
differs from its non-cooperative counterpart in that for the former
the players are allowed to form binding agreements and so there is
a strong incentive to work together to receive the largest total 
payoff. Also, unlike non-cooperative game theory, cooperative game
theory does not specify a game through a description of the 
strategic environment (including the order of players" moves and the set
of actions at each move) and the resulting payoffs, but, instead, it
reduces this collection of data to the coalitional form where each
coalition is represented by a single real number: there are no 
actions, moves, or individual payoffs. The chief advantage of this
approach, at least in multiple-player environments, is its practical
usefulness. Thus, many more real-life situations fit more easily into
a coalitional form game, whose structure is more tractable than that
of a non-cooperative game, whether that be in normal or extensive
form and it is for this reason that we focus on such forms in this
paper.
Given these observations, a number of multiagent systems 
researchers have used and extended cooperative game-theoretic 
solutions to facilitate automated coalition formation [20, 21, 18]. 
Moreover, in this work, one of the most extensively studied solution 
concepts is the Shapley value [19]. A player"s Shapley value gives an
indication of its prospects of playing the game - the higher the
Shapley value, the better its prospects. The main advantage of the
Shapley value is that it provides a solution that is both unique and
fair (see Section 2.1 for a discussion of the property of fairness).
However, while these are both desirable properties, the Shapley
value has one major drawback: for many coalition games, it 
cannot be determined in polynomial time. For instance, finding this
value for the weighted voting game is, in general, #P-complete [6].
A problem is #P-hard if solving it is as hard as counting 
satisfying assignments of propositional logic formulae [15, p442]. Since
#P-completeness thus subsumes NP-completeness, this implies that
computing the Shapley value for the weighted voting game will be
intractable in general. In other words, it is practically infeasible to
try to compute the exact Shapley value. However, the voting game
has practical relevance to multi-agent systems as it is an important
means of reaching consensus between multiple agents. Hence, our
objective is to overcome the computational complexity of finding
the Shapley value for this game. Specifically, we first show that
there are some specific voting games for which the exact value can
959
978-81-904262-7-5 (RPS) c 2007 IFAAMAS
be computed in polynomial time. By identifying such games, we
show, for the first tme, when it is feasible to find the exact value and
when it is not. For the computationally complex voting games, we
present a new randomised method, along the lines of Monte-Carlo
simulation, for computing the approximate Shapley value.
The computational complexity of such games has typically been
tackled using two main approaches. The first is to use 
generating functions [3]. This method trades time complexity for 
storage space. The second uses an approximation technique based on
Monte Carlo simulation [12, 7]. However the method we propose is
more general than either of these (see Section 6 for details). 
Moreover, no work has previously analysed the approximation error. The
approximation error relates to how close the approximate is to the
true Shapley value. Specifically, it is the difference between the true
and the approximate Shapley value. It is important to determine
this error because the performance of an approximation method is
evaluated in terms of two criteria: its time complexity, and its 
approximation error. Thus, our contribution lies in also in providing,
for the first time, an analysis of the percentage error in the 
approximate Shapley value. This analysis is carried out empirically.
Our experiments show that the error is always less than 20%,
and in most cases it is under 5%. Finally, our method has time
complexity linear in the number of players and it does not require
any arrays (i.e., it is economical in terms of both computing time
and storage space). Given this, and the fact that software agents
have limited computational resources and therefore cannot 
compute the true Shapley value, our results are especially relevant to
such resource bounded agents.
The rest of the paper is organised as follows. Section 2 defines
the Shapley value and describes the weighted voting game. In 
Section 3 we describe voting games whose Shapley value can be found
in polynomial time. In Section 4, we present a randomized method
for finding the approximate Shapley value and analyse its 
performance in Section 5. Section 6 discusses related literature. Finally,
Section 7 concludes.
