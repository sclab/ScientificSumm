In [4], Huebscher and McCann have proposed an adaptive
middleware design for context-aware applications. Their
adaptive middleware uses utility functions to choose the best
context provider (given the QoC requirements of 
applications and the QoC of alternative means of context 
acquisition). In our negotiation model, the calculation of utility
function Uc was inspired by this approach. Henricksen and
Indulska propose an approach to modelling and using 
imperfect information in [3]. They characterize various types and
sources of imperfect context information and present a set of
novel context modelling constructs. They also outline a 
software infrastructure that supports the management and use
of imperfect context information. Judd and Steenkiste in [5]
describe a generic interface to query context services 
allowing clients to specify their quality requirements as bounds
on accuracy, confidence, update time and sample interval.
In [6], Lei et al. present a context service which accepts
freshness and confidence meta-data from context sources,
and passes this along to clients so that they can adjust their
level of trust accordingly. [10] presents a framework for 
realizing dynamic context consistency management. The 
framework supports inconsistency detection based on a semantic
matching and inconsistency triggering model, and 
inconsistency resolution with proactive actions to context sources.
Most approaches to provide appropriate context utilize a
centralized arbitrator. In our approach, we let distributed
context providers themselves decide who can provide 
appropriate context information. Our approach can reduce the
burden of the middleware, because we do not need the 
middleware to provide a context selection mechanism. It can
avoid the serious consequences caused by a breakdown of
the arbitrator. Also, it can guarantee context providers"
interests.
