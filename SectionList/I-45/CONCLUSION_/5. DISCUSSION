We have presented a scheme for mapping commitment machines
to BDI platforms (using SAAPL as an exemplar), identified three
changes that needed to be made to SAAPL to support CM-based 
interaction, and shown that turn management can be avoided in 
CMbased interaction, provided the CM is locally monotonic. The three
changes to SAAPL, and the translation scheme from commitment
machine to BDI plans are both applicable to any BDI language.
As we have mentioned in section 1, there has been some work
on designing flexible and robust agent interaction, but virtually no
work on implementing flexible and robust interactions.
We have already discussed STAPLE [9, 10]. Another piece of
work that is relevant is the work by Cheong and Winikoff on their
Hermes methodology [2]. Although the main focus of their work is
a pragmatic design methodology, they also provide guidelines for
implementing Hermes designs using BDI platforms (specifically
Jadex) [3]. However, since Hermes does not yield a design that is
formal, it is only possible to generate skeleton code that then needs
to be completed. Also, they do not address the turn taking issue:
how to decide which agent acts when more than one agent is able
to act.
9
We also assume that the communication medium does not deliver
messages out of order, which is the case for (e.g.) TCP.
The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 879
Figure 8: Sample runs from 3APL implementation (non-alternating turns)
The work of Kremer and Flores (e.g. [8]) also uses 
commitments, and deals with implementation. However, they provide 
infrastructure support (CASA) rather than a programming language,
and do not appear to provide assistance to a programmer seeking to
implement agents.
Although we have implemented the NetBill interaction using
3APL, the changes to the semantics were done by modifying our
NetBill 3APL program, rather than by modifying the 3APL 
implementation itself. Clearly, it would be desirable to modify the
semantics of 3APL (or of another language) directly, by changing
the implementation. Also, although we have not done so, it should
be clear that the translation from a CM to its implementation could
easily be automated.
Another area for further work is to look at how the assumptions
required to ensure that actions commute can be relaxed.
Finally, there is a need to perform empirical evaluation. There
has already been some work on comparing Hermes with a 
conventional message-centric approach to designing interaction, and
this has shown that using Hermes results in designs that are 
significantly more flexible and robust [4]. It would be interesting to
compare commitment machines with Hermes, but, since 
commitment machines are a framework, not a design methodology, we
need to compare Hermes with a methodology for designing 
interactions that results in commitment machines [13, 17].
