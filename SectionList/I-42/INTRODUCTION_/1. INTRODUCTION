Many historical problems in the AI community can be 
transformed into Constraint Satisfaction Problems (CSP). With the 
advent of distributed AI, multi-agent systems became a popular way
to model the complex interactions and coordination required to
solve distributed problems. CSPs were originally extended to
distributed agent environments in [9]. Early domains for 
distributed constraint satisfaction problems (DisCSP) included job
shop scheduling [1] and resource allocation [2]. Many domains
for agent systems, especially teamwork coordination, distributed
scheduling, and sensor networks, involve overly constrained 
problems that are difficult or impossible to satisfy for every constraint.
Recent approaches to solving problems in these domains rely
on optimization techniques that map constraints into multi-valued
utility functions. Instead of finding an assignment that satisfies all
constraints, these approaches find an assignment that produces a
high level of global utility. This extension to the original DisCSP
approach has become popular in multi-agent systems, and has been
labeled the Distributed Constraint Optimization Problem (DCOP)
[1].
Current algorithms that solve complete DCOPs use two main
approaches: search and dynamic programming. Search based 
algorithms that originated from DisCSP typically use some form of
backtracking [10] or bounds propagation, as in ADOPT [3]. 
Dynamic programming based algorithms include DPOP and its 
extensions [5, 6, 7]. To date, both categories of algorithms arrange
agents into a traditional pseudotree to solve the problem.
It has been shown in [6] that any constraint graph can be mapped
into a traditional pseudotree. However, it was also shown that 
finding the optimal pseudotree was NP-Hard. We began to 
investigate the performance of traditional pseudotrees generated by 
current edge-traversal heuristics. We found that these heuristics 
often produced little parallelism as the pseudotrees tended to have
high depth and low branching factors. We suspected that there
could be other ways to arrange the pseudotrees that would 
provide increased parallelism and smaller message sizes. After 
exploring these other arrangements we found that cross-edged 
pseudotrees provide shorter depths and higher branching factors than
the traditional pseudotrees. Our hypothesis was that these 
crossedged pseudotrees would outperform traditional pseudotrees for
some problem types.
In this paper we introduce an extension to the DPOP algorithm
that handles an extended set of pseudotree arrangements which
include cross-edged pseudotrees. We begin with a definition of
741
978-81-904262-7-5 (RPS) c 2007 IFAAMAS
DCOP, traditional pseudotrees, and cross-edged pseudotrees. We
then provide a summary of the original DPOP algorithm and 
introduce our DCPOP algorithm. We discuss the complexity of our
algorithm as well as the impact of pseudotree generation 
heuristics. We then show that our Distributed Cross-edged Pseudotree
Optimization Procedure (DCPOP) performs significantly better in
practice than the original DPOP algorithm for some problem 
instances. We conclude with a selection of ideas for future work and
extensions for DCPOP.
