AND JAVA MESSAGE SERVICE (JMS)
Message-oriented middleware systems support 
communication between distributed components via message-passing:
the sender sends a message to identified queues, which 
usually reside on a server. A receiver retrieves the message from
the queue at a different time and may acknowledge the reply
using the same asynchronous mechanism. Message-oriented
middleware thus supports asynchronous communication in
a very natural way, achieving de-coupling of senders and
receivers. A sender is able to continue processing as soon
as the middleware has accepted the message; eventually,
the receiver will send an acknowledgment message and the
sender will be able to collect it at a convenient time. 
However, given the way they are implemented, these middleware
systems usually require resource-rich devices, especially in
terms of memory and disk space, where persistent queues
of messages that have been received but not yet processed,
are stored. Sun Java Message Service [5], IBM WebSphere
MQ [6], Microsoft MSMQ [12] are examples of very 
successful message-oriented middleware for traditional distributed
systems.
The Java Messaging Service (JMS) is a collection of 
interfaces for asynchronous communication between distributed
components. It provides a common way for Java programs
to create, send and receive messages. JMS users are usually
referred to as clients. The JMS specification further defines
providers as the components in charge of implementing the
messaging system and providing the administrative and 
control functionality (i.e., persistence and reliability) required
by the system. Clients can send and receive messages, 
asynchronously, through the JMS provider, which is in charge of
the delivery and, possibly, of the persistence of the messages.
There are two types of communication supported: point
to point and publish-subscribe models. In the point to point
model, hosts send messages to queues. Receivers can be 
registered with some specific queues, and can asynchronously
retrieve the messages and then acknowledge them. The
publish-subscribe model is based on the use of topics that
can be subscribed to by clients. Messages are sent to topics
by other clients and are then received in an asynchronous
mode by all the subscribed clients. Clients learn about the
available topics and queues through Java Naming and 
Directory Interface (JNDI) [14]. Queues and topics are created
by an administrator on the provider and are registered with
the JNDI interface for look-up.
In the next section, we introduce the challenges of mobile
networks, and show how JMS can be adapted to cope with
these requirements.
