Research in cognitive radio has increased rapidly [4, 17]
over the years, and it is being projected as one of the leading
enabling technologies for wireless networks of the future [9].
As mentioned earlier, the FCC has already identified new
regimes for spectrum sharing between primary users and
secondary users and a variety of systems have been proposed
in the literature to support such sharing [4, 17].
Detecting the presence of a primary user is non-trivial,
especially a legacy primary user that is not cognitive 
radio aware. Secondary users must be able to detect the 
primary even if they cannot properly decode its signals. This
has been shown by Sahai et al. [16] to be extremely 
difficult even if the modulation scheme is known. Sophisticated
and costly hardware, beyond a simple energy detector, is 
required to improve signal detection accuracy [16]. Moreover,
a shadowed secondary user may not even be able to detect
signals from the primary. As a result, simple local 
sensing approaches have not gained much momentum. This has
motivated the need for cooperation among cognitive radios
[16].
More recently, some researchers have proposed approaches
for radio coordination. Liu et al. [11] consider a centralized
access point (or base station) architecture in which 
sensing information is forwarded to APs for spectrum allocation
purposes. APs direct mobile clients to collect such 
sensing information on their behalf. However, due to the need
of a fixed AP infrastructure, such a centralized approach is
clearly not scalable.
In other work, Zhao et al. [17] propose a distributed 
coordination approach for spectrum sensing and allocation.
Cognitive radios organize into clusters and coordination 
occurs within clusters. The CORVUS [4] architecture proposes
a similar clustering method that can use either a centralized
or decentralized approach to manage clusters. Although an
improvement over purely centralized approaches, these 
techniques still require a setup phase to generate the clusters,
which not only adds additional delay, but also requires many
of the secondary users to be static or quasi-static. In 
contrast, GUESS does not place such restrictions on secondary
users, and can even function in highly mobile environments.
