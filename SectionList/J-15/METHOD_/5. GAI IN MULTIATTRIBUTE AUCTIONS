5.1 The Multiattribute Procurement Problem
In the procurement setting a single buyer wishes to procure a
single good, in some configuration θ ∈ Θ from one of the 
candidate sellers s1, . . . , sn. The buyer has some private valuation
function (wtp) ub : Θ → R, and similarly each seller si has a
private valuation function (willingness-to-accept). For compliance
with the procurement literature we refer to seller si"s valuation as a
cost function, denoted by ci. The multiattribute allocation problem
(MAP) [19] is the welfare optimization problem in procurement
over a discrete domain, and it is defined as:
i∗
, θ∗
= arg max
i,θ
(ub(θ) − ci(θ)). (5)
To illustrate the need for a GAI price space we consider the case
of traders with non-additive preferences bidding in an additive price
space such as in PK"s auction AD. If the buyer"s preferences are
not additive, choosing preferred levels per attribute (as in auction
AD) admits undesired combinations and fails to guide the sellers to
the efficient configurations. Non-additive sellers face an exposure
problem, somewhat analogous to traders with complementary 
preferences that participate in simultaneous auctions. A value a1
for
attribute a may be optimal given that the value of another attribute
b is b1
, and arbitrarily suboptimal given other values of b. 
Therefore bidding a1
and b1
may result in a poor allocation if the seller
is outbid on b1
but left holding a1
.4
Instead of assuming full additivity, the auction designer can come
up with a GAI preference structure that captures the set of common
interdependencies between attributes. If traders could bid on 
clusters of interdependent attributes, it would solve the problems 
discussed above. For example, if a and b are interdependent (meaning
CDI(a, b) does not hold), we should be able to bid on the cluster
ab. If b in turn depends on c, we need another cluster bc. This
is still better than a general pricing structure that solicits bids for
the cluster abc. We stress that each trader may have a different set
of interdependencies, and therefore to be completely general the
4
If only the sellers are non-additive, the auction design could 
potentially alleviate this problem by collecting a new set of bids each
round and forgetting bids from previous rounds, and also guiding
non-additive sellers to bid on only one level per attribute in order
to avoid undesired combinations.
ya
yb


 yc
Z
Z
Z
(i)


¨
©a, b


¨
©b, c
(ii)
Figure 1: (i) CDI map for {a, b, c}, reflecting the single 
condition CDI(a, c). (ii) The corresponding GAI network.
GAI structure needs to account for all.5
However, in practice many
domains have natural dependencies that are mutual to traders.
5.2 GAI Trees
Assume that preferences of all traders are reflected in a GAI
structure I1, . . . , Ig. We call each Ir a GAI element, and any 
assignment to Ir a sub-configuration. We use θr to denote the 
subconfiguration formed by projecting configuration θ to element Ir.
DEFINITION 9. Let α be an assignment to Ir and β an 
assignment to Ir . The sub-configurations α and β are consistent if for
any attribute aj ∈ Ir ∩ Ir , α and β agree on the value of aj. A
collection ν of sub-configurations is consistent if all pairs α, β ∈ ν
are consistent. The collection is called a cover if it contains 
exactly one sub-configuration αr corresponding to each element Ir,
r ∈ {1, . . . , g}.
Note that a consistent cover {α1, . . . , αg} represents a full 
configuration, which we denote by (α1, . . . , αg).
A GAI network is a graph G whose nodes correspond to the GAI
elements I1, . . . , Ig, with an edge between Ir, Ir iff Ir ∩ Ir = ∅.
Equivalently, a GAI network is the clique graph of a CDI-map.
In order to justify the compact pricing structure we require that
for any set of optimal configurations (wrt a given utility function),
with a corresponding collection of sub-configurations γ, all 
consistent covers in γ must be optimal configurations as well. To ensure
this (see Lemmas 8 and 10), we assume a GAI decomposition in
the form of a tree or a forest (the GAI tree). A tree structure can
be achieved for any set of CDI conditions by triangulation of the
CDI-map prior to construction of the clique graph (GAI networks
and GAI trees are defined by Gonzales and Perny [14], who also
provide a triangulation algorithm). Under GAI, the buyer"s value
function ub and sellers" cost functions ci can be decomposed as in
(1). We use fb,r and fi,r to denote the local functions of buyer and
sellers (respectively), according to (4).
For example, consider the procurement of a good with three
attributes, a, b, c. Each attribute"s domain has two values (e.g.,
{a1
, a2
} is the domain of A). Let the GAI structure be I1 =
{a, b}, I2 = {b, c}. Figure 1 shows the simple CDI map and
the corresponding GAI network, which is a GAI tree. Here, 
subconfigurations are assignments of the form a1
b1
, a1
b2
, b1
c1
, and
so on. The set of sub-configurations {a1
b1
, b1
c1
} is a consistent
cover, corresponding to the configuration a1
b1
c1
. In contrast, the
set {a1
b1
, b2
c1
} is inconsistent.
5.3 The GAI Auction
We define an iterative multiattribute auction that maintains a GAI
pricing structure: that is, a price pt
(·) corresponding to each 
subconfiguration of each GAI-tree element. The price of a 
configuration θ at time t is defined as
pt
(θ) =
g
X
r=1
pt
(θr) − Δ.
5
We relax this requirement in Section 6.
231
Bidders submit sub-bids on sub-configurations and on an 
additional global discount term Δ.6
Sub-bids are always submitted for
current prices, and need to be resubmitted at each round, therefore
they do not need to explicitly carry the price. The set of full bids
of a seller contains all consistent covers that can be generated from
that seller"s current set of sub-bids. The existence of a full bid over
a configuration θ represents the seller"s willingness to accept the
price pt
(θ) for supplying θ.
At the start of the auction, the buyer reports (to the auction, not
to sellers) her complete valuation in GAI form. The initial prices
of sub-configurations are set at some level above the buyer"s 
valuations, that is, p1
(θr) > fb,r(θr) for all θr. The discount Δ is
initialized to zero. The auction has the dynamics of a descending
clock auction: at each round t, bids are collected for current prices
and then prices are reduced according to price rules. A seller is
considered active in a round if she submits at least one full bid. In
round t > 1, only sellers who where active in round t − 1 are 
allowed to participate, and the auction terminates when no more than
a single seller is active. We denote the set of sub-bids submitted by
si by Bt
i , and the corresponding set of full bids is
Bt
i = {θ = (θ1, . . . , θg) ∈ Θ | ∀r.θr ∈ Bt
i }.
In our example, a seller could submit sub-bids on a set of 
subconfigurations such as a1
b1
and b1
c1
, and that combines to a full
bid on a1
b1
c1
.
The auction proceeds in two phases. In the first phase (A), at
each round t the auction computes a set of preferred 
sub-configurations Mt
. Section 5.4 shows how to define Mt
to ensure 
convergence, and Section 5.5 shows how to efficiently compute it.
In phase A, the auction adjusts prices after each round, reducing
the price of every sub-configuration that has received a bid but is
not in the preferred set. Let be the prespecified price increment
parameter. Specifically, the phase A price change rule is applied to
all θr ∈
Sn
i=1 Bt
i \ Mt
:
pt+1
(θr) ← max(pt
(θr) −
g
, fb,r(θr)). [A]
The RHS maximum ensures that prices do not get reduced below
the buyer"s valuation in phase A.
Let Mt
denote the set of configurations that are consistent covers
in Mt
:
Mt
= {θ = (θ1, . . . , θg) ∈ Θ | ∀r.θr ∈ Mt
}
The auction switches to phase B when all active sellers have at
least one full bid in the buyer"s preferred set:
∀i. Bt
i = ∅ ∨ Bt
i ∩ Mt
= ∅. [SWITCH]
Let T be the round at which [SWITCH] becomes true. At this
point, the auction selects the buyer-optimal full bid ηi for each
seller si.
ηi = arg max
θ∈BT
i
(ub(θ) − pT
(θ)). (6)
In phase B, si may bid only on ηi. The prices of sub-configurations
are fixed at pT
(·) during this phase. The only adjustment in phase B
is to Δ, which is increased in every round by . The auction 
terminates when at most one seller (if exactly one, designate it sˆi) is
active. There are four distinct cases:
1. All sellers drop out in phase A (i.e., before rule [SWITCH]
holds). The auction returns with no allocation.
6
The discount term could be replaced with a uniform price 
reduction across all sub-configurations.
2. All active sellers drop out in the same round in phase B. The
auction selects the best seller (sˆi) from the preceding round,
and applies the applicable case below.
3. The auction terminates in phase B with a final price above
buyer"s valuation, pT
(ηˆi) − Δ > ub(ηˆi). The auction offers
the winner sˆi an opportunity to supply ηˆi at price ub(ηˆi).
4. The auction terminates in phase B with a final price pT
(ηˆi)−
Δ ≤ ub(ηˆi). This is the ideal situation, where the auction
allocates the chosen configuration and seller at this resulting
price.
The overall auction is described by high-level pseudocode in 
Algorithm 1. As explained in Section 5.4, the role of phase A is
to guide the traders to their efficient configurations. Phase B is a
one-dimensional competition over the surplus that remaining seller
candidates can provide to the buyer. In Section 5.5 we discuss the
computational tasks associated with the auction, and Section 5.6
provides a detailed example.
Algorithm 1 GAI-based multiattribute auction
collect a reported valuation, ˆv from the buyer
set high initial prices, p1
(θr) on each level θr, and set Δ = 0
while not [SWITCH] do
collect sub-bids from sellers
compute Mt
apply price change by [A]
end while
compute ηi
while more than one active seller do
increase Δ by
collect bids on (ηi, Δ) from sellers
end while
implement allocation and payment to winning seller
5.4 Economic Analysis
When the optimal solution to MAP (5) provides negative 
welfare and sellers do not bid below their cost, the auction 
terminates in phase A, no trade occurs and the auction is trivially 
efficient. We therefore assume throughout the analysis that the optimal
(seller,configuration) pair provides non-negative welfare.
The buyer profit from a configuration θ is defined as7
πb(θ) = ub(θ) − p(θ)
and similarly πi(θ) = p(θ) − ci(θ) is the profit of si. In 
addition, for μ ⊆ {1, . . . , g} we denote the corresponding set of 
subconfigurations by θμ, and define the profit from a configuration θ
over the subset μ as
πb(θμ) =
X
r∈μ
(fb,r(θr) − p(θr)).
πi(θμ) is defined similarly for si. Crucially, for any μ and its 
complement ¯μ and for any trader τ,
πτ (θ) = πτ (θμ) + πτ (θ¯μ).
The function σi : Θ → R represents the welfare, or surplus 
function ub(·) − ci(·). For any price system p,
σi(θ) = πb(θ) + πi(θ).
7
We drop the t superscript in generic statements involving price
and profit functions, understanding that all usage is with respect to
the (currently) applicable prices.
232
Since we do not assume anything about the buyer"s strategy, the
analysis refers to profit and surplus with respect to the face value
of the buyer"s report. The functions πi and σi refer to the true cost
functions of si.
DEFINITION 10. A seller is called Straightforward Bidder (SB)
if at each round t she bids on Bt
i as follows: if maxθ∈Θ πt
i (θ) < 0,
then Bt
i = ∅. Otherwise let
Ωt
i ⊆ arg max
θ∈Θ
πt
i (θ)
Bt
i = {θr | θ ∈ Ωt
i, r ∈ {1, . . . , g}}.
Intuitively, an SB seller follows a myopic best response strategy
(MBR), meaning they bid myopically rather than strategically by
optimizing their profit with respect to current prices. To 
calculate Bt
i sellers need to optimize their current profit function, as 
discussed in Section 4.2.
The following lemma bridges the apparent gap between the 
compact pricing and bid structure and the global optimization performed
by the traders.
LEMMA 8. Let Ψ be a set of configurations, all maximizing
profit for a trader τ (seller or buyer) at the relevant prices. Let
Φ = {θr | θ ∈ Ψ, r ∈ {1, . . . , g}. Then any consistent cover in Φ
is also a profit-maximizing configuration for τ.
Proof sketch (full proof in the online appendix): A source of an 
element θr is a configuration ˜θ ∈ Ψ from which it originated 
(meaning, ˜θr = θr). Starting from the supposedly suboptimal cover θ1
,
we build a series of covers θ1
, . . . , θL
. At each θj
we flip the value
of a set of sub-configurations μj corresponding to a subtree, with
the sub-configurations of the configuration ˆθj
∈ Ψ which is the
source of the parent γj of μj . That ensures that all elements in
μj ∪ {γj} have a mutual source ˆθj
. We show that all θj
are 
consistent and that they must all be suboptimal as well, and since all
elements of θL
have a mutual source, meaning θL
= ˆθL
∈ Ψ, it
contradicts optimality of Ψ.
COROLLARY 9. For SB seller si,
∀t, ∀θ ∈ Bt
i , πt
i (θ ) = max
θ∈Θ
πt
i (θ).
Next we consider combinations of configurations that are only
within some δ of optimality.
LEMMA 10. Let Ψ be a set of configurations, all are within δ
of maximizing profit for a trader τ at the prices, and Φ defined
as in Lemma 8. Then any consistent cover in Φ is within δg of
maximizing utility for τ.
This bound is tight, that is for any GAI tree and a non-trivial
domain we can construct a set Ψ as above in which there exists a
consistent cover whose utility is exactly δg below the maximal.
Next we formally define Mt
. For connected GAI trees, Mt
is
the set of sub-configurations that are part of a configuration within
of optimal. When the GAI tree is in fact a forest, we apportion
the error proportionally across the disconnected trees. Let G be
comprised of trees G1, . . . , Gh. We use θj to denote the projection
of a configuration θ on the tree Gj , and gj denotes the number of
GAI elements in Gj .
Mt
j = {θr | πt
b(θj) ≥ max
θj ∈Θj
πt
b(θj ) − gj
g
, r ∈ Gj }
Then define Mt
=
Sh
j=1 Mt
j.
Let ej = gj −1 denote the number of edges in Gj . We define the
connectivity parameter, e = maxj=1,...,h ej . As shown below, this
connectivity parameter is an important factor in the performance of
the auction.
COROLLARY 11.
∀θ ∈ Mt
, πt
b(θ ) ≥ max
θ∈Θ
πt
b(θ) − (e + 1)
In the fully additive case this loss of efficiency reduces to . On the
other extreme, if the GAI network is connected then e+1 = g. We
also note that without assuming any preference structure, meaning
that the CDI map is fully connected, g = 1 and the efficiency loss
is again .
Lemmas 12 through 15 show that through the price system, the
choice of buyer preferred configurations, and price change rules,
Phase A leads the buyer and each of the sellers to their mutually
efficient configuration.
LEMMA 12. maxθ∈Θ πt
b(θ) does not change in any round t of
phase A.
PROOF. We prove the lemma per each tree Gj. The optimal
values for disconnected components are independent of each other
hence if the maximal profit for each component does not change
the combined maximal profit does not change as well. If the price
of θj was reduced during phase A, that is pt+1
(θj) = pt
(θj ) − δ,
it must be the case that some w ≤ gj sub-configurations of θj are
not in Mt
j, and δ = w
g
. The definition of Mt
j ensures
πt
b(θj ) < max
θ∈Θ
πt
b(θj) − gj
g
.
Therefore,
πt+1
b (θ ) = πt
(θ ) + δ = πt
(θ ) +
w
g
≤ max
θ∈Θ
πt
b(θj).
This is true for any configuration whose profit improves, 
therefore the maximal buyer profit does not change during phase A.
LEMMA 13. The price of at least one sub-configuration must
be reduced at every round in phase A.
PROOF. In each round t < T of phase A there exists an active
seller i for whom Bt
i ∩ Mt
= ∅. However to be active in round t,
Bt
i = ∅. Let ˆθ ∈ Bt
i . If ∀r.ˆθr ∈ Mt
, then ˆθ ∈ Mt
by definition
of Mt
. Therefore there must be ˆθr ∈ Mt
. We need to prove that
for at least one of these sub-configurations, πt
b(ˆθr) < 0 to ensure
activation of rule [A].
Assume for contradiction that for any ˆθr ∈ ¯Mt
, πt
b(ˆθr) ≥ 0.
For simplicity we assume that for any θr, π1
b (θr) is some product
of g
(that can be easily done), and that ensures that πt
b(ˆθr) = 0
because once profit hits 0 it cannot increase by rule [A].
If ˆθr ∈ ¯Mt
, ∀r = 1, . . . , g then πt
b(ˆθ) = 0. This contradicts
Lemma 12 since we set high initial prices. Therefore some of the
sub-configurations of ˆθ are in Mt
, and WLOG we assume it is
ˆθ1, . . . , ˆθk. To be in Mt
these k sub-configurations must have been
in some preferred full configuration, meaning there exists θ ∈ Mt
such that
θ = (ˆθ1, . . . , ˆθk, θk+1, . . . , θg)
Since ˆθ /∈ Mt
It must be that case that πt
b(ˆθ) < πt
b(θ ). Therefore
πt
b(θk+1, . . . , θg) > πt
b(ˆθk+1, . . . , ˆθg) = 0
Hence for at least one r ∈ {k + 1, . . . , g}, πt
b(θr) > 0 
contradicting rule [A].
233
LEMMA 14. When the solution to MAP provides positive 
surplus, and at least the best seller is SB, the auction must reach
phase B.
PROOF. By Lemma 13 prices must go down in every round
of phase A. Rule [A] sets a lower bound on all prices therefore
the auction either terminates in phase A or must reach condition
[SWITCH].
We set the initial prices are high such that maxθ∈Θ π1
b (θ) < 0,
and by Lemma 12 maxθ∈Θ πt
b(θ) < 0 during phase A. We 
assume that the efficient allocation (θ∗
, i∗
) provides positive welfare,
that is σi∗ (θ∗
) = πt
b(θ∗
) + πt
i∗ (θ∗
) > 0. si∗ is SB therefore
she will leave the auction only when πt
i∗ (θ∗
) < 0. This can
happen only when πt
b(θ∗
) > 0, therefore si∗ does not drop in
phase A hence the auction cannot terminate before reaching 
condition [SWITCH].
LEMMA 15. For SB seller si, ηi is (e + 1) -efficient.
PROOF. ηi is chosen to maximize the buyer"s surplus out of Bt
i
at the end of phase A. Since Bt
i ∩ Mt
= ∅, clearly ηi ∈ Mt
. From
Corollary 11 and Corollary 9, for any ˜θ,
πT
b (ηi) ≥ πT
b (˜θ) − (e + 1)
πT
i (ηi) ≥ πT
i (˜θ)
⇒ σi(ηi) ≥ σi(˜θ) − (e + 1)
This establishes the approximate bilateral efficiency of the results
of Phase A (at this point under the assumption of SB). Based on
Phase B"s simple role as a single-dimensional bidding competition
over the discount, we next assert that the overall result is efficient
under SB, which in turn proves to be an approximately ex-post
equilibrium strategy in the two phases.
LEMMA 16. If sellers si and sj are SB, and si is active at least
as long as sj is active in phase B, then
σi(ηi) ≥ max
θ∈Θ
σj(θ) − (e + 2)
.
THEOREM 17. Given a truthful buyer and SB sellers, the 
auction is (e+2) -efficient: the surplus of the final allocation is within
(e + 2) of the maximal surplus.
Following PK, we rely on an equivalence to the one-sided VCG
auction to establish incentive properties for the sellers. In the 
onesided multiattribute VCG auction, buyer and sellers report 
valuation and cost functions ˆub, ˆci, and the buyer pays the sell-side VCG
payment to the winning seller.
DEFINITION 11. Let (θ∗
, i∗
) be the optimal solution to MAP.
Let (˜θ,˜i) be the best solution to MAP when i∗
does not participate.
The sell-side VCG payment is
V CG(ˆub, ˆci) = ˆub(θ∗
) − (ˆub(˜θ) − ˆc˜i(˜θ)).
It is well-known that truthful bidding is a dominant strategy for
sellers in the one-sided VCG auction. It is also shown by PK that
the maximal regret for buyers from bidding truthfully in this 
mechanism is ub(θ∗
) − ci∗ (θ∗
) − (ub(˜θ) − ˆc˜i(˜θ)), that is, the marginal
product of the efficient seller.
Usually in iterative auctions the VCG outcome is only nearly
achieved, but the deviation is bounded by the minimal price change.
We show a similar result, and therefore define δ-VCG payments.
DEFINITION 12. Sell-side δ-VCG payment for MAP is a 
payment p such that
V CG(ˆub, ˆci) − δ ≤ p ≤ V CG(ˆub, ˆci) + δ.
When payment is guaranteed to be δ-VCG sellers can only affect
their payment within that range, therefore their gain by falsely 
reporting their cost is bounded by 2δ.
LEMMA 18. When sellers are SB, the payment in the end of
GAI auction is sell-side (e + 2) -VCG.
THEOREM 19. SB is an (3e + 5) ex-post Nash Equilibrium
for sellers in GAI auction. That is, sellers cannot gain more than
(3e + 5) by deviating.
In practice, however, sellers are unlikely to have the information
that would let them exploit that potential gain. They are much more
likely to lose from bidding on their less attractive configurations.
5.5 Computation and Complexity
The size of the price space maintained in the auction is equal to
the total number of sub-configurations, meaning it is exponential in
maxr |Ir|. This is also equivalent to the tree-width (plus one) of the
original CDI-map. For the purpose of the computational analysis
let dj denote the domain of attribute aj, and I =
Sg
r=1
Q
j∈Ir
dj,
the collection of all sub-configurations. The first purpose of this
sub-section is to show that the complexity of all the computations
required for the auction depends only on |I|, i.e., no computation
depends on the size of the full exponential domain.
We are first concerned with the computation of Mt
. Since Mt
grows monotonically with t, a naive application of optimization
algorithm to generate the best outcomes sequentially might end up
enumerating significant portions of the fully exponential domain.
However as shown below this plain enumeration can be avoided.
PROPOSITION 20. The computation of Mt
can be done in time
O(|I|2
). Moreover, the total time spent on this task throughout the
auction is O(|I|(|I| + T)).
The bounds are in practice significantly lower, based on results on
similar problems from the probabilistic reasoning literature [18].
One of the benefits of the compact pricing structure is the 
compact representation it lends for bids: sellers submit only sub-bids,
and therefore the number of them submitted and stored per seller
is bounded by |I|. Since the computation tasks: Bt
i = ∅, rule
[SWITCH] and choice of ηi are all involving the set Bt
i , it is 
important to note that their performance only depend on the size of
the set Bt
i , since they are all subsumed by the combinatorial 
optimization task over Bt
i or Bt
i ∩ Mt
.
Next, we analyze the number of rounds it takes for the auction
to terminate. Phase B requires maxi=1,...n πT
i (ηi)1
. Since this is
equivalent to price-only auctions, the concern is only with the time
complexity of phase A. Since prices cannot go below fb,r(θr), an
upper bound on the number of rounds required is
T ≤
X
θr∈I
(p1
(θr) − fb,r(θr))
g
However phase A may converge faster. Let the initial negative
profit chosen by the auctioneer be m = maxθ∈Θ π1
b (θ). In the
worst case phase A needs to run until ∀θ ∈ Θ.πb(θ) = m. This
happens for example when ∀θr ∈ I.pt
(θr) = fb,r(θr) + m
g
. In
general, the closer the initial prices reflect buyer valuation, the
faster phase A converges. One extreme is to choose p1
(θr) =
234
I1 I2
a1
b1
a2
b1
a1
b2
a2
b2
b1
c1
b2
c1
b1
c2
b2
c2
fb 65 50 55 70 50 85 60 75
f1 35 20 30 70 65 65 70 61
f2 35 20 25 25 55 110 70 95
Table 1: GAI utility functions for the example domain. fb 
represents the buyer"s valuation, and f1 and f2 costs of the sellers
s1 and s2.
fb,r(θr) + m
g
. That would make phase A redundant, at the cost of
full initial revelation of buyer"s valuation as done in other 
mechanisms discussed below. Between this option and the other extreme,
which is ∀α, ˆα ∈ I, p1
(α) = p1
(ˆα) the auctioneer has a range of
choices to determine the right tradeoff between convergence time
and information revelation. In the example below the choice of a
lower initial price for the domain of I1 provides some speedup by
revealing a harmless amount of information.
Another potential concern is the communication cost associated
with the Japanese auction style. The sellers need to send their bids
over and over again at each round. A simple change can be made
to avoid much of the redundant communication: the auction can
retain sub-bids from previous rounds on sub-configurations whose
price did not change. Since combinations of sub-bids from different
rounds can yield sub-optimal configurations, each sub-bid should
be tagged with the number of the latest round in which it was 
submitted, and only consistent combinations from the same round are
considered to be full bids. With this implementation sellers need
not resubmit their bid until a price of at least one sub-configuration
has changed.
5.6 Example
We use the example settings introduced in Section 5.2. Recall
that the GAI structure is I1 = {a, b}, I2 = {b, c} (note that e = 1).
Table 1 shows the GAI utilities for the buyer and the two sellers
s1, s2. The efficient allocation is (s1, a1
b2
c1
) with a surplus of 45.
The maximal surplus of the second best seller, s2, is 25, achieved
by a1
b1
c1
, a2
b1
c1
, and a2
b2
c2
. We set all initial prices over I1
to 75, and all initial prices over I2 to 90. We set = 8, meaning
that price reduction for sub-configurations is 4. Though with these
numbers it is not guaranteed by Theorem 17, we expect s1 to win on
either the efficient allocation or on a1
b2
c2
which provides a surplus
of 39. The reason is that these are the only two configurations
which are within (e + 1) = 16 of being efficient for s1 (therefore
one of them must be chosen by Phase A), and both provide more
than surplus over s2"s most efficient configuration (and this is
sufficient in order to win in Phase B).
Table 2 shows the progress of phase A. Initially all configuration
have the same cost (165), so sellers bid on their lowest cost 
configuration which is a2
b1
c1
for both (with profit 80 to s1 and 90 to s2),
and that translates to sub-bids on a2
b1
and b1
c1
. M1
contains the
sub-configurations a2
b2
and b2
c1
of the highest value configuration
a2
b2
c1
. Price is therefore decreased on a2
b1
and b1
c1
. After the
price change, s1 has higher profit (74) on a1
b2
c2
and she therefore
bids on a1
b2
and b2
c2
. Now (round 2) their prices go down, 
reducing the profit on a1
b2
c2
to 66 and therefore in round 3 s1 prefers
a2
b1
c2
(profit 67). After the next price change the configurations
a1
b2
c1
and a1
b2
c2
both become optimal (profit 66), and the 
subbids a1
b2
, b2
c1
and b2
c2
capture the two. These configurations stay
optimal for another round (5), with profit 62. At this point s1 has
a full bid (in fact two full bids: a1
b2
c2
and a1
b2
c1
) in M5
, and
I1 I2
t a1b1 a2b1 a1b2 a2b2 b1c1 b2c1 b1c2 b2c2
1 75 75 75 75 90 90 90 90
s1, s2 ∗ s1, s2 ∗
2 75 71 75 75 86 90 90 90
s2 s1 ∗ s2 ∗ s1
3 75 67 71 75 82 90 90 86
s1, s2 ∗ s2 ∗ s1 ∗
4 75 63 71 75 78 90 86 86
s2 s1 ∗ s2 ∗, s1 ∗, s1
5 75 59 67 75 74 90 86 86
s2 ∗, s1 ∗ s2 ∗, s1 ∗, s1
6 71 59 67 75 70 90 86 86
s2 ∗, s1 ∗ ∗, s1 s2 ∗, s1
7 71 55 67 75 70 90 82 86
s2 ∗, s1 ∗ s2 ∗, s1 ∗, s1
8 67 55 67 75 66 90 82 86
∗ s2 ∗, s1 ∗ ∗ ∗, s1 s2 ∗, s1
9 67 51 67 75 66 90 78 86
∗, s2 ∗, s1 ∗ ∗, s2 ∗, s1 ∗, s1
Table 2: Auction progression in phase A. Sell bids and 
designation of Mt
(using ∗) are shown below the price of each 
subconfiguration.
therefore she no longer changes her bids since the price of her 
optimal configurations does not decrease. s2 sticks to a2
b1
c1
during
the first four rounds, switching to a1
b1
c1
in round 5. It takes four
more rounds for s2 and Mt
to converge (M10
∩B10
2 = {a1
b1
c1
}).
After round 9 the auction sets η1 = a1
b2
c1
(which yields more
buyer profit than a1
b2
c2
) and η2 = a1
b1
c1
. For the next round
(10) Δ = 8, increased by 8 for each subsequent round. Note that
p9
(a1
b1
c1
) = 133, and c2(a1
b1
c1
) = 90, therefore πT
2 (η2) =
43. In round 15, Δ = 48 meaning p15
(a1
b1
c1
) = 85 and that
causes s2 to drop out, setting the final allocation to (s1, a1
b2
c1
)
and p15
(a1
b2
c1
) = 157 − 48 = 109. That leaves the buyer with a
profit of 31 and s1 with a profit of 14, less than below the VCG
profit 20.
The welfare achieved in this case is optimal. To illustrate how
some efficiency loss could occur consider the case that c1(b2
c2
) =
60. In that case, in round 3 the configuration a1
b2
c2
provides the
same profit (67) as a2
b1
c2
, and s1 bids on both. While a2
b1
c2
is
no longer optimal after the price change, a1
b2
c2
remains optimal
on subsequent rounds because b2
c2
∈ Mt
, and the price change
of a1
b2
affects both a1
b2
c2
and the efficient configuration a1
b2
c1
.
When phase A ends B10
1 ∩ M10
= {a1
b2
c2
} so the auction 
terminates with the slightly suboptimal configuration and surplus 40.
