BASED UDDI REGISTRY HIERARCHIES
As mentioned earlier, we propose to build a distributed UDDI
system on top of a DHT infrastructure. This choice is primarily
motivated by the simplicity of the put/get abstraction that DHTs
provide, which is powerful enough for the task at hand, especially
since we plan to validate our approach with an implementation
running on PlanetLab [9]. A secondary motivation is to
understand deployment issues with DHT based systems. Several
applications have been built as overlays using DHTs, such as
distributed file storage, databases, publish-subscribe systems and
content distribution networks. In our case, we are building a DHT
based overlay network of UDDI registries, where the DHT acts as
a rendezvous network that connects multiple registries. In the
grid computing scenario, an overlay network of multiple UDDI
registries seems to an interesting alternative to the UDDI public
Article 2
registries currently maintained by Microsoft, IBM, SAP and NTT.
In addition, our aim is to not change any of the UDDI interfaces
for clients as well as publishers.
Figure 1 highlights the proposed architecture for the DHT based
UDDI Registry framework. UDDI nodes are replicated in a UDDI
registry as per the current UDDI standard. However, each local
registry has a local proxy registry that mediates between the local
UDDI registry and the DHT Service. The DHT service is the glue
that connects the Proxy Registries together and facilitates
searching across registries.
Figure 1: DUDE Architecture
Service information can be dispersed to several UDDI registries to
promote scalability. The proxy registry publishes, performs
queries and deletes information from the dispersed UDDI
registries. However, the scope of the queries is limited to relevant
registries. The DHT provides information about the relevant
registries. The core idea in the architecture is to populate DHT
nodes with the necessary information from the proxies which
enables easy and ubiquitous searching when queries are made.
When a new service is added to a registry, all potential search
terms are hashed by the proxy and used as DHT keys to publish
the service in the DHT. The value stored for this service uniquely
identifies the service, and includes the URL of a registry and the
unique UDDI key of the service in that registry. Similarly when
queries arrive, they are parsed and a set of search terms are
identified. These search terms are hashed and the values stored
with those hash values are retrieved from the DHT. Note that a
proxy does not need to know all DHT nodes; it needs to know just
one DHT node (this is done as part of the bootstrapping process)
and as described in Section 2.3, this DHT node can route the
query as necessary to the other nodes on the DHT overlay. We
describe three usage scenarios later that deal with adding a new
local registry, inserting a new service, and querying for a service.
Furthermore, the DHT optimizes the UDDI query mechanism.
This process becomes a lookup using a UDDI unique key rather
than a query using a set of search parameters. This key and the
URL of the registry are obtained by searching initially in the
DHT. The DHT query can return multiple values for matching
services, and in each of the matching registries, the proxy
performs lookup operations.
The service name is used as a hash for inserting the service
information. The service information contains the query URL and
unique UDDI key for the registry containing the service. There
could be multiple registries associated with a given service. The
service information conforms to the following schema.
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
elementFormDefault="qualified"
attributeFormDefault="unqualified">
<xs:element name="registries">
<xs:annotation>
<xs:documentation>Service Information</xs:documentation>
</xs:annotation>
<xs:complexType>
<xs:sequence>
<xs:element name="registry" maxOccurs="unbounded">
<xs:complexType>
<xs:sequence>
<xs:element name="name"/>
<xs:element name="key" maxOccurs="unbounded"/>
</xs:sequence>
â€¦
</xs:schema>
There can be multiple proxy UDDI registries in this architecture.
The advantage of this is to introduce distributed interactions
between the UDDI clients and registries. Organization can also
decide what information is available from the local registries by
implementing policies at the proxy registry.
3.1 Sequence of Operations
In this section, we demonstrate what the sequence of operations
should be for three crucial scenarios - adding a new local registry,
inserting a new service and querying a service. Other operations
like deleting a registry, deleting a service, etc. are similar and for
the sake of brevity are omitted here.
Figure 2: Sequence Diagram- Add New Local Registry
Add a New Local UDDI Registry
Figure 2 contains a sequence diagram illustrating how a new
UDDI registry is added to the network of UDDI registries. The
new registry registers itself with its proxy registry. The proxy
registry in turn queries the new registry for all services that it has
UDDI Local Registry UDDI Local Registry
UDDI Local Registry
Proxy Registry
DHT Based Distribution
Proxy Registry
Proxy Registry
Article 2
stored in its databases and in turn registers each of those entries
with the DHT.
Figure 3: Sequence Diagram - Add New Service
Add a New Service
The use case diagram depicted in Error! Reference source not
found. highlights how a client publishes a new service to the
UDDI registry. In order to interact with the registry a client has to
know how to contact its local proxy registry. It then publishes a
service with the proxy registry which in turn publishes the service
with the local UDDI registry and receives the UDDI key of the
registry entry. Then new key-value pairs are published in the
DHT, where each key is obtained by hashing a searchable
keyword of the service and the value consists of the query URL of
the registry and the UDDI key.
Figure 4: Sequence Diagram - Query for a Service
Query a Service
Figure 4 shows how a client queries the UDDI registry for a
service. Once again, the client needs to know how to contact its
local proxy registry and invokes the query service request. The
proxy registry in turn contacts one of the DHT nodes to determine
DHT queries using the search terms.
As explained earlier in the context of Figure 1, multiple values
might be retrieved from the DHT. Each value includes the query
URL of a registry, and the unique UDDI key of a matching
service in that registry. The proxy then contacts the matching
registries and waits for the response of lookup operations using
the corresponding UDDI keys. Upon receiving the responses, the
proxy registry collates all responses and returns the aggregated set
of services to the client.
We will now illustrate these operations using an example.
Consider a client contacting its local proxy to publish a service
called Computer Accessories. The proxy follows the steps in
Figure 3 to add the service to UDDI 1 registry, and also publishes
two entries in the DHT. The keys of these entries are obtained by
hashing the words computer and accessories respectively.
Both entries have the same value consisting of the query URL of
this registry and the unique UDDI key returned by the registry for
this service. Next we consider another client publishing a service
called Computer Repair through its proxy to UDDI 2 registry. A
similar process results in 2 more entries being added to the DHT.
Recall that our DHT deployment can have multiple entries with
the same key. If we follow the steps in Figure 4 for a client
sending a query to its proxy using the word computer, we see
that the DHT is queried with the hash of the word computer as
key. This retrieves the query URL and respective UDDI keys of
both services mentioned before in this example. The proxy can
then do a simple lookup operation at both UDDI 1 and 2
registries. It is clear that as the number of UDDI registries and
clients increases, this process of lookup at only relevant UDDI
registries is more scalable that doing a full search using the word
computer at all UDDI registries.
