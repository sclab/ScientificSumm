2.1 Grid Service Discovery
Grid computing is based on standards which use web services
technology. In the architecture presented in [6], the service
discovery function is assigned to a specialized Grid service called
Registry. The implementation of the web service version of the
Monitoring and Discovery Service (WS MDS), also known as the
MDS4 component of the Globus Toolkit version 4 (GT4),
includes such a registry in the form of the Index service Resource
and service properties are collected and indexed by this service.
Its basic function makes it similar to UDDI registry. To attain
scalability, Index services from different Globus containers can
register with each other in a hierarchical fashion to aggregate data.
This approach for attaining scalability works best in hierarchical
Virtual Organizations (VO), and expanding a search to find
sufficient number of matches involves traversing the hierarchy.
Specifically, this approach is not a good match for systems that try
to exploit the convergence of grid and peer-to-peer computing [5].
2.2 UDDI
Beyond grid computing, the problem of service discovery needs to
be addressed more generally in the web services community.
Again, scalability is a major concern since millions of buyers
looking for specific services need to find all the potential sellers
of the service who can meet their needs. Although there are
different ways of doing this, the web services standards
committees address this requirement through a specification
called UDDI (Universal Description, Discovery, and Integration).
A UDDI registry enables a business to enter three types of
information in a UDDI registry - white pages, yellow pages and
green pages. UDDI"s intent is to function as a registry for services
just as the yellow pages is a registry for businesses. Just like in
Yellow pages, companies register themselves and their services
under different categories. In UDDI, White Pages are a listing of
the business entities. Green pages represent the technical
information that is necessary to invoke a given service. Thus, by
browsing a UDDI registry, a developer should be able to locate a
service and a company and find out how to invoke the service.
When UDDI was initially offered, it provided a lot of potential.
However, today we find that UDDI has not been widely deployed
in the Internet. In fact, the only known uses of UDDI are what are
known as private UDDI registries within an enterprise"s
boundaries. The readers can refer to [7] for a recent article that
discusses the shortcomings of UDDI and the properties of an ideal
service registry. Improvement of the UDDI standard is continuing
in full force and UDDI version 3 (V3) was recently approved as
an OASIS Standard. However, UDDI today has issues that have
not been addressed, such as scalability and autonomy of
individual registries.
UDDI V3 provides larger support for multi-registry environments
based on portability of keys By allowing keys to be re-registered
in multiple registries, the ability to link registries in various
topologies is effectively enabled. However, no normative
description of these topologies is provided in the UDDI
specification at this point. The improvements within UDDI V3
that allow support for multi-registry environments are significant
and open the possibility for additional research around how 
multiregistry environments may be deployed. A recommended
deployment scenario proposed by the UDDI V3.0.2 Specification
is to use the UDDI Business Registries as root registries, and it is
possible to enable this using our solution.
2.3 Distributed Hash Tables
A Distributed Hash Table (DHT) is a peer-to-peer (P2P)
distributed system that forms a structured overlay allowing more
efficient routing than the underlying network. It maintains a
collection of key-value pairs on the nodes participating in this
graph structure. For our deployment, a key is the hash of a
keyword from a service name or description. There will be
multiple values for this key, one for each service containing the
keyword. Just like any other hash table data structure, it provides
a simple interface consisting of put() and get() operations. This
has to be done with robustness because of the transient nature of
nodes in P2P systems. The value stored in the DHT can be any
object or a copy or reference to it. The DHT keys are obtained
from a large identifier space. A hash function, such as MD5 or
SHA-1, is applied to an object name to obtain its DHT key. Nodes
in a DHT are also mapped into the same identifier space by
applying the hash function to their identifier, such as IP address
and port number, or public key. The identifier space is assigned
to the nodes in a distributed and deterministic fashion, so that
routing and lookup can be performed efficiently. The nodes of a
DHT maintain links to some of the other nodes in the DHT. The
pattern of these links is known as the DHT"s geometry. For
example, in the Bamboo DHT [11], and in the Pastry DHT [8] on
which Bamboo is based, nodes maintain links to neighboring
nodes and to other distant nodes found in a routing table. The
routing table entry at row i and column j, denoted Ri[j], is another
node whose identifier matches its own in first i digits, and whose
(i + 1)st digit is j. The routing table allows efficient overlay
routing. Bamboo, like all DHTs, specifies algorithms to be
followed when a node joins the overlay network, or when a node
fails or leaves the network The geometry must be maintained even
when this rate is high. To attain consistent routing or lookup, a
DHT key must be routed to the node with the numerically closest
identifier. For details of how the routing tables are constructed
and maintained, the reader is referred to [8, 11].
