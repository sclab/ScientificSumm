Manipulating and managing content is and has always been one
of the primary functions of a computer. Initial computing 
applications include text formatters and program compilers. Content was
initially managed by explicit user interaction through the use of
files and filesystems. As technology has advanced, both the types
of content and the way people wish to use it have greatly changed.
New content types such as continuous multimedia streams have 
become commonplace due to the convergence of advances in storage,
encoding, and networking technologies. For example, by 
combining improvements in storage and encoding, it is now possible to
store many hours of TV-quality encoded video on a single disk
drive. This has led to the introduction of stand alone digital video
recording or personal video recording (PVR) systems such as 
TiVO [8] and ReplayTV [7]. Another example is the combination of
encoding and broadband networking technology. This combination
has allowed users to access and share multimedia content in both
local and remote area networks with the network itself acting as a
huge data repository.
The proliferation of high quality content enabled by these 
advances in storage, encoding, and networking technology creates the
need for new ways to manipulate and manage the data. The focus
of our work is on the storage of media rich content and in 
particular the storage of continuous media content in either pre-packaged
or live forms. The need for content management in this area is
apparent when one consider the following:
• Increases in the capacity and decreases in the cost of storage
means that even modest desktop systems today have the 
ability to store massive amounts of content. Managing such 
content manually (or more correctly manual non-management
of such content) lead to great inefficiencies where unwanted
and forgotten content waste storage and where wanted 
content cannot be found.
• While true for all types of content the storage of 
continuous media content is especially problematic. First 
continuous media content is still very demanding in terms of storage
resources which means that a policy-less approach to 
storing it will not work for all but the smallest systems. 
Second, the storing of live content such as TV or radio is 
inherently problematic as these signals are continuous streams
with no endpoints. This means that before one can even think
about managing such content there is a need to abstract it into
something that could be manipulated and managed.
4
• When dealing with stored continuous media there is a need
to manage such content at both a fine-grained as well as an
aggregate level. For example, an individual PVR user 
wanting to keep only the highlights of a particular sporting event
should not be required to have to store the content pertaining
to the complete event. At the same time the user might want
to think of content in the aggregate, e.g. remove all of the
content that I have not watched for the last month except that
content which was explicitly marked for archival.
• As indicated above, trying to keep track of content on a 
standalone system without a content management system is very
difficult. However, when the actual storage devices are 
distributed across a network the task of keeping track of content
is almost impossible. This scenario is increasingly common
in network based content distribution systems and is likely to
also become important in home-networking scenarios.
It would seem clear then that a content management system that
can efficiently handle media rich content while also exploiting the
networked capability of storage devices is needed. This system
should allow efficient storage of and access to content across 
heterogeneous network storage devices according to user preferences.
The content management system should translate user preferences
into appropriate low-level storage policies and should allow those
preferences to be expressed at a fine level of granularity (while not
requiring it in general). The content management system should 
allow the user to manipulate and reason about (i.e. change the storage
policy associated with) the storage of (parts of) continuous media
content.
Addressing this distributed content management problem is 
difficult due to the number of requirements placed on the system. For
example:
• The content management system must operate on a large
number of heterogeneous systems. In some cases the system
may be managing content stored on a local filesystem, while
in others the content may be stored on a separate network
storage appliance. The content manager may be responsible
for implementing the policies it uses to reference content or
that role may be delegated to a separate computer. A 
application program interface (API) and associated network 
protocols are needed in order for the content management system
to provide a uniform interface.
• The content management system should be flexible and be
able to handle differing requirements for content 
management policies. These policies reflect what content should be
obtained, when it should be fetched, how long it should be 
retained, and under what circumstances it should be discarded.
This means that the content management system should 
allow multiple applications to reference content with a rich set
of policies and that it should all work together seamlessly.
• The content management system needs to be able to 
monitor references for content and use that information to place
content in the right location in the network for efficient 
application access.
• The content management system must handle the interaction
between implicit and explicit population of content at the 
network edge.
• The content system must be able to efficiently manage large
sets of content, including continuous streams. It needs to be
able to package this content in such a way that it is convenient
for users to access.
To address these issues we have designed and implemented the
Spectrum content management system architecture. Our layered 
architecture is flexible - its API allows the layers to reside either on
a single computer or on multiple networked heterogeneous 
computers. It allows multiple applications to reference content using
differing policies. Note that the Spectrum architecture assumes the
existence of a content distribution network (CDN) that can 
facilitate the efficient distribution of content (for example, the PRISM
CDN architecture [2]).
The rest of this paper is organized as follows. Section 2 describes
the architecture of our content management system. In Section 3
we describe both our implementation of the Spectrum architecture
and examples of its use. Related work is described in Section 4,
and Section 5 contains our conclusion and suggestions for future
work.
