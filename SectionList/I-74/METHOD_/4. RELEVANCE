Most work on dialogues is concerned with what we might
call coherent dialogues, that is dialogues in which the 
participants are, as in the work of Walton and Krabbe [27],
focused on resolving some question through the dialogue2
To capture this coherence, it seems we need a notion of 
relevance to constrain the statements made by agents. Here
we study three notions of relevance:
Definition 4.1. Consider a dialogue D, consisting of a
sequence of moves mi, with a corresponding argument graph
AG. The move mi+1, i > 1, is said to be relevant if one or
more of the following hold:
R1 Making mi+1 will change the status of the argument
denoted by the first node of AG.
R2 Making mi+1 will add a node vi+1 that is connected to
the first node of AG.
R3 Making mi+1 will add a node vi+1 that is connected to
the last node to be added to AG.
R2-relevance is the form of relevance defined by [3] in their
study of strategic and tactical reasoning3
. R1-relevance was
suggested by the notion used in [15], and though it differs
somewhat from that suggested there, we believe it captures
the essence of its predecessor.
Note that we only define relevance for the second move
of the dialogue onwards because the first move is taken to
identify the subject of the dialogue, that is, the central 
question that the dialogue is intended to answer, and hence it
must be relevant to the dialogue, no matter what it is. In
assuming this, we focus our attention on the same kind of
dialogues as [18].
We can think of relevance as enforcing a form of 
parsimony on a dialogue - it prevents agents from making 
statements that do not bear on the current state of the dialogue.
This promotes efficiency, in the sense of limiting the 
number of moves in the dialogue, and, as in [15], prevents agents
revealing information that they might better keep hidden.
Another form of parsimony is to insist that agents are not
allowed to put forward arguments that will be undercut by
arguments that have already been made during the dialogue.
We therefore distinguish such arguments.
2
See [11, 12] for examples of dialogues where this is not the case.
3
We consider such reasoning sub-types of rhetoric.
Definition 4.2. Consider a dialogue D, consisting of a
sequence of moves mi, with a corresponding argument graph
AG. The move mi+1 and the argument it puts forward,
Ai+1, are both said to be pre-empted, if Ai+1 is undercut by
some A âˆˆ Ai.
We use the term pre-empted because if such an argument
is put forward, it can seem as though another agent 
anticipated the argument being made, and already made an
argument that would render it useless. In the rest of this
paper, we will only deal with protocols that permit moves
that are relevant, in any of the senses introduced above, and
are not allowed to be pre-empted. We call such protocols 
basic protocols, and dialogues carried out under such protocols
basic dialogues.
The argument graph of a basic dialogue is somewhat 
restricted.
Proposition 4.1. Consider a basic dialogue D. The 
argumentation graph AG that corresponds to D is a tree with
a single root.
Proof. Recall that Definition 3.3 requires only that AG
be a directed graph. To show that it is a tree, we have to
show that it is acyclic and connected.
That the graph is connected follows from the construction
of the graph under a protocol that enforces relevance. If the
notion of relevance is R3, each move adds a node that is
connected to the previous node. If the notion of relevance is
R2, then every move adds a node that is connected to the
root, and thus is connected to some node in the graph. If the
notion of relevance is R1, then every move has to change the
status of the argument denoted by the root. Proposition 3.1
tells us that to affect the status of an argument A , the node
v representing the argument A that is effecting the change
has to be connected to v , the node representing A , and so
it follows that every new node added as a result of an 
R1relevant move will be connected to the argumentation graph.
Thus AG is connected.
Since a basic dialogue does not allow moves that are 
preempted, every edge that is added during construction is 
directed from the node that is added to one already in the graph
(thus denoting that the argument A denoted by the added
node, v, undercuts the argument A denoted by the node to
which the connection is made, v , rather than the other way
around). Since every edge that is added is directed from the
new node to the rest of the graph, there can be no cycles.
Thus AG is a tree.
To show that AG has a single root, consider its 
construction from the initial node. After m1 the graph has one node,
v1 that is both a root and a leaf. After m2, the graph is two
nodes connected by an edge, and v1 is now a root and not a
leaf. v2 is a leaf and not a root. However the third node is
added, the argument earlier in this proof demonstrates that
there will be a directed edge from it to some other node, 
making it a leaf. Thus v1 will always be the only root. The ruling
out of pre-empted moves means that v1 will never cease to
be a root, and so the argumentation graph will always have
one root.
Since every argumentation graph constructed by a basic 
dialogue is a tree with a single root, this means that the first
node of every argumentation graph is the root.
Although these results are straightforward to obtain, they
allow us to show how the notions of relevance are related.
The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1009
Proposition 4.2. Consider a basic dialogue D, 
consisting of a sequence of moves mi, with a corresponding 
argument graph AG.
1. Every move mi+1 that is R1-relevant is R2-relevant.
The converse does not hold.
2. Every move mi+1 that is R3-relevant is R2-relevant.
The converse does not hold.
3. Not every move mi+1 that is R1-relevant is R3-relevant,
and not every move mi+1 that is R3-relevant is 
R1relevant
Proof. For 1, consider how move mi+1 can satisfy R1.
Proposition 3.1 tells us that if Ai+1 can change the status
of the argument denoted by the root v1 (which, as observed
above, is the first node) of AG, then vi+1 must be connected
to the root. This is precisely what is required to satisfy R2,
and the relatiosnhip is proved to hold.
To see that the converse does not hold, we have to consider
what it takes to change the status of r (since Proposition 3.1
tells us that connectedness is not enough to ensure a change
of status - if it did, R1 and R2 relevance would coincide).
For mi+1 to change the status of the root, it will have to (1)
make the argument A represented by r either unacceptable,
if it were acceptable before the move, or (2) acceptable if it
were unacceptable before the move. Given the definition of
acceptability, it can achieve (1) either by directly 
undercutting the argument represented by r, in which case vi+1 will
be directly connected to r by some edge, or by undercutting
some argument A that is part of the set of non-undercut
arguments defending A. In the latter case, vi+1 will be 
directly connected to the node representing A and by 
Proposition 4.1 to r. To achieve (2), vi+1 will have to undercut
an argument A that is either currently undercutting A, or
is undercutting an argument that would otherwise defend A.
Now, further consider that mi+1 puts forward an argument
Ai+1 that undercuts the argument denoted by some node v ,
but this latter argument defends itself against Ai+1. In such
a case, the set of acceptable arguments will not change, and
so the status of Ar will not change. Thus a move that is
R2-relevant need not be R1-relevant.
For 2, consider that mi+1 can satisfy R3 simply by adding
a node that is connected to vi, the last node to be added
to AG. By Proposition 4.1, it is connected to r and so is
R2-relevant.
To see that the converse does not hold, consider that an
R2-relevant move can connect to any node in AG.
The first part of 3 follows by a similar argument to that we
just used - an R1-relevant move does not have to connect to
vi, just to some v that is part of the graph - and the second
part follows since a move that is R3-relevant may introduce
an argument Ai+1 that undercuts the argument Ai put 
forward by the previous move (and so vi+1 is connected to vi),
but finds that Ai defends itself against Ai+1, preventing a
change of status at the root.
What is most interesting is not so much the results but
why they hold, since this reveals some aspects of the 
interplay between relevance and the structure of argument
graphs. For example, to restate a case from the proof of
Proposition 4.2, a move that is R3-relevant by definition has
to add a node to the argument graph that is connected to the
last node that was added. Since a move that is R2-relevant
can add a node that connects anywhere on an argument
graph, any move that is R3-relevant will be R2-relevant,
but the converse does not hold.
It turns out that we can exploit the interplay between
structure and relevance that Propositions 4.1 and 4.2 have
started to illuminate to establish relationships between the
protocols that govern dialogues and the argument graphs
constructed during such dialogues. To do this we need to
define protocols in such a way that they refer to the structure
of the graph. We have:
Definition 4.3. A protocol is single-path if all dialogues
that conform to it construct argument graphs that have only
one branch.
Proposition 4.3. A basic protocol P is single-path if, for
all i, the set of permitted moves Mi at move i are all 
R3relevant. The converse does not hold.
Proof. R3-relevance requires that every node added to
the argument graph be connected to the previous node. 
Starting from the first node this recursively constructs a tree with
just one branch, and the relationship holds. The converse
does not hold because even if one or more moves in the 
protocol are R1- or R2-relevant, it may be the case that, because
of an agent"s rhetorical choice or because of its knowledge,
every argument that is chosen to be put forward will 
undercut the previous argument and so the argument graph is a
one-branch tree.
Looking for more complex kinds of protocol that construct
more complex kinds of argument graph, it is an obvious
move to turn to:
Definition 4.4. A basic protocol is multi-path if all 
dialogues that conform to it can construct argument graphs that
are trees.
But, on reflection, since any graph with only one branch is
also a tree:
Proposition 4.4. Any single-path protocol is an instance
of a multi-path protocol.
and, furthermore:
Proposition 4.5. Any basic protocol P is multi-path.
Proof. Immediate from Proposition 4.1
So the notion of a multi-path protocol does not have much
traction. As a result we distinguish multi-path protocols
that permit dialogues that can construct trees that have
more than one branch as bushy protocols. We then have:
Proposition 4.6. A basic protocol P is bushy if, for some
i, the set of permitted moves Mi at move i are all R1- or
R2-relevant.
Proof. From Proposition 4.3 we know that if all moves
are R3-relevant then we"ll get a tree with one branch, and
from Proposition 4.1 we know that all basic protocols will
build an argument graph that is a tree, so providing we 
exclude R3-relevant moves, we will get protocols that can build
multi-branch trees.
1010 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)
Of course, since, by Proposition 4.2, any move that is 
R3relevant is R2-relevant and can quite possibly be R1-relevant
(all that Proposition 4.2 tells us is that there is no 
guarantee that it will be), all that Proposition 4.6 tells us is that
dialogues that conform to bushy protocols may have more
than one branch. All we can do is to identify a bound on
the number of branches:
Proposition 4.7. Consider a basic dialogue D that 
includes m moves that are not R3-relevant, and has a 
corresponding argumentation graph AG. The number of branches
in AG is less than or equal to m + 1.
Proof. Since it must connect a node to the last node
added to AG, an R3-relevant move can only extend an 
existing branch. Since they do not have the same restriction,
R1 and R2-relevant moves may create a new branch by 
connecting to a node that is not the last node added. Every
such move could create a new branch, and if they do, we
will have m branches. If there were R3-relevant moves 
before any of these new-branch-creating moves, then these m
branches are in addition to the initial branch created by the
R3-relevant moves, and we have a maximum of m + 1 
possible branches.
We distinguish bushy protocols from multi-path protocols,
and hence R1- and R2-relevance from R3-relevance, because
of the kinds of dialogue that R3-relevance enforces. In a 
dialogue in which all moves must be R3-relevant, the 
argumentation graph has a single branch - the dialogue consists of
a sequence of arguments each of which undercuts the 
previous one and the last move to be made is the one that settles
the dialogue. This, as we will see next, means that such a
dialogue only allows a subset of all the moves that would
otherwise be possible.
