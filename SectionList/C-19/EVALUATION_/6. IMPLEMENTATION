We have implemented an experimental service-based 
protocol framework (called SAMOA) [7]. Our implementation
is light-weight: it consists of approximately 1200 lines of
code in Java 1.5 (with generics).
In this section, we describe the main two classes of our 
implementation: Service (encoding the Service Interface) and
694
service-based event-based
Protocol Interaction an adequate an inadequate
representation representation
Protocol Composition clear and safe complex
and error-prone
Dynamic Replacement an integrated ad-hoc solutions
mechanism
Table 1: Service-based vs. event-based
Protocol (encoding protocol modules). Finally, we present
an example protocol stack that we have implemented to 
validate the service-based approach.
The Service Class. A Service object is characterized by
the arguments of requests and the arguments of responses.
A response is either a reply or a notification. A special 
argument, called message, determines the kind of interactions
modeled by the response. A message represents a piece of
information sent over the network. When a protocol module
issues a request, it can give a message as an argument. The
message can specify the listener that must handle the reply.
When a protocol module issues a response to a service 
interface, a reply is issued if one of the arguments of the response
is a message specifying a listener. Otherwise, a notification
is issued.
Executers, listeners and interceptors are encoded as 
innerclasses of the Service class. This allows to provide type-safe
protocol interactions. For instance, executers can only be
bound to the Service object, they belong to. Thus, the
parameters passed to requests (that are verified statically)
always correspond to the parameters accepted by the 
corresponding executers.
The type of a Service object is determined by the type of
the arguments of requests and responses. A Service object
t is compatible with another Service object s if the type of
the arguments of requests (and responses) of t is a subtype of
the arguments of requests (and responses) of s. In practice,
if a protocol module Pi can issue a request to a protocol
UDP, then it may also issue a request to TCP (compatible
with UDP) due to the subtyping relation on parameters of
communicating modules.
The Protocol Class. A Protocol object consists of three
sets of components, one set for each component type (a 
listener, an executer, and an interceptor). Protocol objects
are characterized by names to retrieve them easily. 
Moreover, we have added some features to bind and unbind all
executers or interceptors to/from the corresponding Service
objects. Protocol objects can be loaded to a stack 
dynamically. All these features made it easy to implement dynamic
replacement of network protocols.
Protocol Stack Implementation. To validate our ideas, we
have developed an Adaptive Group Communication (AGC)
middleware, adopting both the service- and the event-based
approaches. Fig. 6 shows the corresponding stacks of the
AGC middleware. Both stacks allow the Consensus and
Atomic Broadcast protocols to be dynamically updated.
The architecture of our middleware, shown in Fig. 6,
builds on the group communication stack described in [15].
The UDP and RP2P modules provide respectively, 
unreliable and reliable point-to-point transport. The FD module
implements a failure detector; we assume that it ensures the
Stack 1
UDP1RP2P1
Repl
CT1
1ABc.
Repl
CT1
ABc.1
Network
FD1
GM1
rp2p
nt
udp
d
f
abcast
consensus
Stack 1
Repl
CT1
1ABc.
Repl
ABc.1
UDP1
FD1
RP2P1
CT1
Network
1GM
send
deliver
Figure 6: Adaptive Group Communication 
Middleware: service-based (left) vs. event-based (right)
properties of the 3S failure detector [9]. The CT module
provides a distributed consensus service using the 
ChandraToueg algorithm [10]. The ABc. module implements atomic
broadcast - a group communication primitive that delivers
messages to all processes in the same order. The GM 
module provides a group membership service that maintains 
consistent membership data among group members (see [19] for
details). The Repl ABc. and the Repl CT modules 
implement the replacement algorithms [18] for, respectively, the
ABc. and the CT protocol modules. Note that each arrow
in the event-based architecture represents an event. We do
not name events in the figure for readability.
The left stack in Figure 6 shows the implementation of
AGC with our service-based framework. The right stack
shows the same implementation with an event-based 
framework.
Performance Evaluation. To evaluate the overhead of 
service interfaces, we compared performance of the 
serviceand event-based implementations of the AGC middleware.
The latter implementation of AGC uses the Cactus protocol
framework [5, 2].
In our experiment, we compared the average latency of
Atomic Broadcast (ABcast), which is defined as follows.
Consider a message m sent using ABcast. We denote by
ti(m) the time between the moment of sending m and the
moment of delivering m on a machine (stack) i. We 
define the average latency of m as the average of ti(m) for all
machines (stacks) i within a group of stacks.
Performance tests have been made using a cluster of PCs
running Red Hat Linux 7.2, where each PC has a Pentium
III 766 MHz processor and 128MB of RAM. All PCs are 
interconnected by a 100 Base-TX duplex Ethernet hub. Our
experiment has involved 7 machines (stacks) that ABcast
messages of 4Mb under a constant load, where a load is a
number of messages per second. In Figure 7, we show the
results of our experiment for different loads. Latencies are
shown on the vertical axis, while message loads are shown
on the horizontal axis. The solid line shows the results 
obtained with our service-based framework. The dashed line
shows the results obtained with the Cactus framework. The
695
0
500
1000
1500
2000
10 20 30 40 50 60 70 80 90 100
Averagelatency[ms]
Load [msg/s]
Service-Based Framework
Cactus
Figure 7: Comparison between our service-based
framework and Cactus
overhead of the service-based framework is approximately
10%. This can be explained as follows. Firstly, the 
servicebased framework provides a higher level abstraction, which
has a small cost. Secondly, the AGC middleware was 
initially implemented and optimized for the event-based 
Cactus framework. However, it is possible to optimize the AGC
middleware for the service-based framework.
