Protocol frameworks, such Cactus [5, 2], Appia [1, 16],
Ensemble [12, 17], Eva [3], SDL [8] and Neko[6, 20], are 
programming tools for developing modular network protocols.
They allow complex protocols to be implemented by 
decomposing them into several modules cooperating together.
This approach facilitates code reuse and customization of
distributed protocols in order to fit the needs of different
applications. Moreover, protocol modules can be plugged
in to the system dynamically. All these features of protocol
frameworks make them an interesting enabling technology
for implementing adaptable systems [14] - an important class
of applications.
Most protocol frameworks are based on events (all 
frameworks cited above are based on this abstraction). Events
are used for asynchronous communication between different
modules on the same machine. However, the use of events
raises some problems [4, 13]. For instance, the composition
of modules may require connectors to route events, which
introduces burden for a protocol composer [4]. Protocol
frameworks such as Appia and Eva extend the event-based
approach with channels. However, in our opinion, this 
solution is not satisfactory since composition of complex 
protocol stacks becomes more difficult.
In this paper, we propose a new approach for 
building modular protocols, that is based on a service 
abstraction. We compare this new approach with the common,
event-based approach. We show that protocol frameworks
based on services have several advantages, e.g. allow for
a fairly straightforward protocol composition, clear 
implementation, and better support of dynamic replacement of
distributed protocols. To validate our claims, we have 
implemented SAMOA - an experimental protocol framework
that is purely based on the service-based approach to module
composition and implementation. The framework allowed
us to compare the service- and event-based implementations
of an adaptive group communication middleware.
The paper is organized as follows. Section 2 defines 
general notions. Section 3 presents the main characteristics
of event-based frameworks, and features that are distinct
for each framework. Section 4 describes our new approach,
which is based on service abstraction. Section 5 discusses the
advantages of a service-based protocol framework compared
to an event-based protocol framework. The description of
our experimental implementation is presented in Section 6.
Finally, we conclude in Section 7.
