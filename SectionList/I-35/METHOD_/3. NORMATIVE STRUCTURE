In MASs agents interact according to protocols which 
naturally are distributed. We advocate that actions in one such
protocol may have an effect on the enactment of other 
protocols. Certain actions can become prohibited or obligatory,
for example. We take normative positions to be obligations,
prohibitions and permissions akin to work described in [26].
The intention of adding or removing a normative position
we call normative command. Occurrences of normative 
positions in one protocol may also have consequences for other
protocols1
.
In order to define our norm language and specify how 
normative positions are propagated, we have been inspired by
multi-context systems [14]. These systems allow the 
structuring of knowledge into distinct formal theories and the 
definition of relationships between them. The relationships are
expressed as bridge rules - deducibility of formulae in some
contexts leads to the deduction of other formulae in other
contexts. Recently, these systems have been successfully
used to define agent architectures [11, 23]. The metaphor
translates to our current work as follows: the utterance of
illocutions and/or the existence of normative positions in
some normative scenes leads to the deduction of 
normative positions in other normative scenes. We are concerned
with the propagation and distribution of normative positions
within a network of distributed, normative scenes as a 
consequence of agents" actions. We take normative scenes to be
sets of normative positions and utterances that are 
associated with an underlying interaction protocol corresponding
to an activity.
In this section, we first present a simple language 
capturing these aspects and formally introduce the notions of
normative scene, normative transition rule and normative
structure. We give the intended semantics of these rules
and show how to control a MAS via norms in an example.
3.1 Basic Concepts
The building blocks of our language are terms and atomic
formulae:
Def. 1. A term, denoted as t, is (i) any constant 
expressed using lowercase (with or without subscripts), e.g.
a, b0, c or (ii) any variable expressed using uppercase (with
or without subscripts), e.g. X, Y, Zb or (iii) any function
f(t1, . . . , tn), where f is an n-ary function symbol and t1, .., tn
are terms.
Some examples of terms and functions are Credit, price or
offer(bible, 30) being respectively a variable, a constant and
a function. We will be making use of identifiers 
throughout the paper, which are constant terms and also need the
following definition:
Def. 2. An atomic formula is any construct p(t1, . . . , tn),
where p is an n-ary predicate symbol and t1, . . . , tn are terms.
The set of all atomic formulae is denoted as Δ.
We focus on an expressive class of MASs in which 
interaction is carried out by means of illocutionary speech acts
exchanged among participating agents:
Def. 3. Illocutions I are ground atomic formulae which
have the form p(ag, r, ag , r , δ, t) where p is an element of
1
Here, we abstract from protocols and refer to them generically as
activities.
The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 637
a set of illocutionary particles (e.g. inform, request, offer);
ag, ag are agent identifiers; r, r are role identifiers; δ, an
arbitrary ground term, is the content of the message, built
from a shared content language; t ∈ N is a time stamp.
The intuitive meaning of p(ag, r, ag , r , m, t) is that agent
ag playing role r sent message m to agent ag playing role
r at time t. An example of an illocution is inform(ag4,
supp, ag3, client, offer(wire, 12), 10). Sometimes it is useful
to refer to illocutions that are not fully grounded, that is,
those that may contain uninstantiated (free) variables. In
the description of a protocol, for instance, the precise values
of the message exchanged can be left unspecified. During
the enactment of the protocol agents will produce the actual
values which will give rise to a ground illocution. We can
thus define illocution schemata:
Def. 4. An illocution schema ¯I is any atomic formula
p(ag, r, ag , r , δ, t) in which some of the terms may either be
variables or may contain variables.
3.2 Formal Definition of the Notion of NS
We first define normative scenes as follows:
Def. 5. A normative scene is a tuple s = ids, Δs where
ids is a scene identifier and Δs is the set of atomic formulae
δ (i.e. utterances and normative positions) that hold in s.
We will also refer to Δs as the state of normative scene s.
For instance, a snapshot of the state of the delivery 
normative scene of our scenario could be represented as:
Δs =
8
<
:
utt(request(sean, client, kev, wm, receive(wire, 200), 20)),
utt(accept(kev, wm, sean, client, receive(wire, 200), 30)),
obl(inform(kev, wm, sean, client, delivered(wire, 200), 30))
9
=
;
That is, agent Sean taking up the client role has requested
agent Kev (taking up the warehouse manager role wm) to
receive 200kg of wire, and agent Kev is obliged to deliver
200kg of wire to Sean since he accepted the request. Note
that the state of a normative scene Δs evolves over time.
These normative scenes are connected to one another via
normative transitions that specify how utterances and 
normative positions in one scene affect other normative scenes.
As mentioned above, activities are not independent since
illocutions uttered in some of them may have an effect on
other ones. Normative transition rules define the conditions
under which a normative command is generated. These 
conditions are either utterances or normative positions 
associated with a given protocol (denoted e.g. activity : utterance)
which yield a normative command, i.e. the addition or 
removal of another normative position, possibly related to a
different activity. Our transition rules are thus defined:
Def. 6. A normative transition rule R is of the form:
R ::= V C
V ::= ids : D | V, V
D ::= N | utt(¯I)
N ::= per(¯I) | prh(¯I) | obl(¯I)
C ::= add(ids : N) | remove(ids : N)
where ¯I is an illocution schema, N is a normative position
(i.e. permission, prohibition or obligation), ids is an 
identifier for activity s and C is a normative command.
We endow our language with the usual semantics of 
rulebased languages [19]. Rules map an existing normative
structure to a new normative structure where only the state
of the normative scenes change. In the definitions below we
rely on the standard concept of substitution [9].
Def. 7. A normative transition is a tuple b = idb, rb
where idb is an identifier and rb is a normative transition
rule.
We are proposing to extend the notion of MAS, regulated
by protocols, with an extra layer consisting of normative
scenes and normative transitions. This layer is represented
as a bi-partite graph that we term normative structure. A
normative structure relates normative scenes and normative
transitions specifying which normative positions are to be
generated or removed in which normative scenes.
Def. 8. A normative structure is a labelled bi-partite graph
NS = Nodes, Edges, Lin
, Lout
. Nodes is a set S∪B where
S is a set of normative scenes and B is a set of normative
transitions. Edges is a set Ain
∪ Aout
where Ain
⊆ S × B
is a set of input arcs labelled with an atomic formula using
the labelling function Lin
: Ain
→ D; and Aout
⊆ B × S is
a set of output arcs labelled with a normative position using
the labelling function Lout
: Aout
→ N. The following must
hold:
1. Each atomic formula appearing in the LHS of a rule
rb must be of the form (ids : D) where s ∈ S and
D ∈ Δ and ∃ain
∈ Ain
such that ain
= (s, b) and
Lin
(ain
) = D.
2. The atomic formula appearing in the RHS of a rule rb
must be of the form add(ids : N) or remove(ids : N)
where s ∈ S and ∃aout
∈ Aout
such that aout
= (b, s)
and Lout
(aout
) = N.
3. ∀a ∈ Ain
such that a = (s, b) and b = idb, rb and
Lin
(a) = D then (ids:D) must occur in the LHS of rb.
4. ∀a ∈ Aout
such that a = (b, s) and b = idb, rb and
Lout
(a) = N then add(ids : N) or remove(ids : N) must
occur in the RHS of rb.
The first two points ensure that every atomic formulae on
the LHS of a normative transition rule labels an arc 
entering the appropriate normative transition in the normative
structure, and that the atomic formula on the RHS labels
the corresponding outgoing arc. Points three and four 
ensure that labels from all incoming arcs are used in the LHS
of the normative transition rule that these arcs enter into,
and that the labels from all outgoing arcs are used in the
RHS of the normative transition rule that these arcs leave.
3.3 Intended Semantics
The formal semantics will be defined via a mapping to
Coloured Petri Nets in Section 5.1. Here we start 
defining the intended semantics of normative transition rules by
describing how a rule changes a normative scene of an 
existing normative structure yielding a new normative structure.
Each rule is triggered once for each substitution that 
unifies the left-hand side V of the rule with the state of the
corresponding normative scenes. An atomic formula (i.e.
an utterance or a normative position) holds iff it is 
unifiable with an utterance or normative position that belongs
to the state of the corresponding normative scene. Every
time a rule is triggered, the normative command specified
on the right-hand side of that rule is carried out, 
intending to add or remove a normative position from the state
of the corresponding normative scene. However, addition is
not unconditional as conflicts may arise. This topic will be
treated in Sections 4 and 6.1.
638 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)
3.4 Example
In our running example we have the following exemplary
normative transition rule:
„
payment : obl(inform(X, client, Y, acc, pay(Z, P, Q), T )),
payment : utt(inform(X, client, Y, acc, pay(Z, P, Q), T ))
«
delivery : add(obl(inform(Y, wm, X, client, delivered(Z, Q), T )))
That is, during the payment activity, an obligation on client
X to inform accountant Y about the payment P of item Z
at time T and the corresponding utterance which fulfills this
obligation allows the flow of a norm to the delivery activity.
The norm is an obligation on agent Y (this time taking up
the role of the warehouse manager wm) to send a message
to client X that item Z has been delivered. We show in
Figure 2 a diagrammatic representation of how activities
and a normative structure relate:
Payment
Delivery
Contract
Normative Level
Exit
Registration
Payment
Delivery
Negotiation
Coordination Level
Contract
nt
Figure 2: Activities and Normative Structure
As illocutions are uttered during activities, normative 
positions arise. Utterances and normative positions are 
combined in transition rules, causing the flow of normative 
positions between normative scenes. The connection between
the two levels is described in Section 6.2.
