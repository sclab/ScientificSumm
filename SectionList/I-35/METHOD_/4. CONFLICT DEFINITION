The terms deontic conflict and deontic inconsistency have
been used interchangeably in the literature. However, in
this paper we adopt the view of [7] in which the authors
suggest that a deontic inconsistency arises when an action
is simultaneously permitted and prohibited - since a 
permission may not be acted upon, no real conflict occurs. The
situations when an action is simultaneously obliged and 
prohibited are, however, deontic conflicts, as both obligations
and prohibitions influence behaviours in a conflicting 
fashion. The content of normative positions in this paper are
illocutions. Therefore, a normative conflict arises when an
illocution is simultaneously obliged and prohibited.
We propose to use the standard notion of unification [9] to
detect when a prohibition and a permission overlap. For 
instance, an obligation obl(inform(A1, R1, A2, R2, p(c, X), T))
and a prohibition prh(inform(a1, r1, a2, r2, p(Y, d), T )) are
in conflict as they unify under σ = {A1/a1, R1/r1, A2/a2,
R2/r2, Y/c, X/d, T/T }). We formally capture this notion:
Def. 9. A (deontic) conflict arises between two 
normative positions N and N under a substitution σ, denoted as
conflict(N, N , σ), if and only if N = prh(¯I), N = obl(¯I )
and unify(¯I,¯I , σ).
That is, a prohibition and an obligation are in conflict if,
and only if, their illocutions unify under σ. The 
substitution σ, called here the conflict set, unifies the agents, roles
and atomic formulae. We assume that unify is a suitable
implementation of a unification algorithm which i) always
terminates (possibly failing, if a unifier cannot be found); ii)
is correct; and iii) has linear computational complexity.
Inconsistencies caused by the same illocution being 
simultaneously permitted and prohibited can be formalised 
similarly. In this paper we focus on prohibition/obligation 
conflicts, but the computational machinery introduced in 
Section 6.1 can equally be used to detect prohibition/permission
inconsistencies, if we substitute modality obl for per.
