4.1 Path auctions
We start by showing that for path auctions any two consecutive
payment bounds can differ by at least a factor of 2.
PROPOSITION 2. There is an instance of the shortest-path 
problem for which we have NTUmax(c)/NTUmin(c) ≥ 2.
PROOF. This construction is due to David Kempe [17]. 
Consider the graph of Figure 1 with the edge costs cAB = cBC =
cCD = 0, cAC = cBD = 1. Under these costs, ABCD is the
cheapest path. The inequalities in (2) are bAB + bBC ≤ cAC = 1,
bBC + bCD ≤ cBD = 1. By condition (3), both of these 
inequalities must be tight (the former one is the only inequality 
involving bAB, and the latter one is the only inequality involving bCD).
The inequalities in (1) are bAB ≥ 0, bBC ≥ 0, bCD ≥ 0. Now,
if the goal is to maximise bAB + bBC + bCD, the best choice is
bAB = bCD = 1, bBC = 0, so NTUmax(c) = 2. On the other
hand, if the goal is to minimise bAB + bBC + bCD, one should set
bAB = bCD = 0, bBC = 1, so NTUmin(c) = 1.
PROPOSITION 3. There is an instance of the shortest-path 
problem for which we have TUmax(c)/NTUmax(c) ≥ 2.
PROOF. Again, consider the graph of Figure 1. Let the edge
costs be cAB = cCD = 0, cBC = 1, cAC = cBD = 1. ABCD
is the lexicographically-least cheapest path, so we can assume that
S = {AB, BC, CD}. The inequalities in (2) are the same as in
the previous example, and by the same argument both of them are,
in fact, equalities. The inequalities in (1) are bAB ≥ 0, bBC ≥ 1,
bCD ≥ 0. Our goal is to maximise bAB + bBC + bCD. If we have
to respect the inequalities in (1), we have to set bAB = bCD = 0,
bBC = 1, so NTUmax(c) = 1. Otherwise, we can set bAB =
bCD = 1, bBC = 0, so TUmax(c) ≥ 2.
PROPOSITION 4. There is an instance of the shortest-path 
problem for which we have NTUmin(c)/TUmin(c) ≥ 2.
PROOF. This construction is also based on the graph of Figure 1.
The edge costs are cAB = cCD = 1, cBC = 0, cAC = cBD =
1. ABCD is the lexicographically least cheapest path, so we can
assume that S = {AB, BC, CD}. Again, the inequalities in (2)
are the same, and both are, in fact, equalities. The inequalities in (1)
are bAB ≥ 1, bBC ≥ 0, bCD ≥ 1. Our goal is to minimise bAB +
bBC +bCD. If we have to respect the inequalities in (1), we have to
set bAB = bCD = 1, bBC = 0, so NTUmin(c) = 2. Otherwise,
we can set bAB = bCD = 0, bBC = 1, so TUmin(c) ≤ 1.
In Section 4.4 (Theorem 3), we show that the separation results
in Propositions 2, 3, and 4 are optimal.
4.2 Connections between separation results
The separation results for path auctions are obtained on the same
graph using very similar cost vectors. It turns out that this is not
coincidental. Namely, we can prove the following theorem.
THEOREM 1. For any set system (E, F), and any feasible set S,
max
c
TUmax(c, S)
NTUmax(c, S)
= max
c
NTUmax(c, S)
NTUmin(c, S)
,
max
c
NTUmax(c, S)
NTUmin(c, S)
= max
c
NTUmin(c, S)
TUmin(c, S)
,
where the maximum is over all cost vectors c for which S is a
cheapest feasible set.
The proof of the theorem follows directly from the four lemmas
proved below; more precisely, the first equality in Theorem 1 is
obtained by combining Lemmas 1 and 2, and the second equality is
obtained by combining Lemmas 3 and 4. We prove Lemma 1 here;
the proofs of Lemmas 2- 4 are similar and can be found in the full
version of this paper [8].
LEMMA 1. Suppose that c is a cost vector for (E, F) such that
S is a cheapest feasible set and TUmax(c, S)/NTUmax(c, S) =
α. Then there is a cost vector c such that S is a cheapest feasible
set and NTUmax(c , S)/NTUmin(c , S) ≥ α.
PROOF. Suppose that TUmax(c, S) = X and NTUmax(c, S) =
Y where X/Y = α. Assume without loss of generality that S
consists of elements 1, . . . , k, and let b1
= (b1
1, . . . , b1
k) and b2
=
(b2
1, . . . , b2
k) be the bid vectors that correspond to TUmax(c, S)
and NTUmax(c, S), respectively.
Construct the cost vector c by setting ci = ci for i ∈ S,
ci = min{ci, b1
i } for i ∈ S. Clearly, S is a cheapest set under c .
Moreover, as the costs of elements outside of S remained the same,
the right-hand sides of all constraints in (2) did not change, so any
bid vector that satisfies (2) and (3) with respect to c, also satisfies
them with respect to c . We will construct two bid vectors b3
and
b4
that satisfy conditions (1), (2), and (3) for the cost vector c , and
339
X
X X
X X 0
X
12
3
X 4 5
6
Figure 2: Graph that separates payment bounds for vertex
cover, n = 7
have
P
i∈S b3
i = X,
P
i∈S b4
i = Y . As NTUmax(c , S) ≥ X
and NTUmin(c , S) ≤ Y , this implies the lemma.
We can set b3
i = b1
i : this bid vector satisfies conditions (2)
and (3) since b1
does, and we have b1
i ≥ min{ci, b1
i } = ci,
which means that b3
satisfies condition (1). Furthermore, we can
set b4
i = b2
i . Again, b4
satisfies conditions (2) and (3) since b2
does, and since b2
satisfies condition (1), we have b2
i ≥ ci ≥ ci,
which means that b4
satisfies condition (1).
LEMMA 2. Suppose c is a cost vector for (E, F) such that S is
a cheapest feasible set and NTUmax(c, S)/NTUmin(c, S) = α.
Then there is a cost vector c such that S is a cheapest feasible set
and TUmax(c , S)/NTUmax(c , S) ≥ α.
LEMMA 3. Suppose that c is a cost vector for (E, F) such that
S is a cheapest feasible set and NTUmax(c, S)/NTUmin(c, S) =
α. Then there is a cost vector c such that S is a cheapest feasible
set and NTUmin(c , S)/TUmin(c , S) ≥ α.
LEMMA 4. Suppose that c is a cost vector for (E, F) such that
S is a cheapest feasible set and NTUmin(c, S)/TUmin(c, S) =
α. Then there is a cost vector c such that S is a cheapest feasible
set and NTUmax(c , S)/NTUmin(c , S) ≥ α.
4.3 Vertex-cover auctions
In contrast to the case of path auctions, for vertex-cover 
auctions the gap between NTUmin(c) and NTUmax(c) (and hence
between NTUmax(c) and TUmax(c), and between TUmin(c)
and NTUmin(c)) can be proportional to the size of the graph.
PROPOSITION 5. For any n ≥ 3, there is a an n-vertex graph
and a cost vector c for which TUmax(c)/NTUmax(c) ≥ n − 2.
PROOF. The underlying graph consists of an (n − 1)-clique on
the vertices X1, . . . , Xn−1, and an extra vertex X0 adjacent to
Xn−1. The costs are cX1 = cX2 = · · · = cXn−2 = 0, cX0 =
cXn−1 = 1. We can assume that S = {X0, X1, . . . , Xn−2} (this
is the lexicographically first vertex cover of cost 1). For this set
system, the constraints in (2) are bXi + bX0 ≤ cXn−1 = 1 for
i = 1, . . . , n − 2. Clearly, we can satisfy conditions (2) and (3)
by setting bXi = 1 for i = 1, . . . , n − 2, bX0 = 0. Hence,
TUmax(c) ≥ n − 2. For NTUmax(c), there is an additional
constraint bX0 ≥ 1, so the best we can do is to set bXi = 0 for
i = 1, . . . , n − 2, bX0 = 1, which implies NTUmax(c) = 1.
Combining Proposition 5 with Lemmas 1 and 3, we derive the
following corollaries.
COROLLARY 1. For any n ≥ 3, we can construct an instance
of the vertex cover problem on a graph of size n that satisfies
NTUmax(c)/NTUmin(c) ≥ n − 2.
COROLLARY 2. For any n ≥ 3, we can construct an instance
of the vertex cover problem on a graph of size n that satisfies
NTUmin(c)/TUmin(c) ≥ n − 2.
j+2ix
ij
P \ P ij+2P \ P
yijixix j
j+1
i j+2ij+1
y y
i i j+2ie j
e j+1
e
ij+1
P \ P
Figure 3: Proof of Theorem 3: constraints for ˆPij and ˆPij+2 do
not overlap
4.4 Upper bounds
It turns out that the lower bound proved in the previous 
subsection is almost tight. More precisely, the following theorem shows
that no two payment bounds can differ by more than a factor of n;
moreover, this is the case not just for the vertex cover problem, but
for general set systems. We bound the gap between TUmax(c) and
TUmin(c). Since TUmin(c) ≤ NTUmin(c) ≤ NTUmax(c) ≤
TUmax(c), this bound applies to any pair of payment bounds.
THEOREM 2. For any set system (E, F) and any cost vector c,
we have TUmax(c)/TUmin(c) ≤ n.
PROOF. Assume wlog that the winning set S consists of 
elements 1, . . . , k. Let c1, . . . , ck be the true costs of elements in S,
let b1, . . . , bk be their bids that correspond to TUmin(c), and let
b1 , . . . , bk be their bids that correspond to TUmax(c).
Consider the conditions (2) and (3) for S. One can pick a subset
L of at most k inequalities in (2) so that for each i = 1, . . . , k there
is at least one inequality in L that is tight for bi. Suppose that the
jth inequality in L is of the form bi1 + · · · + bit ≤ c(Tj \ S). For
bi, all inequalities in L are, in fact, equalities. Hence, by adding
up all of them we obtain k
P
i=1,...,k bi ≥
P
j=1,...,k c(Tj \ S).
On the other hand, all these inequalities appear in condition (2), so
they must hold for bi , i.e.,
P
i=1,...,k bi ≤
P
j=1,...,k c(Tj \ S).
Combining these two inequalities, we obtain
nTUmin(c) ≥ kTUmin(c) ≥ TUmax(c).
REMARK 2. The final line of the proof of Theorem 2 shows
that, in fact, the upper bound on TUmax(c)/TUmin(c) can be
strengthened to the size of the winning set, k. Note that in 
Proposition 5, as well as in Corollaries 1 and 2, k = n−1, so these results
do not contradict each other.
For path auctions, this upper bound can be improved to 2, 
matching the lower bounds of Section 4.1.
THEOREM 3. For any instance of the shortest path problem,
TUmax(c) ≤ 2 TUmin(c).
PROOF. Given a network (G, s, t), assume without loss of 
generality that the lexicographically-least cheapest s-t path, P, in G
is {e1, . . . , ek}, where e1 = (s, v1), e2 = (v1, v2), . . . , ek =
(vk−1, t). Let c1, . . . , ck be the true costs of e1, . . . , ek, and let
b = (b1, . . . , bk) and b = (b1 , . . . , bk ) be bid vectors that 
correspond to TUmin(c) and TUmax(c), respectively.
For any i = 1, . . . , k, there is a constraint in (2) that is tight for
bi with respect to the bid vector b , i.e., an s-t path Pi that avoids
ei and satisfies b (P \Pi) = c(Pi \P). We can assume without loss
of generality that Pi coincides with P up to some vertex xi, then
deviates from P to avoid ei, and finally returns to P at a vertex
340
yi and coincides with P from then on (clearly, it might happen
that s = xi or t = yi). Indeed, if Pi deviates from P more than
once, one of these deviations is not necessary to avoid ei and can
be replaced with the respective segment of P without increasing the
cost of Pi. Among all paths of this form, let ˆPi be the one with the
largest value of yi, i.e., the rightmost one. This path corresponds
to an inequality Ii of the form bxi+1 + · · · + byi
≤ c( ˆPi \ P).
As in the proof of Theorem 2, we construct a set of tight 
constraints L such that every variable bi appears in at least one of these
constraints; however, now we have to be more careful about the
choice of constraints in L. We construct L inductively as follows.
Start by setting L = {I1}. At the jth step, suppose that all 
variables up to (but not including) bij
appear in at least one inequality
in L. Add Iij to L.
Note that for any j we have yij+1 > yij . This is because the
inequalities added to L during the first j steps did not cover bij+1
.
See Figure 3. Since yij+2 > yij+1 , we must also have xij+2 >
yij : otherwise, ˆPij+1 would not be the rightmost constraint for
bij+1
. Therefore, the variables in Iij+2 and Iij do not overlap, and
hence no bi can appear in more than two inequalities in L.
Now we follow the argument of the proof of Theorem 2 to finish.
By adding up all of the (tight) inequalities in L for bi we obtain
2
P
i=1,...,k bi ≥
P
j=1,...,k c( ˆPj \ P). On the other hand, all
these inequalities appear in condition (2), so they must hold for
bi , i.e.,
P
i=1,...,k bi ≤
P
j=1,...,k c( ˆPj \ P), so TUmax(c) ≤
2TUmin(c).