The aggregation abstraction we use in our work is heavily 
influenced by the Astrolabe [38] project. Astrolabe adopts a 
PropagateAll and unstructured gossiping techniques to attain robustness [5].
However, any gossiping scheme requires aggressive replication of
the aggregates. While such aggressive replication is efficient for
read-dominated attributes, it incurs high message cost for attributes
with a small read-to-write ratio. Our approach provides a 
flexible API for applications to set propagation rules according to their
read-to-write ratios. Other closely related projects include 
Willow [39], Cone [4], DASIS [1], and SOMO [45]. Willow, DASIS
and SOMO build a single tree for aggregation. Cone builds a tree
per attribute and requires a total order on the attribute values.
Several academic [15, 21, 42] and commercial [37] distributed
monitoring systems have been designed to monitor the status of
large networked systems. Some of them are centralized where all
the monitoring data is collected and analyzed at a central host. 
Ganglia [15, 23] uses a hierarchical system where the attributes are
replicated within clusters using multicast and then cluster 
aggregates are further aggregated along a single tree. Sophia [42] is
a distributed monitoring system designed with a declarative logic
programming model where the location of query execution is both
explicit in the language and can be calculated during evaluation.
This research is complementary to our work. TAG [21] collects
information from a large number of sensors along a single tree.
The observation that DHTs internally provide a scalable forest
of reduction trees is not new. Plaxton et al."s [28] original paper 
describes not a DHT, but a system for hierarchically aggregating and
querying object location data in order to route requests to nearby
copies of objects. Many systems-building upon both Plaxton"s
bit-correcting strategy [32, 46] and upon other strategies [24, 29,
35]-have chosen to hide this power and export a simple and 
general distributed hash table abstraction as a useful building block for
a broad range of distributed applications. Some of these systems
internally make use of the reduction forest not only for routing but
also for caching [32], but for simplicity, these systems do not 
generally export this powerful functionality in their external interface.
Our goal is to develop and expose the internal reduction forest of
DHTs as a similarly general and useful abstraction.
Although object location is a predominant target application for
DHTs, several other applications like multicast [8, 9, 33, 36] and
DNS [11] are also built using DHTs. All these systems implicitly
perform aggregation on some attribute, and each one of them must
be designed to handle any reconfigurations in the underlying DHT.
With the aggregation abstraction provided by our system, designing
and building of such applications becomes easier.
Internal DHT trees typically do not satisfy domain locality 
properties required in our system. Castro et al. [7] and Gummadi et
al. [17] point out the importance of path convergence from the 
perspective of achieving efficiency and investigate the performance of
Pastry and other DHT algorithms, respectively. SkipNet [18] 
provides domain restricted routing where a key search is limited to the
specified domain. This interface can be used to ensure path 
convergence by searching in the lowest domain and moving up to the next
domain when the search reaches the root in the current domain. 
Although this strategy guarantees path convergence, it loses the 
aggregation tree abstraction property of DHTs as the domain constrained
routing might touch a node more than once (as it searches forward
and then backward to stay within a domain).
