Heat diffusion provides us with another perspective about
how we can view the Web and also a way to calculate 
ranking values. In this paper, the Web pages are considered to
be drawn from an unknown manifold, and the link structure
forms a directed graph, which is considered as an 
approximation to the unknown manifold. The heat kernel established
on the Web graph is considered as the representation of the
relationship between Web pages. The temperature 
distribution after a fixed time period, induced by a special initial
temperature distribution, is considered as the rank scores on
the Web pages. Before establishing the proposed models, we
first show our motivations.
3.1 Motivations
There are two points to explain that PageRank is 
susceptible to web spam.
• Over-democratic. There is a belief behind 
PageRank-all pages are born equal. This can be seen from
the equal voting ability of one page: the sum of each
column is equal to one. This equal voting ability of all
pages gives the chance for a Web site operator to 
increase a manipulated page by creating a large number
of new pages pointing to this page since all the newly
created pages can obtain an equal voting right.
• Input-independent. For any given non-zero initial
input, the iteration will converge to the same stable
distribution corresponding to the maximum eigenvalue
1 of the transition matrix. This input-independent
property makes it impossible to set a special initial 
input (larger values for trusted pages and less values even
negative values for spam pages) to avoid web spam.
The input-independent feature of PageRank can be further
explained as follows. P = [(1 − α)g1T
+ αA] is a positive
stochastic matrix if g is set to be a positive stochastic vector
(the uniform distribution is one of such settings), and so the
largest eigenvalue is 1 and no other eigenvalue whose 
absolute value is equal to 1, which is guaranteed by the Perron
Theorem [11]. Let y be the eigenvector corresponding to 1,
then we have Py = y. Let {xk} be the sequence generated
from the iterations xk+1 = Pxk, and x0 is the initial input.
If {xk} converges to x, then xk+1 = Pxk implies that x
must satisfy Px = x. Since the only maximum eigenvalue
is 1, we have x = cy where c is a constant, and if both x
and y are normalized by their sums, then c = 1. The above
discussions show that PageRank is independent of the initial
input x0.
In our opinion, g and α are objective parameters 
determined by the users" behaviors and preferences. A, α and
g are the true web structure. While A is obtained by a
crawler and the setting α = 0.85 is accepted by the people,
we think that g should be determined by a user behavior
investigation, something like [1]. Without any prior 
knowledge, g has to be set as g = 1
n
1.
TrustRank model does not follow the true web structure
by setting a biased g, but the effects of combatting 
spamming are achieved in [7]; PageRank is on the contrary in
some ways. We expect a ranking algorithm that has an 
effect of anti-manipulation as TrustRank while respecting the
true web structure as PageRank.
We observe that the heat diffusion model is a natural way
to avoid the over-democratic and input-independent feature
of PageRank. Since heat always flows from a position with
higher temperatures to one with lower temperatures, points
are not equal as some points are born with high 
temperatures while others are born with low temperatures. On the
other hand, different initial temperature distributions will
give rise to different temperature distributions after a fixed
time period. Based on these considerations, we propose the
novel DiffusionRank. This ranking algorithm is also 
motivated by the viewpoint for the Web structure. We view
all the Web pages as points drawn from a highly complex
geometric structure, like a manifold in a high dimensional
space. On a manifold, heat can flow from one point to 
another through the underlying geometric structure in a given
time period. Different geometric structures determine 
different heat diffusion behaviors, and conversely the diffusion
behavior can reflect the geometric structure. More 
specifically, on the manifold, the heat flows from one point to
another point, and in a given time period, if one point x
receives a large amount of heat from another point y, we
can say x and y are well connected, and thus x and y have
a high similarity in the sense of a high mutual connection.
We note that on a point with unit mass, the temperature
and the heat of this point are equivalent, and these two terms
are interchangeable in this paper. In the following, we first
show the HDM on a manifold, which is the origin of HDM,
but cannot be employed to the World Wide Web directly,
and so is considered as the ideal case. To connect the ideal
case and the practical case, we then establish HDM on a
graph as an intermediate case. To model the real world
problem, we further build HDM on a random graph as a
practical case. Finally we demonstrate the DiffusionRank
which is derived from the HDM on a random graph.
3.2 Heat Flow On a Known Manifold
If the underlying manifold is known, the heat flow 
throughout a geometric manifold with initial conditions can be 
described by the following second order differential equation:
∂f(x,t)
∂t
− ∆f(x, t) = 0, where f(x, t) is the heat at location x
at time t, and ∆f is the Laplace-Beltrami operator on a 
function f. The heat diffusion kernel Kt(x, y) is a special 
solution to the heat equation with a special initial condition-a
unit heat source at position y when there is no heat in other
positions. Based on this, the heat kernel Kt(x, y) describes
the heat distribution at time t diffusing from the initial unit
heat source at position y, and thus describes the 
connectivity (which is considered as a kind of similarity) between x
and y. However, it is very difficult to represent the World
Wide Web as a regular geometry with a known dimension;
even the underlying is known, it is very difficult to find the
heat kernel Kt(x, y), which involves solving the heat 
equation with the delta function as the initial condition. This
motivates us to investigate the heat flow on a graph. The
graph is considered as an approximation to the underlying
manifold, and so the heat flow on the graph is considered as
an approximation to the heat flow on the manifold.
3.3 On an Undirected Graph
On an undirected graph G, the edge (vi, vj) is considered
as a pipe that connects nodes vi and vj. The value fi(t)
describes the heat at node vi at time t, beginning from an
initial distribution of heat given by fi(0) at time zero. f(t)
(f(0)) denotes the vector consisting of fi(t) (fi(0)).
We construct our model as follows. Suppose, at time t,
each node i receives M(i, j, t, ∆t) amount of heat from its
neighbor j during a period of ∆t. The heat M(i, j, t, ∆t)
should be proportional to the time period ∆t and the heat
difference fj(t) − fi(t). Moreover, the heat flows from node
j to node i through the pipe that connects nodes i and j.
Based on this consideration, we assume that M(i, j, t, ∆t) =
γ(fj(t) − fi(t))∆t. As a result, the heat difference at node
i between time t + ∆t and time t will be equal to the sum
of the heat that it receives from all its neighbors. This is
formulated as
fi(t + ∆t) − fi(t) =
j:(j,i)∈E
γ(fj(t) − fi(t))∆t, (2)
where E is the set of edges. To find a closed form solution
to Eq. (2), we express it in a matrix form: (f(t + ∆t) −
f(t))/∆t = γHf(t), where d(v) denotes the degree of the
node v. In the limit ∆t → 0, it becomes d
dt
f(t) = γHf(t).
Solving it, we obtain f(t) = eγtH
f(0), especially we have
f(1) = eγH
f(0), Hij =



−d(vj), j = i,
1, (vj, vi) ∈ E,
0, otherwise,
(3)
where eγH
is defined as eγH
= I+γH+ γ2
2!
H2
+ γ3
3!
H3
+· · · .
3.4 On a Directed Graph
The above heat diffusion model must be modified to fit the
situation where the links between Web pages are directed.
On one Web page, when the page-maker creates a link (a, b)
to another page b, he actually forces the energy flow, for
example, people"s click-through activities, to that page, and
so there is added energy imposed on the link. As a result,
heat flows in a one-way manner, only from a to b, not from
b to a. Based on such consideration, we modified the heat
diffusion model on an undirected graph as follows.
On a directed graph G, the pipe (vi, vj) is forced by added
energy such that heat flows only from vi to vj. Suppose, at
time t, each node vi receives RH = RH(i, j, t, ∆t) amount of
heat from vj during a period of ∆t. We have three 
assumptions: (1) RH should be proportional to the time period ∆t;
(2) RH should be proportional to the the heat at node vj;
and (3) RH is zero if there is no link from vj to vi. As a
result, vi will receive j:(vj ,vi)∈E σjfj(t)∆t amount of heat
from all its neighbors that points to it.
On the other hand, node vi diffuses DH(i, t, ∆t) amount
of heat to its subsequent nodes. We assume that: (1) The
heat DH(i, t, ∆t) should be proportional to the time period
∆t. (2) The heat DH(i, t, ∆t) should be proportional to the
the heat at node vi. (3) Each node has the same ability of
diffusing heat. This fits the intuition that a Web surfer only
has one choice to find the next page that he wants to browse.
(4) The heat DH(i, t, ∆t) should be uniformly distributed
to its subsequent nodes. The real situation is more complex
than what we assume, but we have to make this simple 
assumption in order to make our model concise. As a result,
node vi will diffuse γfi(t)∆t/di amount of heat to any of its
subsequent nodes, and each of its subsequent node should
receive γfi(t)∆t/di amount of heat. Therefore σj = γ/dj.
To sum up, the heat difference at node vi between time
t+∆t and time t will be equal to the sum of the heat that it
receives, deducted by what it diffuses. This is formulated as
fi(t + ∆t) − fi(t) = −γfi(t)∆t + j:(vj ,vi)∈E γ/djfj(t)∆t.
Similarly, we obtain
f(1) = eγH
f(0), Hij =



−1, j = i,
1/dj, (vj, vi) ∈ E,
0, otherwise.
(4)
3.5 On a Random Directed Graph
For real world applications, we have to consider random
edges. This can be seen in two viewpoints. The first one
is that in Eq. (1), the Web graph is actually modelled as
a random graph, there is an edge from node vi to node vj
with a probability of (1 − α)gj (see the item (1 − α)g1T
),
and that the Web graph is predicted by a random graph
[15, 16]. The second one is that the Web structure is a
random graph in essence if we consider the content similarity
between two pages, though this is not done in this paper.
For these reasons, the model would become more flexible if
we extend it to random graphs. The definition of a random
graph is given below.
Definition 1. A random graph RG = (V, P = (pij)) is
defined as a graph with a vertex set V in which the edges are
chosen independently, and for 1 ≤ i, j ≤ |V | the probability
of (vi, vj) being an edge is exactly pij.
The original definition of random graphs in [4], is changed
slightly to consider the situation of directed graphs. Note
that every static graph can be considered as a special 
random graph in the sense that pij can only be 0 or 1.
On a random graph RG = (V, P), where P = (pij) is
the probability of the edge (vi, vj) exists. In such a random
graph, the expected heat difference at node i between time
t + ∆t and time t will be equal to the sum of the expected
heat that it receives from all its antecedents, deducted by
the expected heat that it diffuses.
Since the probability of the link (vj, vi) is pji, the 
expected heat flow from node j to node i should be multiplied
by pji, and so we have fi(t + ∆t) − fi(t) = −γ fi(t) ∆t +
j:(vj ,vi)∈E γpjifj(t)∆t/RD+
(vj), where RD+
(vi) is the 
expected out-degree of node vi, it is defined as k pik. 
Similarly we have
f(1) = eγR
f(0), Rij =



−1, j = i;
pji/RD+
(vj), j = i.
(5)
When the graph is large, a direct computation of eγR
is
time-consuming, and we adopt its discrete approximation:
f(1) = (I +
γ
N
R)N
f(0). (6)
The matrix (I+ γ
N
R)N
in Eq. (6) and matrix eγR
in Eq. (5)
are called Discrete Diffusion Kernel and the Continuous
Diffusion Kernel respectively. Based on the Heat Diffusion
Models and their solutions, DiffusionRank can be 
established on undirected graphs, directed graphs, and random
graphs. In the next section, we mainly focus on 
DiffusionRank in the random graph setting.
