In this section, we derive our results for general connection
games.
4.1 Existence of Strong Equilibrium
We begin with a characterization of the existence of a
strong equilibrium in symmetric general connection games.
Similar to Theorem 3.1 (using a similar proof) we establish,
Theorem 4.1. In every symmetric fair connection game
there exists a strong equilibrium.
While every single source general connection game 
possesses a pure Nash equilibrium [3], it does not necessarily
admit some strong equilibrium.11
10
This is a variation on the example given in [2].
11
We thank Elliot Anshelevich, whose similar topology for
the fair-connection game inspired this example.
Theorem 4.2. There exists a single source general 
connection game that does not admit any strong equilibrium.
Proof. Consider single source general connection game
with 3 players on the graph depicted in Figure 4. Player i
wishes to connect the source s with its sink ti.We need to
consider only the NE profiles: (i) if all three players use the
link of cost 3, then there must be two agents whose total
sum exceeds 2, thus they can both reduce cost by deviating
to an edge of cost 2− . (ii) if two of the players use an edge
of cost 2− jointly, and the third player uses a different edge
of cost 2 − , then, the players with non-zero payments can
deviate to the path with the edge of cost 3 and reduce their
costs (since before the deviation the total payments of the
players is 4 − 2 ). We showed that none of the NE are SE,
and thus the game does not possess any SE.
Next we show that for the class of series parallel graphs,
there is always a strong equilibrium in the case of a single
source.
Theorem 4.3. In every single source general connection
game on a series-parallel graph, there exists a strong 
equilibrium.
Proof. Let Λ be a single source general connection game
on a SPG G = (V, E) with source s and sink t. We present an
algorithm that constructs a specific SE. We first consider the
following partial order between the players. For players i and
j, we have that i → j if there is a directed path from ti to tj.
We complete the partial order to a full order (in an arbitrary
way), and w.l.o.g. we assume that 1 → 2 → · · · → n.
The algorithm COMPUTE-SE, considers the players in
an increasing order, starting with player 1. Each player i
will fully buy a subset of the edges, and any player j > i
will consider the cost of those (bought) edges as zero. When
COMPUTE-SE considers player j, the cost of the edges
that players 1 to j−1 have bought is set to zero, and player j
fully buys a shortest path Qj
from s to tj. Namely, for every
edges e ∈ Qj
\ ∪i<jQi
we have pj(e) = ce and otherwise
pj(e) = 0. We next show that the algorithm 
COMPUTESE computes a SE.
Assume by way of contradiction that the profile p is not a
SE. Then, there exists a coalition that can improve the costs
of all its players by a deviation. Let Γ be such a coalition
of minimal size and let player i = max{j ∈ Γ}. For a player
j ∈ Γ let ¯Qj
and ¯pj
be the path and payment of player
j after the deviation, respectively. Let Q be a path from
the sink of player i, i.e. ti, to the sink of G, i.e. t. Then
Q = ¯Qi
∪ Q is a path from the source s to the sink t. For
any player j < i, let yj be the intersecting vertex of Q and
tj (by Lemma 2.1 one is guarantee to exist). Let y be the
furthest vertex on the path Q such that y = yj for some
j < i. The path from the source s to node y was fully paid
for by players j < i in p (before the deviation). There are
two cases we consider.
case a: After the deviation player i does not pay for edges
in j∈Γ\{i}
¯Qj
. This is a contradiction to the minimality of
the coalition Γ size, since the players in Γ \ {i} can form a
smaller coalition with payments ¯p.
case b: Otherwise, we show that player i cost after the 
deviation, i.e. ci(¯p), is at least his cost before the deviation, i.e.
ci(p), contradicting the fact that player i improved his cost.
Recall that given two vertices u, v on path ¯Q we denote by
¯Qu,v the subpath of ¯Q from u to v.
90
Before the deviation of the coalition Γ, a path from s to
y was fully paid for by the players j < i. Next we show that
no player k > i pays for any edge on any path from s to ti.
Consider a player k > i and let Qk = Qk
∪ Qk , where Qk is
a path connecting tk to t. Let yk be the intersecting vertex
of Qk and ti. Since there exists a path from s to yk that was
fully paid for by players j < k before the deviation, in 
particularly the path Qi
s,yk
, player k will not pay for any edge
on any path connecting s and yk. Therefore player i fully
pays for all edges on the path ¯Qi
y,ti
, i.e., ¯pi(e) = ce for all
edges e ∈ ¯Qi
y,ti
. Now consider the algorithm 
COMPUTESE at the step when player i selects a shortest path from
the source s to its sink ti and determines his payment pi. At
this point, player i could buy the path ¯Qi
y,ti
, since a path
from s to y was already paid for by players j < i. Hence,
ci(¯p) ≥ ci(p). This contradicts the fact that player i 
improved its cost and therefore not all the players in Γ reduce
their cost. This implies that p is a strong equilibrium.
4.2 Strong Price of Anarchy
While for every single source general connection game, it
holds that PoS = 1 [3], the price of anarchy can be as large
as n, even for two parallel edges. Here, we show that any
strong equilibrium in single source general connection games
yields the optimal cost.
Theorem 4.4. In single source general connection game,
if there exists a strong equilibrium, then the strong price of
anarchy is 1.
Proof. Let p = (p1, . . . , pn) be a strong equilibrium, and
let T∗
be the minimum cost Steiner tree on all players,
rooted at the (single) source s. Let T∗
e be the subtree of
T∗
disconnected from s when edge e is removed. Let Γ(Te)
be the set of players which have sinks in Te. For a set of
edges E, let c(E) = e∈E ce. Let P(Te) = i∈Γ(Te) ci(p).
Assume by way of contradiction that c(p) > c(T∗
). We
will show that there exists a sub-tree T of T∗
, that connects
a subset of players Γ ⊆ N, and a new set of payments ¯p, such
that for each i ∈ Γ, ci(¯p) < ci(p). This will contradict the
assumption that p is a strong equilibrium.
First we show how to find a sub-tree T of T∗
, such that
for any edge e, the payments of players with sinks in T∗
e is
more than the cost of T∗
e ∪ {e}. To build T , define an edge
e to be bad if the cost of T∗
e ∪ {e} is at least the payments
of the players with sinks in T∗
e , i.e., c(T∗
e ∪ {e}) ≥ P(T∗
e ).
Let B be the set of bad edges. We define T to be T∗
−
∪e∈B(T∗
e ∪ {e}). Note that we can find a subset B of B
such that ∪e∈B(T∗
e ∪ {e}) is equal to ∪e∈B (T∗
e ∪ {e}) and
for any e1, e2 ∈ B we have T∗
e1
∩ T∗
e2
= ∅. (The set B will
include any edge e ∈ B for which there is no other edge
e ∈ B on the path from e to the source s.) Considering
the edges in e ∈ B we can see that any subtree T∗
e we
delete from T can not decrease the difference between the
payments and the cost of the remaining tree. Therefore, in
T for every edge e, we have that c(Te ∪ {e}) < P(Te).
Now we have a tree T and our coalition will be Γ(T ).
What remain is to find payments ¯p for the players in Γ(T )
such that they will buy the tree T and every player in Γ(T )
will lower its cost, i.e. ci(p) > ci(¯p) for i ∈ Γ(T ). (Recall
that the payments have the restriction that player i can only
pay for edges on the path from s to ti.)
We will now define the coalition payments ¯p. Let ci(¯p,
Te) = e∈Te
¯pi(e) be the payments of player i for the 
subtree Te. We will show that for every subtree Te, ci(¯p, Te ∪
{e}) < ci(p), and hence ci(¯p) < ci(p). Consider the 
following bottom up process that defines ¯p. We assign the
payments of edge e in T , after we assign payments to all
the edges in Te. This implies that when we assign payments
for e, we have that the sum of the payments in Te is equal to
c(Te) = i∈Γ(Te) ci(¯p, Te). Since e was not a bad edge, we
know that c(Te ∪ {e}) = c(Te) + ce < P(Te). Therefore, we
can update the payments ¯p of players i ∈ Γ(Te), by setting
¯pi(e) = ce∆i/( j∈Γ(Te) ∆j), where ∆j = cj(p) − cj(¯p, Te).
After the update we have for player i ∈ Γ(Te),
ci(¯p, Te ∪ {e}) = ci(¯p, Te) + ¯pi(e)
= ci(¯p, Te) + ∆i
ce
j∈Γ(Te) ∆j
= ci(p) − ∆i(1 −
ce
P(Γ(Te)) − c(Te)
),
where we used the fact that j∈Γ(Te) ∆j = P(Γ(Te))−c(Te).
Since ce < P(Γ(Te)) − c(Te) it follows that ci(¯p, Te ∪ {e}) <
ci(p).
