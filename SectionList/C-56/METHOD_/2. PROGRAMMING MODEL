The programming model designed for the grid computing
architecture is very similar to the specified to the Business
Process Execution Language (BPEL) [2]. Both describe 
processes in XML [4] documents, but the former specifies 
processes strictly synchronous and structured, and has more
constructs for structured parallel control. The rationale 
behind of its design is the possibility of hierarchically distribute
the process control and coordination based on structured
constructs, differently from BPEL, which does not allow 
hierarchical composition of processes.
In the proposed programming model, a process is a set of
interdependent activities arranged to solve a certain 
problem. In detail, a process is composed of activities, 
subprocesses, and controllers (see Figure 1). Activities represent
simple tasks that are executed on behalf of a process; 
subprocesses are processes executed in the context of a 
parent process; and controllers are control elements used to
specify the execution order of these activities and 
subprocesses. Like structured languages, controllers can be nested
and then determine the execution order of other controllers.
Data are exchanged among process elements through 
parameters. They are passed by value, in case of simple 
objects, or by reference, if they are remote objects shared
among elements of the same controller or process. External
data can be accessed through data sources, such as relational
databases or distributed objects.
2.1 Controllers
Controllers are structured control constructs used to 
define the control flow of processes. There are sequential and
parallel controllers.
The sequential controller types are: block, switch, for
and while. The block controller is a simple sequential 
construct, and the others mimic equivalent structured 
programming language constructs. Similarly, the parallel types are:
par, parswitch, parfor and parwhile. They extend the 
respective sequential counterparts to allow parallel execution
of process elements.
All parallel controller types fork the execution of one or
more process elements, and then, wait for each execution to
finish. Indeed, they contain a fork and a join of execution.
Aiming to implement a conditional join, all parallel 
controller types contain an exit condition, evaluated all time
that an element execution finishes, in order to determine
when the controller must end.
The parfor and parwhile are the iterative versions of
the parallel controller types. Both fork executions while
the iteration condition is true. This provides flexibility to
determine, at run-time, the number of process elements to
execute simultaneously.
When compared to workflow languages, the parallel 
controller types represent structured versions of the workflow
control constructors, because they can nest other controllers
and also can express fixed and conditional forks and joins,
present in such languages.
2.2 Process Example
This section presents an example of a prime number search
application that receives a certain range of integers and 
returns a set of primes contained in this range. The whole
computation is made by a process, which uses a parallel
controller to start and dispatch several concurrent activities
of the same type, in order to find prime numbers. The 
portion of the XML document that describes the process and
activity types is shown below.
<PROCESS_TYPE NAME="FindPrimes">
<IN_PARAMETER TYPE="int" NAME="min"/>
<IN_PARAMETER TYPE="int" NAME="max"/>
<IN_PARAMETER TYPE="int" NAME="numPrimes"/>
<IN_PARAMETER TYPE="int" NAME="numActs"/>
<BODY>
<PRE_CODE>
setPrimes(new RemoteHashSet());
parfor.setMin(getMin());
parfor.setMax(getMax());
parfor.setNumPrimes(getNumPrimes());
parfor.setNumActs(getNumActs());
parfor.setPrimes(getPrimes());
parfor.setCounterBegin(0);
parfor.setCounterEnd(getNumActs()-1);
</PRE_CODE>
<PARFOR NAME="parfor">
<IN_PARAMETER TYPE="int" NAME="min"/>
<IN_PARAMETER TYPE="int" NAME="max"/>
<IN_PARAMETER TYPE="int" NAME="numPrimes"/>
<IN_PARAMETER TYPE="int" NAME="numActs"/>
<IN_PARAMETER
TYPE="RemoteCollection" NAME="primes"/>
<ITERATE>
<PRE_CODE>
int range=
(getMax()-getMin()+1)/getNumActs();
int minNum = range*getCounter()+getMin();
int maxNum = minNum+range-1;
if (getCounter() == getNumActs()-1)
maxNum = getMax();
findPrimes.setMin(minNum);
findPrimes.setMax(maxNum);
findPrimes.setNumPrimes(getNumPrimes());
findPrimes.setPrimes(getPrimes());
</PRE_CODE>
<ACTIVITY
TYPE="FindPrimes" NAME="findPrimes"/>
</ITERATE>
</PARFOR>
</BODY>
<OUT_PARAMETER
TYPE="RemoteCollection" NAME="primes"/>
</PROCESS_TYPE>
Middleware for Grid Computing 88
<ACTIVITY_TYPE NAME="FindPrimes">
<IN_PARAMETER TYPE="int" NAME="min"/>
<IN_PARAMETER TYPE="int" NAME="max"/>
<IN_PARAMETER TYPE="int" NAME="numPrimes"/>
<IN_PARAMETER
TYPE="RemoteCollection" NAME="primes"/>
<CODE>
for (int num=getMin(); num<=getMax(); num++) {
// stop, required number of primes was found
if (primes.size() >= getNumPrimes())
break;
boolean prime = true;
for (int i=2; i<num; i++) {
if (num % i == 0) {
prime = false;
break;
}
}
if (prime) {
primes.add(new Integer(num));
}
}
</CODE>
</ACTIVITY_TYPE>
Firstly, a process type that finds prime numbers, named
FindPrimes, is defined. It receives, through its input 
parameters, a range of integers in which prime numbers have
to be found, the number of primes to be returned, and the
number of activities to be executed in order to perform this
work. At the end, the found prime numbers are returned as
a collection through its output parameter.
This process contains a PARFOR controller aiming to 
execute a determined number of parallel activities. It iterates
from 0 to getNumActs() - 1, which determines the number
of activities, starting a parallel activity in each iteration. In
such case, the controller divides the whole range of numbers
in subranges of the same size, and, in each iteration, starts a
parallel activity that finds prime numbers in a specific 
subrange. These activities receive a shared object by reference
in order to store the prime numbers just found and control
if the required number of primes has been reached.
Finally, it is defined the activity type, FindPrimes, used
to find prime numbers in each subrange. It receives, through
its input parameters, the range of numbers in which it has
to find prime numbers, the total number of prime numbers
to be found by the whole process, and, passed by reference,
a collection object to store the found prime numbers. 
Between its CODE markers, there is a simple code to find prime
numbers, which iterates over the specified range and 
verifies if the current integer is a prime. Additionally, in each
iteration, the code verifies if the required number of primes,
inserted in the primes collection by all concurrent activities,
has been reached, and exits if true.
The advantage of using controllers is the possibility of the
support infrastructure determines the point of execution the
process is in, allowing automatic recovery and monitoring,
and also the capability of instantiating and dispatching 
process elements only when there are enough computing 
resources available, reducing unnecessary overhead. Besides,
due to its structured nature, they can be easily composed
and the support infrastructure can take advantage of this
in order to distribute hierarchically the nested controllers to
Group Server
Group
Java Virtual Machine
RMI JDBC
Group Manager
Process Server
Java Virtual Machine
RMI JDBC
Process Coordinator
Worker
Java Virtual Machine
RMI
Activity Manager
Repository
Figure 2: Infrastructure architecture
different machines over the grid, allowing enhanced 
scalability and fault-tolerance.
