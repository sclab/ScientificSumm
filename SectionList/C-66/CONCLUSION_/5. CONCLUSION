Business processes within workflows can be orchestrated to 
access web services. In this paper we looked at multi-tiered service
provisioning where web service requests to service types can be
mapped to different service providers. The resulting problem is
that in order to support a very large number of workflows, the
assignment of business process to web service provider must be
intelligent. We used a business value metric to measure the 
be34
0
0.2
0.4
0.6
0.8
1
0 200 400 600 800 1000
Percentageofallserviceproviders
Number of workflows
Service providers utilised
Genetic algorithm
Round robin
Random proportional
Greedy
Figure 9: The percentage of service providers utilized during 
workload executions. The Greedy algorithm always hits the one service
provider, while the Round Robin algorithm spreads requests evenly
across the providers.
0
0.2
0.4
0.6
0.8
1
0 200 400 600 800 1000
Percentageofallserviceproviders
Number of workflows
Service providers saturated
Genetic algorithm
Round robin
Random proportional
Greedy
Figure 10: The percentage of service providers that are saturated
among those providers who were utilized (that is, percentage of the 
service providers represented in Figure 9). A saturated service provider
is one whose workload is greater that its advertised maximum 
concurrency.
0
5
10
15
20
25
0 200 400 600 800 1000
Runningtimeinseconds
Total number of workflows
Running time of genetic algorithm
GA running time
Figure 11: Running time of the genetic algorithm.
haviour of workflows meeting or failing QoS values, and we 
optimised our scheduling to maximise the aggregate business value
across all workflows. Since the solution space of scheduler 
mappings is exponential, we used a genetic search algorithm to search
the space and converge toward the best schedule. With a default
configuration for all parameters and using our business value 
scoring, the GA produced up to 115% business value improvement over
the next best algorithm. Finally, because a genetic algorithm will
converge towards the optimal value using any metric (even other
than the business value metric we used), we believe our approach
has strong potential for continuing work.
In future work, we look to acquire real-world traces of web 
service instances in order to get better estimates of service agreement
guarantees, although we expect that such guarantees between the
providers and their consumers are not generally available to the
public. We will also look at other QoS metrics such as CPU and
I/O usage. For example, we can analyse transfer costs with 
varying bandwidth, latency, data size, and data distribution. Further,
we hope to improve our genetic algorithm and compare it to more
scheduler alternatives. Finally, since our work is complementary
to existing work in web services choreography (because we rely on
pre-configured workflows), we look to integrate our approach with
available web service workflow systems expressed in BPEL.
