In this paper, we are primarily interested in the organizational
design of a multiagent system - the roles enacted by the agents,
∗Primary author is a student
the coordination between the roles and the number and assignment
of roles and resources to the individual agents. The organizational
design is complicated by the fact that there is no best way to 
organize and all ways of organizing are not equally effective [2].
Instead, the optimal organizational structure depends both on the
problem at hand and the environmental conditions under which the
problem needs to be solved. The environmental conditions may
not be known a priori, or may change over time, which would 
preclude the use of a static organizational structure. On the other hand,
all problem instances and environmental conditions are not always
unique, which would render inefficient the use of a new, bespoke
organizational structure for every problem instance.
Organizational Self-Design (OSD) [4, 10] has been proposed
as an approach to designing organizations at run-time in which
the agents are responsible for generating their own organizational
structures. We believe that OSD is especially suited to the above
scenario in which the environment is semi-dynamic as the agents
can adapt to changes in the task structures and environmental 
conditions, while still being able to generate relatively stable 
organizational structures that exploit the common characteristics across
problem instances.
In our approach (as in [10]), we define two operators for OSD
- agent spawning and composition - when an agent becomes
overloaded, it spawns off a new agent to handle part of its task
load/responsibility; when an agent lies idle for an extended period
of time, it may decide to compose with another agent.
We use TÆMS as the underlying representation for our 
problem solving requests. TÆMS [11] (Task Analysis, Environment
Modeling and Simulation) is a computational framework for 
representing and reasoning about complex task environments in which
tasks (problems) are represented using extended hierarchical task
structures [3]. The root node of the task structure represents the
high-level goal that the agent is trying to achieve. The sub-nodes of
a node represent the subtasks and methods that make up the 
highlevel task. The leaf nodes are at the lowest level of abstraction and
represent executable methods - the primitive actions that the agents
can perform. The executable methods, themselves, may have 
multiple outcomes, with different probabilities and different 
characteristics such as quality, cost and duration. TÆMS also allows 
various mechanisms for specifying subtask variations and alternatives,
i.e. each node in TÆMS is labeled with a characteristic 
accumulation function that describes how many or which subgoals or sets of
subgoals need to be achieved in order to achieve a particular 
higherlevel goal. TÆMS has been used to model many different 
problemsolving environments including distributed sensor networks, 
information gathering, hospital scheduling, EMS, and military planning.
[5, 6, 3, 15].
The main contributions of this paper are as follows:
1. We extend existing OSD approaches to use TÆMS as the 
underlying problem representation, which allows us to model
and use OSD for worth-oriented domains. This in turn 
allows us to reason about (1) alternative task and role 
assignments that make different quality/cost tradeoffs and generate
different organizational structures and (2) uncertainties in the
execution of tasks.
2. We model the use of resources other than only processor 
resources.
3. We incorporate robustness into the organizational structures.
