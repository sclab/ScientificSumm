We have implemented a pTHINC prototype that runs the
client on widely-used Windows Mobile-based Pocket PC 
devices and the server on both Windows and Linux operating
systems. To demonstrate its effectiveness in supporting 
mobile wireless web applications, we have measured its 
performance on web applications. We present experimental results
on different PDA devices for two popular web applications,
browsing web pages and playing video content from the web.
We compared pTHINC against native web applications 
running locally on the PDA to demonstrate the improvement
that pTHINC can provide over the traditional fat-client 
approach. We also compared pTHINC against three of the
most widely used thin clients that can run on PDAs, Citrix
Meta-FrameXP [2], Microsoft Remote Desktop [3] and VNC
(Virtual Network Computing) [16]. We follow common 
practice and refer to Citrix MetaFrameXP and Microsoft Remote
Desktop by their respective remote display protocols, ICA
(Independent Computing Architecture) and RDP (Remote
Desktop Protocol).
4.1 Experimental Testbed
We conducted our web experiments using two different
wireless Pocket PC PDAs in an isolated Wi-Fi network 
testbed, as shown in Figure 2. The testbed consisted of two
PDA client devices, a packet monitor, a thin-client server,
and a web server. Except for the PDAs, all of the other 
machines were IBM Netfinity 4500R servers with dual 933 MHz
Intel PIII CPUs and 512 MB RAM and were connected on
a switched 100 Mbps FastEthernet network. The web server
used was Apache 1.3.27, the network emulator was 
NISTNet 2.0.12, and the packet monitor was Ethereal 0.10.9. The
PDA clients connected to the testbed through a 802.11b 
Lucent Orinoco AP-2000 wireless access point. All experiments
using the wireless network were conducted within ten feet
of the access point, so we considered the amount of packet
loss to be negligible in our experiments.
Two Pocket PC PDAs were used to provide results across
both older, less powerful models and newer higher 
performance models. The older model was a Dell Axim X5 with
147
Client 1024×768 640×480 Depth Resize Clip
RDP no yes 8-bit no yes
VNC yes yes 16-bit no no
ICA yes yes 16-bit yes no
pTHINC yes yes 24-bit yes no
Table 2: Thin-client Testbed Configuration Setting
a 400 MHz Intel XScale PXA255 CPU and 64 MB RAM
running Windows Mobile 2003 and a Dell TrueMobile 1180
2.4Ghz CompactFlash card for wireless networking. The
newer model was a Dell Axim X51v with a 624 MHz Intel
XScale XPA270 CPU and 64 MB RAM running Windows
Mobile 5.0 and integrated 802.11b wireless networking. The
X51v has an Intel 2700G multimedia accelerator with 16MB
video memory. Both PDAs are capable of 16-bit color but
have different screen sizes and display resolutions. The X5
has a 3.5 inch diagonal screen with 240×320 resolution. The
X51v has a 3.7 inch diagonal screen with 480×640.
The four thin clients that we used support different 
levels of display quality as summarized in Table 2. The RDP
client only supports a fixed 640×480 display resolution on
the server with 8-bit color depth, while other platforms 
provide higher levels of display quality. To provide a fair 
comparison across all platforms, we conducted our experiments
with thin-client sessions configured for two possible 
resolutions, 1024×768 and 640×480. Both ICA and VNC were
configured to use the native PDA resolution of 16-bit color
depth. The current pTHINC prototype uses 24-bit color 
directly and the client downsamples updates to the 16-bit color
depth available on the PDA. RDP was configured using only
8-bit color depth since it does not support any better color
depth. Since both pTHINC and ICA provide the ability to
view the display resized to fit the screen, we measured both
clients with and without the display resized to fit the PDA
screen. Each thin client was tested using landscape rather
than portrait mode when available. All systems run on the
X51v could run in landscape mode because the hardware
provides a landscape mode feature. However, the X5 does
not provide this functionality. Only pTHINC directly 
supports landscape mode, so it was the only system that could
run in landscape mode on both the X5 and X51v.
To provide a fair comparison, we also standardized on
common hardware and operating systems whenever possible.
All of the systems used the Netfinity server as the thin-client
server. For the two systems designed for Windows servers,
ICA and RDP, we ran Windows 2003 Server on the server.
For the other systems which support X-based servers, VNC
and pTHINC, we ran the Debian Linux Unstable 
distribution with the Linux 2.6.10 kernel on the server. We used the
latest thin-client server versions available on each platform
at the time of our experiments, namely Citrix MetaFrame
XP Server for Windows Feature Release 3, Microsoft 
Remote Desktop built into Windows XP and Windows 2003
using RDP 5.2, and VNC 4.0.
4.2 Application Benchmarks
We used two web application benchmarks for our 
experiments based on two common application scenarios, browsing
web pages and playing video content from the web. Since
many thin-client systems including two of the ones tested
are closed and proprietary, we measured their performance
in a noninvasive manner by capturing network traffic with
a packet monitor and using a variant of slow-motion 
benchmarking [13] previously developed to measure thin-client
performance in PDA environments [10]. This measurement
methodology accounts for both the display decoupling that
can occur between client and server in thin-client systems
as well as client processing time, which may be significant
in the case of PDAs.
To measure web browsing performance, we used a web
browsing benchmark based on the Web Text Page Load Test
from the Ziff-Davis i-Bench benchmark suite [7]. The 
benchmark consists of JavaScript controlled load of 55 pages from
the web server. The pages contain both text and 
graphics with pages varying in size. The graphics are embedded
images in GIF and JPEG formats. The original i-Bench
benchmark was modified for slow-motion benchmarking by
introducing delays of several seconds between the pages 
using JavaScript. Then two tests were run, one where 
delays where added between each page, and one where pages
where loaded continuously without waiting for them to be
displayed on the client. In the first test, delays were 
sufficiently adjusted in each case to ensure that each page could
be received and displayed on the client completely without
temporal overlap in transferring the data belonging to two
consecutive pages. We used the packet monitor to record
the packet traffic for each run of the benchmark, then used
the timestamps of the first and last packet in the trace to
obtain our latency measures [10]. The packet monitor also
recorded the amount of data transmitted between the client
and the server. The ratio between the data traffic in the two
tests yields a scale factor. This scale factor shows the loss
of data between the server and the client due to inability of
the client to process the data quickly enough. The product
of the scale factor with the latency measurement produces
the true latency accounting for client processing time.
To run the web browsing benchmark, we used Mozilla
Firefox 1.0.4 running on the thin-client server for the thin
clients, and Windows Internet Explorer (IE) Mobile for 2003
and Mobile for 5.0 for the native browsers on the X5 and
X51v PDAs, respectively. In all cases, the web browser used
was sized to fill the entire display region available.
To measure video playback performance, we used a video
benchmark that consisted of playing a 34.75s MPEG-1 video
clip containing a mix of news and entertainment 
programming at full-screen resolution. The video clip is 5.11 MB and
consists of 834 352x240 pixel frames with an ideal frame rate
of 24 frames/sec. We measured video performance using
slow-motion benchmarking by monitoring resulting packet
traffic at two playback rates, 1 frames/second (fps) and 24
fps, and comparing the results to determine playback 
delays and frame drops that occur at 24 fps to measure overall
video quality [13]. For example, 100% quality means that all
video frames were played at real-time speed. On the other
hand, 50% quality could mean that half the video data was
dropped, or that the clip took twice as long to play even
though all of the video data was displayed.
To run the video benchmark, we used Windows Media
Player 9 for Windows-based thin-client servers, MPlayer 1.0
pre 6 for X-based thin-client servers, and Windows Media
Player 9 Mobile and 10 Mobile for the native video players
running locally on the X5 and X51v PDAs, respectively. In
all cases, the video player used was sized to fill the entire
display region available.
4.3 Measurements
Figures 3 and 4 show the results of running the web 
brows148
0
1
10
100
pTHINC
Resized
pTHINCICA
Resized
ICAVNCRDPLOCAL
Latency(s)
Platform
Axim X5 (640x480 or less)
Axim X51v (640x480)
Axim X5 (1024x768)
Axim X51v (1024x768)
Figure 3: Browsing Benchmark: Average Page Latency
ing benchmark. For each platform, we show results for up to
four different configurations, two on the X5 and two on the
X51v, depending on whether each configuration was 
supported. However, not all platforms could support all 
configurations. The local browser only runs at the display 
resolution of the PDA, 480×680 or less for the X51v and the
X5. RDP only runs at 640×480. Neither platform could
support 1024×768 display resolution. ICA only ran on the
X5 and could not run on the X51v because it did not work
on Windows Mobile 5.
Figure 3 shows the average latency per web page for each
platform. pTHINC provides the lowest average web 
browsing latency on both PDAs. On the X5, pTHINC performs
up to 70 times better than other thin-client systems and 8
times better than the local browser. On the X51v, pTHINC
performs up to 80 times better than other thin-client 
systems and 7 times better than the native browser. In fact,
all of the thin clients except VNC outperform the local
PDA browser, demonstrating the performance benefits of
the thin-client approach. Usability studies have shown that
web pages should take less than one second to download
for the user to experience an uninterrupted web browsing
experience [14]. The measurements show that only the thin
clients deliver subsecond web page latencies. In contrast, the
local browser requires more than 3 seconds on average per
web page. The local browser performs worse since it needs
to run a more limited web browser to process the HTML,
JavaScript, and do all the rendering using the limited 
capabilities of the PDA. The thin clients can take advantage of
faster server hardware and a highly tuned web browser to
process the web content much faster.
Figure 3 shows that RDP is the next fastest platform after
pTHINC. However, RDP is only able to run at a fixed 
resolution of 640×480 and 8-bit color depth. Furthermore, RDP
also clips the display to the size of the PDA screen so that
it does not need to send updates that are not visible on the
PDA screen. This provides a performance benefit 
assuming the remaining web content is not viewed, but degrades
performance when a user scrolls around the display to view
other web content. RDP achieves its performance with 
significantly lower display quality compared to the other thin
clients and with additional display clipping not used by other
systems. As a result, RDP performance alone does not 
provide a complete comparison with the other platforms. In
contrast, pTHINC provides the fastest performance while
at the same time providing equal or better display quality
than the other systems.
0
1
10
100
1000
pTHINC
Resized
pTHINCICA
Resized
ICAVNCRDPLOCAL
DataSize(KB)
Platform
Axim X5 (640x480 or less)
Axim X51v (640x480)
Axim X5 (1024x768)
Axim X51v (1024x768)
Figure 4: Browsing Benchmark: Average Page Data
Transferred
Since VNC and ICA provide similar display quality to
pTHINC, these systems provide a more fair comparison of
different thin-client approaches. ICA performs worse in part
because it uses higher-level display primitives that require
additional client processing costs. VNC performs worse in
part because it loses display data due to its client-pull 
delivery mechanism and because of the client processing costs
in decompressing raw pixel primitives. In both cases, their
performance was limited in part because their PDA clients
were unable to keep up with the rate at which web pages
were being displayed.
Figure 3 also shows measurements for those thin clients
that support resizing the display to fit the PDA screen,
namely ICA and pTHINC. Resizing requires additional 
processing, which results in slower average web page latencies.
The measurements show that the additional delay incurred
by ICA when resizing versus not resizing is much more 
substantial than for pTHINC. ICA performs resizing on the
slower PDA client. In contrast, pTHINC leverage the more
powerful server to do resizing, reducing the performance
difference between resizing and not resizing. Unlike ICA,
pTHINC is able to provide subsecond web page download
latencies in both cases.
Figure 4 shows the data transferred in KB per page when
running the slow-motion version of the tests. All of the 
platforms have modest data transfer requirements of roughly
100 KB per page or less. This is well within the 
bandwidth capacity of Wi-Fi networks. The measurements show
that the local browser does not transfer the least amount of
data. This is surprising as HTML is often considered to be
a very compact representation of content. Instead, RDP is
the most bandwidth efficient platform, largely as a result of
using only 8-bit color depth and screen clipping so that it
does not transfer the entire web page to the client. pTHINC
overall has the largest data requirements, slightly more than
VNC. This is largely a result of the current pTHINC 
prototype"s lack of native support for 16-bit color data in the wire
protocol. However, this result also highlights pTHINC"s 
performance as it is faster than all other systems even while
transferring more data. Furthermore, as newer PDA models
support full 24-bit color, these results indicate that pTHINC
will continue to provide good web browsing performance.
Since display usability and quality are as important as
performance, Figures 5 to 8 compare screenshots of the 
different thin clients when displaying a web page, in this case
from the popular BBC news website. Except for ICA, all of
the screenshots were taken on the X51v in landscape mode
149
Figure 5: Browser Screenshot: RDP 640x480 Figure 6: Browser Screenshot: VNC 1024x768
Figure 7: Browser Screenshot: ICA Resized 1024x768 Figure 8: Browser Screenshot: pTHINC Resized 1024x768
using the maximum display resolution settings for each 
platform given in Table 2. The ICA screenshot was taken on the
X5 since ICA does not run on the X51v. While the 
screenshots lack the visual fidelity of the actual device display, 
several observations can be made. Figure 5 shows that RDP
does not support fullscreen mode and wastes lots of screen
space for controls and UI elements, requiring the user to
scroll around in order to access the full contents of the web
browsing session. Figure 6 shows that VNC makes better
use of the screen space and provides better display quality,
but still forces the user to scroll around to view the web
page due to its lack of resizing support. Figure 7 shows
ICA"s ability to display the full web page given its resizing
support, but that its lack of landscape capability and poorer
resize algorithm significantly compromise display quality. In
contrast, Figure 8 shows pTHINC using resizing to provide
a high quality fullscreen display of the full width of the web
page. pTHINC maximizes the entire viewing region by 
moving all controls to the PDA buttons. In addition, pTHINC
leverages the server computational power to use a high 
quality resizing algorithm to resize the display to fit the PDA
screen without significant overhead.
Figures 9 and 10 show the results of running the video
playback benchmark. For each platform except ICA, we
show results for an X5 and X51v configuration. ICA could
not run on the X51v as noted earlier. The measurements
were done using settings that reflected the environment a
user would have to access a web session from both a 
desktop computer and a PDA. As such, a 1024×768 server 
display resolution was used whenever possible and the video
was shown at fullscreen. RDP was limited to 640×480 
display resolution as noted earlier. Since viewing the entire
video display is the only really usable option, we resized
the display to fit the PDA screen for those platforms that
supported this feature, namely ICA and pTHINC.
Figure 9 shows the video quality for each platform. pTHINC
is the only thin client able to provide perfect video playback
quality, similar to the native PDA video player. All of the
other thin clients deliver very poor video quality. With the
exception of RDP on the X51v which provided unacceptable
35% video quality, none of the other systems were even able
to achieve 10% video quality. VNC and ICA have the worst
quality at 8% on the X5 device.
pTHINC"s native video support enables superior video
performance, while other thin clients suffer from their 
inability to distinguish video from normal display updates.
They attempt to apply ineffective and expensive 
compression algorithms on the video data and are unable to keep up
with the stream of updates generated, resulting in dropped
frames or long playback times. VNC suffers further from
its client-pull update model because video frames are 
generated faster than the rate at which the client can process
and send requests to the server to obtain the next display
update. Figure 10 shows the total data transferred during
150
0%
20%
40%
60%
80%
100%
pTHINCICAVNCRDPLOCAL
VideoQuality
Platform
Axim X5
Axim X51v
Figure 9: Video Benchmark: Fullscreen Video Quality
0
1
10
100
pTHINCICAVNCRDPLOCAL
VideoDataSize(MB)
Platform
Axim X5
Axim X51v
Figure 10: Video Benchmark: Fullscreen Video Data
video playback for each system. The native player is the
most bandwidth efficient platform, sending less than 6 MB
of data, which corresponds to about 1.2 Mbps of bandwidth.
pTHINC"s 100% video quality requires about 25 MB of data
which corresponds to a bandwidth usage of less than 6 Mbps.
While the other thin clients send less data than THINC,
they do so because they are dropping video data, resulting
in degraded video quality.
Figures 11 to 14 compare screenshots of the different thin
clients when displaying the video clip. Except for ICA, all of
the screenshots were taken on the X51v in landscape mode
using the maximum display resolution settings for each 
platform given in Table 2. The ICA screenshot was taken on the
X5 since ICA does not run on the X51v. Figures 11 and 12
show that RDP and VNC are unable to display the entire
video frame on the PDA screen. RDP wastes screen space
for UI elements and VNC only shows the top corner of the
video frame on the screen. Figure 13 shows that ICA 
provides resizing to display the entire video frame, but did not
proportionally resize the video data, resulting in strange 
display artifacts. In contrast, Figure 14 shows pTHINC using
resizing to provide a high quality fullscreen display of the 
entire video frame. pTHINC provides visually more appealing
video display than RDP, VNC, or ICA.
