The increasing ubiquity of wireless networks and 
decreasing cost of hardware is fueling a proliferation of mobile 
wireless handheld devices, both as standalone wireless Personal
Digital Assistants (PDA) and popular integrated PDA/cell
phone devices. These devices are enabling new forms of 
mobile computing and communication. Service providers are
leveraging these devices to deliver pervasive web access, and
mobile web users already often use these devices to access
web-enabled information such as news, email, and localized
travel guides and maps. It is likely that within a few years,
most of the devices accessing the web will be mobile.
Users typically access web content by running a web browser
and associated helper applications locally on the PDA. 
Although native web browsers exist for PDAs, they deliver
subpar performance and have a much smaller feature set
and more limited functionality than their desktop 
computing counterparts [10]. As a result, PDA web browsers are 
often not able to display web content from web sites that 
leverage more advanced web technologies to deliver a richer web
experience. This fundamental problem arises for two 
reasons. First, because PDAs have a completely different 
hardware/software environment from traditional desktop 
computers, web applications need to be rewritten and customized
for PDAs if at all possible, duplicating development costs.
Because the desktop application market is larger and more
mature, most development effort generally ends up being
spent on desktop applications, resulting in greater 
functionality and performance than their PDA counterparts. 
Second, PDAs have a more resource constrained environment
than traditional desktop computers to provide a smaller
form factor and longer battery life. Desktop web browsers
are large, complex applications that are unable to run on a
PDA. Instead, developers are forced to significantly strip
down these web browsers to provide a usable PDA web
browser, thereby crippling PDA browser functionality.
Thin-client computing provides an alternative approach
for enabling pervasive web access from handheld devices.
A thin-client computing system consists of a server and a
client that communicate over a network using a remote 
display protocol. The protocol enables graphical displays to be
virtualized and served across a network to a client device,
while application logic is executed on the server. Using the
remote display protocol, the client transmits user input to
the server, and the server returns screen updates of the 
applications from the server to the client. Using a thin-client
model for mobile handheld devices, PDAs can become 
simple stateless clients that leverage the remote server 
capabilities to execute web browsers and other helper applications.
The thin-client model provides several important 
benefits for mobile wireless web. First, standard desktop web
applications can be used to deliver web content to PDAs
without rewriting or adapting applications to execute on
a PDA, reducing development costs and leveraging existing
software investments. Second, complex web applications can
be executed on powerful servers instead of running stripped
down versions on more resource constrained PDAs, 
providing greater functionality and better performance [10]. Third,
web applications can take advantage of servers with faster
networks and better connectivity, further boosting 
application performance. Fourth, PDAs can be even simpler 
devices since they do not need to perform complex application
logic, potentially reducing energy consumption and 
extend143
ing battery life. Finally, PDA thin clients can be essentially
stateless appliances that do not need to be backed up or 
restored, require almost no maintenance or upgrades, and do
not store any sensitive data that can be lost or stolen. This
model provides a viable avenue for medical organizations to
comply with HIPAA regulations [6] while embracing mobile
handhelds in their day to day operations.
Despite these potential advantages, thin clients have been
unable to provide the full range of these benefits in delivering
web applications to mobile handheld devices. Existing thin
clients were not designed for PDAs and do not account for
important usability issues in the context of small form factor
devices, resulting in difficulty in navigating displayed web
content. Furthermore, existing thin clients are ineffective at
providing seamless mobility across the heterogeneous mix
of device display sizes and resolutions. While existing thin
clients can already provide faster performance than native
PDA web browsers in delivering HTML web content, they
do not effectively support more display-intensive web helper
applications such as multimedia video, which is increasingly
an integral part of available web content.
To harness the full potential of thin-client computing in
providing mobile wireless web on PDAs, we have developed
pTHINC (PDA THin-client InterNet Computing). pTHINC
builds on our previous work on THINC [1] to provide a 
thinclient architecture for mobile handheld devices. pTHINC
virtualizes and resizes the display on the server to efficiently
deliver high-fidelity screen updates to a broad range of 
different clients, screen sizes, and screen orientations, including
both portrait and landscape viewing modes. This enables
pTHINC to provide the same persistent web session across
different client devices. For example, pTHINC can provide
the same web browsing session appropriately scaled for 
display on a desktop computer and a PDA so that the same
cookies, bookmarks, and other meta-data are continuously
available on both machines simultaneously. pTHINC"s 
virtual display approach leverages semantic information 
available in display commands, and client-side video hardware to
provide more efficient remote display mechanisms that are
crucial for supporting more display-intensive web 
applications. Given limited display resolution on PDAs, pTHINC
maximizes the use of screen real estate for remote display
by moving control functionality from the screen to readily
available PDA control buttons, improving system usability.
We have implemented pTHINC on Windows Mobile and
demonstrated that it works transparently with existing 
applications, window systems, and operating systems, and does
not require modifying, recompiling, or relinking existing 
software. We have quantitatively evaluated pTHINC against 
local PDA web browsers and other thin-client approaches on
Pocket PC devices. Our experimental results demonstrate
that pTHINC provides superior web browsing performance
and is the only PDA thin client that effectively supports
crucial browser helper applications such as video playback.
This paper presents the design and implementation of
pTHINC. Section 2 describes the overall usage model and 
usability characteristics of pTHINC. Section 3 presents the 
design and system architecture of pTHINC. Section 4 presents
experimental results measuring the performance of pTHINC
on web applications and comparing it against native PDA
browsers and other popular PDA thin-client systems. 
Section 5 discusses related work. Finally, we present some 
concluding remarks.
